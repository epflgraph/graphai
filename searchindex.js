Search.setIndex({"docnames": ["graphai", "graphai.api", "graphai.api.auth", "graphai.api.auth.auth_utils", "graphai.api.auth.log", "graphai.api.auth.router", "graphai.api.common", "graphai.api.common.schemas", "graphai.api.common.utils", "graphai.api.embedding", "graphai.api.embedding.router", "graphai.api.embedding.schemas", "graphai.api.image", "graphai.api.image.router", "graphai.api.image.schemas", "graphai.api.main", "graphai.api.main.main", "graphai.api.ontology", "graphai.api.ontology.router", "graphai.api.ontology.schemas", "graphai.api.retrieval", "graphai.api.retrieval.router", "graphai.api.retrieval.schemas", "graphai.api.scraping", "graphai.api.scraping.router", "graphai.api.scraping.schemas", "graphai.api.text", "graphai.api.text.router", "graphai.api.text.schemas", "graphai.api.translation", "graphai.api.translation.router", "graphai.api.translation.schemas", "graphai.api.video", "graphai.api.video.router", "graphai.api.video.schemas", "graphai.api.voice", "graphai.api.voice.router", "graphai.api.voice.schemas", "graphai.celery", "graphai.celery.common", "graphai.celery.common.celery_config", "graphai.celery.common.celery_tools", "graphai.celery.common.jobs", "graphai.celery.common.log", "graphai.celery.common.tasks", "graphai.celery.embedding", "graphai.celery.embedding.jobs", "graphai.celery.embedding.tasks", "graphai.celery.image", "graphai.celery.image.jobs", "graphai.celery.image.tasks", "graphai.celery.ontology", "graphai.celery.ontology.jobs", "graphai.celery.ontology.tasks", "graphai.celery.retrieval", "graphai.celery.retrieval.jobs", "graphai.celery.retrieval.tasks", "graphai.celery.scraping", "graphai.celery.scraping.jobs", "graphai.celery.scraping.tasks", "graphai.celery.text", "graphai.celery.text.jobs", "graphai.celery.text.tasks", "graphai.celery.translation", "graphai.celery.translation.jobs", "graphai.celery.translation.tasks", "graphai.celery.video", "graphai.celery.video.jobs", "graphai.celery.video.tasks", "graphai.celery.voice", "graphai.celery.voice.jobs", "graphai.celery.voice.tasks", "graphai.core", "graphai.core.common", "graphai.core.common.caching", "graphai.core.common.common_utils", "graphai.core.common.config", "graphai.core.common.fingerprinting", "graphai.core.common.lookup", "graphai.core.common.multimedia_utils", "graphai.core.embedding", "graphai.core.embedding.embedding", "graphai.core.image", "graphai.core.image.image", "graphai.core.image.ocr", "graphai.core.ontology", "graphai.core.ontology.clustering", "graphai.core.ontology.data", "graphai.core.ontology.ontology", "graphai.core.ontology.openalex", "graphai.core.retrieval", "graphai.core.retrieval.anonymization", "graphai.core.retrieval.retrieval_settings", "graphai.core.retrieval.retrieval_utils", "graphai.core.scraping", "graphai.core.scraping.scraping", "graphai.core.text", "graphai.core.text.draw", "graphai.core.text.embeddings", "graphai.core.text.exercises", "graphai.core.text.graph", "graphai.core.text.keywords", "graphai.core.text.scores", "graphai.core.text.wikisearch", "graphai.core.translation", "graphai.core.translation.text_utils", "graphai.core.translation.translation", "graphai.core.utils", "graphai.core.utils.breadcrumb", "graphai.core.utils.progress_bar", "graphai.core.utils.text", "graphai.core.utils.text.clean", "graphai.core.utils.text.io", "graphai.core.utils.time", "graphai.core.utils.time.date", "graphai.core.utils.time.stopwatch", "graphai.core.video", "graphai.core.video.video", "graphai.core.video.video_utils", "graphai.core.voice", "graphai.core.voice.transcribe", "graphai.definitions", "graphai.pipelines", "graphai.pipelines.investment", "graphai.pipelines.investment.aggregate_recent_past", "graphai.pipelines.investment.check_unit", "graphai.pipelines.investment.compute_fundraisers_units", "graphai.pipelines.investment.compute_investors_units", "graphai.pipelines.investment.compute_investors_units_2", "graphai.pipelines.investment.compute_jaccard_index", "graphai.pipelines.investment.concept_configuration", "graphai.pipelines.investment.create_investments_graph", "graphai.pipelines.investment.detect_fundraisers_concepts", "graphai.pipelines.investment.main", "graphai.pipelines.investment.parameters", "graphai.pipelines.investment.toy_example", "graphai.pipelines.validation", "graphai.pipelines.validation.1_old", "graphai.pipelines.validation.2_new", "graphai.pipelines.validation.3_slides", "graphai.pipelines.visualisation", "graphai.pipelines.visualisation.startups-graph", "graphai.pipelines.visualisation.startups-graph-2", "graphai.pipelines.visualisation.startups-graph-3", "graphai.pipelines.visualisation.startups-graph-4"], "filenames": ["graphai.rst", "graphai.api.rst", "graphai.api.auth.rst", "graphai.api.auth.auth_utils.rst", "graphai.api.auth.log.rst", "graphai.api.auth.router.rst", "graphai.api.common.rst", "graphai.api.common.schemas.rst", "graphai.api.common.utils.rst", "graphai.api.embedding.rst", "graphai.api.embedding.router.rst", "graphai.api.embedding.schemas.rst", "graphai.api.image.rst", "graphai.api.image.router.rst", "graphai.api.image.schemas.rst", "graphai.api.main.rst", "graphai.api.main.main.rst", "graphai.api.ontology.rst", "graphai.api.ontology.router.rst", "graphai.api.ontology.schemas.rst", "graphai.api.retrieval.rst", "graphai.api.retrieval.router.rst", "graphai.api.retrieval.schemas.rst", "graphai.api.scraping.rst", "graphai.api.scraping.router.rst", "graphai.api.scraping.schemas.rst", "graphai.api.text.rst", "graphai.api.text.router.rst", "graphai.api.text.schemas.rst", "graphai.api.translation.rst", "graphai.api.translation.router.rst", "graphai.api.translation.schemas.rst", "graphai.api.video.rst", "graphai.api.video.router.rst", "graphai.api.video.schemas.rst", "graphai.api.voice.rst", "graphai.api.voice.router.rst", "graphai.api.voice.schemas.rst", "graphai.celery.rst", "graphai.celery.common.rst", "graphai.celery.common.celery_config.rst", "graphai.celery.common.celery_tools.rst", "graphai.celery.common.jobs.rst", "graphai.celery.common.log.rst", "graphai.celery.common.tasks.rst", "graphai.celery.embedding.rst", "graphai.celery.embedding.jobs.rst", "graphai.celery.embedding.tasks.rst", "graphai.celery.image.rst", "graphai.celery.image.jobs.rst", "graphai.celery.image.tasks.rst", "graphai.celery.ontology.rst", "graphai.celery.ontology.jobs.rst", "graphai.celery.ontology.tasks.rst", "graphai.celery.retrieval.rst", "graphai.celery.retrieval.jobs.rst", "graphai.celery.retrieval.tasks.rst", "graphai.celery.scraping.rst", "graphai.celery.scraping.jobs.rst", "graphai.celery.scraping.tasks.rst", "graphai.celery.text.rst", "graphai.celery.text.jobs.rst", "graphai.celery.text.tasks.rst", "graphai.celery.translation.rst", "graphai.celery.translation.jobs.rst", "graphai.celery.translation.tasks.rst", "graphai.celery.video.rst", "graphai.celery.video.jobs.rst", "graphai.celery.video.tasks.rst", "graphai.celery.voice.rst", "graphai.celery.voice.jobs.rst", "graphai.celery.voice.tasks.rst", "graphai.core.rst", "graphai.core.common.rst", "graphai.core.common.caching.rst", "graphai.core.common.common_utils.rst", "graphai.core.common.config.rst", "graphai.core.common.fingerprinting.rst", "graphai.core.common.lookup.rst", "graphai.core.common.multimedia_utils.rst", "graphai.core.embedding.rst", "graphai.core.embedding.embedding.rst", "graphai.core.image.rst", "graphai.core.image.image.rst", "graphai.core.image.ocr.rst", "graphai.core.ontology.rst", "graphai.core.ontology.clustering.rst", "graphai.core.ontology.data.rst", "graphai.core.ontology.ontology.rst", "graphai.core.ontology.openalex.rst", "graphai.core.retrieval.rst", "graphai.core.retrieval.anonymization.rst", "graphai.core.retrieval.retrieval_settings.rst", "graphai.core.retrieval.retrieval_utils.rst", "graphai.core.scraping.rst", "graphai.core.scraping.scraping.rst", "graphai.core.text.rst", "graphai.core.text.draw.rst", "graphai.core.text.embeddings.rst", "graphai.core.text.exercises.rst", "graphai.core.text.graph.rst", "graphai.core.text.keywords.rst", "graphai.core.text.scores.rst", "graphai.core.text.wikisearch.rst", "graphai.core.translation.rst", "graphai.core.translation.text_utils.rst", "graphai.core.translation.translation.rst", "graphai.core.utils.rst", "graphai.core.utils.breadcrumb.rst", "graphai.core.utils.progress_bar.rst", "graphai.core.utils.text.rst", "graphai.core.utils.text.clean.rst", "graphai.core.utils.text.io.rst", "graphai.core.utils.time.rst", "graphai.core.utils.time.date.rst", "graphai.core.utils.time.stopwatch.rst", "graphai.core.video.rst", "graphai.core.video.video.rst", "graphai.core.video.video_utils.rst", "graphai.core.voice.rst", "graphai.core.voice.transcribe.rst", "graphai.definitions.rst", "graphai.pipelines.rst", "graphai.pipelines.investment.rst", "graphai.pipelines.investment.aggregate_recent_past.rst", "graphai.pipelines.investment.check_unit.rst", "graphai.pipelines.investment.compute_fundraisers_units.rst", "graphai.pipelines.investment.compute_investors_units.rst", "graphai.pipelines.investment.compute_investors_units_2.rst", "graphai.pipelines.investment.compute_jaccard_index.rst", "graphai.pipelines.investment.concept_configuration.rst", "graphai.pipelines.investment.create_investments_graph.rst", "graphai.pipelines.investment.detect_fundraisers_concepts.rst", "graphai.pipelines.investment.main.rst", "graphai.pipelines.investment.parameters.rst", "graphai.pipelines.investment.toy_example.rst", "graphai.pipelines.validation.rst", "graphai.pipelines.validation.1_old.rst", "graphai.pipelines.validation.2_new.rst", "graphai.pipelines.validation.3_slides.rst", "graphai.pipelines.visualisation.rst", "graphai.pipelines.visualisation.startups-graph.rst", "graphai.pipelines.visualisation.startups-graph-2.rst", "graphai.pipelines.visualisation.startups-graph-3.rst", "graphai.pipelines.visualisation.startups-graph-4.rst"], "titles": ["graphai package", "graphai.api package", "graphai.api.auth package", "graphai.api.auth.auth_utils module", "graphai.api.auth.log module", "graphai.api.auth.router module", "graphai.api.common package", "graphai.api.common.schemas module", "graphai.api.common.utils module", "graphai.api.embedding package", "graphai.api.embedding.router module", "graphai.api.embedding.schemas module", "graphai.api.image package", "graphai.api.image.router module", "graphai.api.image.schemas module", "graphai.api.main package", "graphai.api.main.main module", "graphai.api.ontology package", "graphai.api.ontology.router module", "graphai.api.ontology.schemas module", "graphai.api.retrieval package", "graphai.api.retrieval.router module", "graphai.api.retrieval.schemas module", "graphai.api.scraping package", "graphai.api.scraping.router module", "graphai.api.scraping.schemas module", "graphai.api.text package", "graphai.api.text.router module", "graphai.api.text.schemas module", "graphai.api.translation package", "graphai.api.translation.router module", "graphai.api.translation.schemas module", "graphai.api.video package", "graphai.api.video.router module", "graphai.api.video.schemas module", "graphai.api.voice package", "graphai.api.voice.router module", "graphai.api.voice.schemas module", "graphai.celery package", "graphai.celery.common package", "graphai.celery.common.celery_config module", "graphai.celery.common.celery_tools module", "graphai.celery.common.jobs module", "graphai.celery.common.log module", "graphai.celery.common.tasks module", "graphai.celery.embedding package", "graphai.celery.embedding.jobs module", "graphai.celery.embedding.tasks module", "graphai.celery.image package", "graphai.celery.image.jobs module", "graphai.celery.image.tasks module", "graphai.celery.ontology package", "graphai.celery.ontology.jobs module", "graphai.celery.ontology.tasks module", "graphai.celery.retrieval package", "graphai.celery.retrieval.jobs module", "graphai.celery.retrieval.tasks module", "graphai.celery.scraping package", "graphai.celery.scraping.jobs module", "graphai.celery.scraping.tasks module", "graphai.celery.text package", "graphai.celery.text.jobs module", "graphai.celery.text.tasks module", "graphai.celery.translation package", "graphai.celery.translation.jobs module", "graphai.celery.translation.tasks module", "graphai.celery.video package", "graphai.celery.video.jobs module", "graphai.celery.video.tasks module", "graphai.celery.voice package", "graphai.celery.voice.jobs module", "graphai.celery.voice.tasks module", "graphai.core package", "graphai.core.common package", "graphai.core.common.caching module", "graphai.core.common.common_utils module", "graphai.core.common.config module", "graphai.core.common.fingerprinting module", "graphai.core.common.lookup module", "graphai.core.common.multimedia_utils module", "graphai.core.embedding package", "graphai.core.embedding.embedding module", "graphai.core.image package", "graphai.core.image.image module", "graphai.core.image.ocr module", "graphai.core.ontology package", "graphai.core.ontology.clustering module", "graphai.core.ontology.data module", "graphai.core.ontology.ontology module", "graphai.core.ontology.openalex module", "graphai.core.retrieval package", "graphai.core.retrieval.anonymization module", "graphai.core.retrieval.retrieval_settings module", "graphai.core.retrieval.retrieval_utils module", "graphai.core.scraping package", "graphai.core.scraping.scraping module", "graphai.core.text package", "graphai.core.text.draw module", "graphai.core.text.embeddings module", "graphai.core.text.exercises module", "graphai.core.text.graph module", "graphai.core.text.keywords module", "graphai.core.text.scores module", "graphai.core.text.wikisearch module", "graphai.core.translation package", "graphai.core.translation.text_utils module", "graphai.core.translation.translation module", "graphai.core.utils package", "graphai.core.utils.breadcrumb module", "graphai.core.utils.progress_bar module", "graphai.core.utils.text package", "graphai.core.utils.text.clean module", "graphai.core.utils.text.io module", "graphai.core.utils.time package", "graphai.core.utils.time.date module", "graphai.core.utils.time.stopwatch module", "graphai.core.video package", "graphai.core.video.video module", "graphai.core.video.video_utils module", "graphai.core.voice package", "graphai.core.voice.transcribe module", "graphai.definitions module", "graphai.pipelines package", "graphai.pipelines.investment package", "graphai.pipelines.investment.aggregate_recent_past module", "graphai.pipelines.investment.check_unit module", "graphai.pipelines.investment.compute_fundraisers_units module", "graphai.pipelines.investment.compute_investors_units module", "graphai.pipelines.investment.compute_investors_units_2 module", "graphai.pipelines.investment.compute_jaccard_index module", "graphai.pipelines.investment.concept_configuration module", "graphai.pipelines.investment.create_investments_graph module", "graphai.pipelines.investment.detect_fundraisers_concepts module", "graphai.pipelines.investment.main module", "graphai.pipelines.investment.parameters module", "graphai.pipelines.investment.toy_example module", "graphai.pipelines.validation package", "graphai.pipelines.validation.1_old module", "graphai.pipelines.validation.2_new module", "graphai.pipelines.validation.3_slides module", "graphai.pipelines.visualisation package", "graphai.pipelines.visualisation.startups-graph module", "graphai.pipelines.visualisation.startups-graph-2 module", "graphai.pipelines.visualisation.startups-graph-3 module", "graphai.pipelines.visualisation.startups-graph-4 module"], "terms": {"The": [0, 42, 74, 75, 77, 78, 81, 86, 87, 95, 96, 97, 102, 103, 105, 109, 115, 118, 120, 130], "contain": [0, 28, 40, 75, 78, 84, 86, 87, 95, 96, 100, 101, 103, 120, 130], "tool": 0, "servic": 0, "enhanc": 0, "epfl": 0, "graph": [0, 27, 86, 87, 96, 97, 102, 130, 140], "project": 0, "ai": 0, "base": [0, 3, 4, 7, 11, 14, 19, 22, 25, 27, 28, 31, 34, 37, 40, 74, 81, 84, 85, 86, 87, 91, 95, 96, 98, 100, 102, 103, 105, 108, 109, 111, 112, 115, 118, 120, 130, 135], "util": [0, 6, 72], "api": [0, 84, 96, 99, 103], "celeri": [0, 8], "core": 0, "pipelin": 0, "definit": [0, 130], "modul": [0, 2, 6, 9, 12, 15, 17, 20, 23, 26, 29, 32, 35, 39, 45, 48, 51, 54, 57, 60, 63, 66, 69, 73, 80, 82, 85, 90, 94, 96, 104, 107, 110, 113, 116, 119, 123, 136, 140], "auth": 1, "common": [1, 38, 72], "embed": [1, 27, 38, 72, 86, 93, 96], "imag": [1, 38, 72, 77, 78, 79, 118], "main": [1, 87, 123, 125], "ontologi": [1, 7, 27, 38, 72, 96, 97, 100, 102], "retriev": [1, 27, 38, 72, 74, 75, 78, 95, 96, 103, 115, 118], "scrape": [1, 38, 72], "text": [1, 11, 14, 22, 31, 38, 46, 55, 64, 72, 75, 77, 78, 79, 81, 84, 91, 93, 95, 105, 106, 107, 118, 120], "translat": [1, 38, 72, 78, 101, 120], "video": [1, 38, 72, 77, 78, 120], "voic": [1, 38, 72], "auth_util": 2, "log": [2, 19, 39, 85, 87, 108, 112], "router": [2, 9, 12, 17, 20, 23, 26, 29, 32, 35], "get_ratelimit_valu": 3, "class": [3, 4, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37, 40, 74, 81, 84, 85, 87, 91, 96, 98, 100, 105, 108, 109, 111, 112, 115, 118, 120], "token": [3, 5, 7, 14, 25, 34, 37, 42, 46, 49, 58, 64, 67, 70, 74, 75, 77, 78, 79, 81, 83, 95, 101, 105, 106, 117, 118, 120], "access_token": 3, "str": [3, 4, 5, 7, 11, 14, 18, 19, 22, 25, 27, 28, 31, 34, 37, 96, 101, 103, 111, 112, 115, 130], "token_typ": 3, "basemodel": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37], "model_config": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37], "classvar": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37], "configdict": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37], "configur": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37, 130], "model": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37, 81, 86, 105, 118, 120], "should": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37, 74, 112], "dictionari": [3, 7, 8, 11, 14, 19, 22, 25, 28, 31, 34, 37, 75, 78, 85, 86, 87, 95, 103, 105, 112, 120], "conform": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37], "pydant": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37], "config": [3, 7, 11, 14, 19, 22, 25, 28, 31, 34, 37, 73], "tokendata": 3, "usernam": 3, "none": [3, 4, 5, 7, 11, 14, 19, 22, 25, 27, 28, 31, 34, 37, 40, 42, 43, 49, 55, 67, 70, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 89, 93, 95, 105, 108, 109, 112, 117, 118, 120, 130, 131], "scope": 3, "list": [3, 11, 14, 18, 19, 22, 25, 27, 28, 31, 34, 74, 77, 78, 81, 85, 86, 87, 95, 96, 101, 103, 118, 130], "user": [3, 5, 21], "email": [3, 111], "full_nam": 3, "disabl": 3, "bool": [3, 7, 11, 14, 19, 22, 25, 27, 28, 31, 34, 37, 96, 100, 101, 102, 112, 130], "userindb": 3, "hashed_password": 3, "generate_random_password_str": 3, "length": [3, 28, 43, 77, 95, 120], "32": [3, 95], "verify_password": 3, "plain_password": 3, "get_password_hash": 3, "password": 3, "get_us": 3, "get_user_ratelimit_overrid": 3, "path": [3, 5, 74, 75, 77, 79, 84, 118, 120, 135], "authenticate_us": 3, "async": [3, 4, 5, 10, 13, 16, 18, 21, 24, 27, 30, 33, 36], "extract_username_and_scop": 3, "extract_username_sync": 3, "has_rag_access_right": 3, "index_nam": [3, 93], "check": [3, 75, 87, 95], "see": [3, 79], "given": [3, 40, 74, 75, 77, 85, 86, 87, 95, 96, 97, 101, 103, 111, 112, 114, 118, 120, 130], "ha": [3, 16, 81, 130], "access": [3, 95], "index": [3, 22, 78, 85, 86, 87, 95, 118, 130], "rag": 3, "retreiv": 3, "endpoint": [3, 7, 19], "param": [3, 8, 40, 42, 74, 75, 77, 78, 79, 81, 84, 85, 86, 87, 95, 105, 118, 120, 124, 126, 127, 128, 129, 131, 132], "name": [3, 8, 14, 19, 40, 74, 86, 112, 118], "return": [3, 8, 27, 40, 42, 74, 75, 77, 78, 79, 81, 84, 85, 86, 87, 95, 96, 97, 100, 101, 102, 103, 105, 111, 112, 114, 115, 118, 120, 130], "true": [3, 14, 27, 28, 34, 42, 46, 49, 64, 75, 77, 78, 81, 84, 85, 86, 87, 95, 96, 100, 101, 102, 105, 108, 112, 115, 117, 118, 130], "i": [3, 16, 27, 74, 75, 77, 78, 81, 83, 84, 85, 86, 87, 95, 96, 97, 101, 102, 103, 109, 115, 117, 118, 120, 130], "grant": 3, "manag": [3, 74], "tabl": [3, 85, 87, 134], "been": 3, "set": [3, 27, 28, 40, 75, 81, 96, 97, 103, 130], "up": [3, 42, 87, 96, 97], "fals": [3, 7, 11, 14, 19, 22, 25, 27, 31, 34, 37, 42, 43, 46, 49, 52, 55, 58, 64, 67, 70, 74, 75, 78, 81, 83, 84, 85, 86, 87, 88, 93, 95, 96, 101, 102, 105, 106, 112, 115, 117, 118, 120, 130], "otherwis": [3, 75, 81, 84, 96, 101, 118, 120, 130], "get_user_ag": 4, "request": [4, 16, 27, 86, 95, 96, 99], "log_request": 4, "request_data": 4, "dict": [4, 5, 19, 22, 25, 34, 74, 78, 86, 95, 105, 112, 118, 120], "loggermiddlewar": 4, "app": [4, 16, 40], "callabl": 4, "mutablemap": 4, "ani": [4, 27, 37, 96, 101, 102, 130], "await": 4, "basehttpmiddlewar": 4, "dispatch": 4, "call_next": 4, "respons": 4, "create_access_token": 5, "data": [5, 10, 13, 18, 21, 24, 25, 27, 30, 33, 36, 61, 78, 85, 86, 95, 96, 98, 99, 112], "expires_delta": 5, "timedelta": 5, "get_current_us": 5, "security_scop": 5, "securityscop": 5, "get_current_active_us": 5, "current_us": [5, 21], "get_active_user_dummi": 5, "get_user_for_rate_limit": 5, "header": [5, 58, 95], "login_for_access_token": 5, "form_data": 5, "oauth2passwordrequestform": 5, "read_users_m": 5, "schema": [6, 9, 12, 17, 20, 23, 26, 29, 32, 35], "taskidrespons": 7, "task_id": [7, 10, 11, 13, 14, 18, 19, 24, 25, 30, 31, 33, 34, 36, 37, 40], "object": [7, 16, 19, 28, 40, 74, 78, 81, 84, 85, 87, 91, 96, 97, 98, 100, 102, 105, 108, 109, 112, 114, 115, 118, 120], "repres": [7, 19, 27, 28, 87, 101, 109, 115], "output": [7, 8, 19, 75, 118, 120], "tree": [7, 18, 19, 86, 118], "taskstatusrespons": [7, 11, 14, 19, 25, 31, 34, 37], "task_nam": [7, 11, 14, 19, 25, 31, 34, 37], "task_statu": [7, 11, 14, 19, 25, 31, 34, 37], "task_result": [7, 11, 14, 19, 25, 31, 34, 37, 40], "abc": [7, 84], "filerequest": [7, 33], "tokenstatu": [7, 14, 34], "activ": [7, 34], "fingerprint": [7, 34, 73, 74, 78], "format_api_result": 8, "id": [8, 14, 19, 40, 42, 74, 85, 86, 87, 95], "statu": [8, 40, 95], "result": [8, 11, 14, 19, 22, 27, 28, 31, 34, 37, 40, 42, 61, 77, 78, 79, 81, 83, 84, 86, 87, 95, 96, 97, 98, 100, 102, 103, 106, 117, 118, 120, 130], "format": [8, 75, 114, 118], "come": 8, "from": [8, 27, 28, 74, 75, 77, 78, 86, 95, 96, 100, 101, 102, 111, 118, 130], "task": [8, 39, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 78, 109, 115], "appropri": [8, 74], "calculate_embedding_text_fingerprint": 10, "embeddingfingerprintrequest": [10, 11], "calculate_embedding_text_fingerprint_statu": 10, "embed_text": [10, 81], "embeddingrequest": [10, 11], "embed_text_statu": 10, "embeddingrequestbas": 11, "model_typ": [11, 14, 46, 49, 81, 83, 84], "liter": [11, 14, 19, 22, 28, 31, 34], "all": [11, 27, 77, 81, 86, 95, 96, 101, 102, 115, 118, 130], "minilm": [11, 81], "l12": [11, 81], "v2": [11, 81, 118], "solon": 11, "larg": 11, "0": [11, 19, 27, 28, 34, 75, 77, 81, 87, 95, 96, 97, 100, 102, 103, 105, 112, 114, 115, 117, 118, 120, 124, 130], "1": [11, 19, 27, 28, 75, 77, 85, 87, 95, 96, 102, 103, 105, 114, 115, 118, 130], "forc": [11, 14, 25, 31, 34, 37, 46, 49, 58, 64, 67, 70, 74, 78, 81, 83, 106, 117, 120], "no_cach": [11, 14, 31, 46, 49, 64], "embeddingtaskrespons": 11, "text_too_larg": [11, 31], "success": [11, 14, 19, 22, 25, 31, 34, 37, 74, 75, 118, 120], "fresh": [11, 14, 25, 31, 34, 37], "devic": [11, 31], "embeddingrespons": 11, "retrieve_image_fil": 13, "retrieveimageurlrequest": [13, 14], "upload_image_fil": 13, "uploadimagerequest": [13, 14], "get_retrieve_image_file_statu": 13, "calculate_slide_fingerprint": 13, "imagefingerprintrequest": [13, 14], "calculate_slide_fingerprint_statu": 13, "extract_text": 13, "extracttextrequest": [13, 14], "extract_text_statu": 13, "detect_ocr_language_statu": 13, "url": [14, 25, 34, 49, 58, 67, 75, 83, 95, 111, 117, 118], "uploadedfileorigininfo": 14, "content": [14, 28, 49, 74, 75, 83, 84, 95, 112, 118], "file_extens": [14, 49, 83], "bmp": 14, "png": 14, "jpg": 14, "jpeg": 14, "pdf": [14, 84], "origin": [14, 49, 74, 78, 83, 86, 87, 95, 96, 100, 118], "gdrive": 14, "localdisk": 14, "origin_info": [14, 49, 83], "retrieveimageurlresponseinn": 14, "token_statu": [14, 34], "token_s": [14, 34], "int": [14, 19, 22, 27, 28, 34, 96, 97, 103, 109, 112], "error": 14, "retrieveimageurlrespons": 14, "imagefingerprinttaskrespons": 14, "closest_token": [14, 34, 37], "closest_token_origin": [14, 37], "imagefingerprintrespons": 14, "method": [14, 27, 49, 61, 83, 84, 85, 86, 87, 96, 103, 130], "googl": [14, 49, 83, 84], "tesseract": [14, 79, 84, 118], "openai": 14, "gemini": 14, "google_api_token": 14, "openai_api_token": 14, "gemini_api_token": 14, "pdf_in_pag": [14, 49], "individualocrresult": 14, "extracttexttaskrespons": 14, "languag": [14, 31, 34, 37, 67, 79, 84, 105, 117, 118, 120], "extracttextrespons": 14, "detectocrlanguagetaskrespons": 14, "detectocrlanguagerespons": 14, "lifespan": 16, "fastapi": 16, "thi": [16, 27, 74, 77, 78, 86, 109, 130], "function": [16, 42, 75, 77, 115, 118, 130], "three": [16, 77, 120], "part": 16, "befor": [16, 115, 130], "startup": [16, 140], "logic": 16, "execut": [16, 109, 115], "right": [16, 28], "start": [16, 85, 87, 95, 96, 103, 120], "here": 16, "we": [16, 118], "might": 16, "want": 16, "load": [16, 74, 81, 85, 87, 105, 118, 120], "big": [16, 112], "memori": [16, 120], "etc": [16, 86, 96, 101], "yield": 16, "standard": [16, 95], "wai": 16, "pass": [16, 27, 81], "so": [16, 77, 95, 118], "can": [16, 27, 77, 78, 96, 103, 115, 120], "normal": [16, 86, 111], "boot": 16, "serv": 16, "after": [16, 27, 86, 96, 101, 102], "shutdown": 16, "shut": 16, "down": 16, "free": 16, "some": [16, 27, 96, 102, 109, 115, 130], "do": 16, "cleanup": 16, "redirect_doc": 16, "cat_info": 18, "category_id": [18, 19, 52, 85, 87, 89], "cluster_info": 18, "cluster_id": [18, 19, 52, 85, 87, 88], "concept_info": 18, "concept_id": [18, 28, 52, 85, 87, 88, 96, 97, 98, 100, 102, 103], "openalex_category_nearest_top": 18, "openalex_topic_nearest_categori": 18, "topic_id": [18, 19, 52, 85, 89], "recompute_clust": [18, 85, 88], "recomputeclustersrequest": [18, 19], "recompute_clusters_statu": 18, "compute_graph_dist": 18, "graphdistancerequest": [18, 19], "compute_graph_concept_nearest_categori": 18, "graphconceptnearestcategoryrequest": [18, 19], "compute_graph_cluster_nearest_categori": 18, "graphclusternearestcategoryrequest": [18, 19], "compute_graph_nearest_concept": 18, "graphnearestconceptrequest": [18, 19], "break_up_clust": [18, 85, 88], "breakupclusterrequest": [18, 19], "treeresponseelem": 19, "child_id": [19, 85, 87], "parent_id": [19, 85, 87], "treerespons": 19, "child_to_par": 19, "categoryinforespons": 19, "depth": [19, 85, 87], "conceptdetail": 19, "categorydetailsrespons": 19, "info": [19, 40], "parent_categori": 19, "child_categori": 19, "cluster": [19, 85, 87, 103], "concept": [19, 27, 85, 86, 87, 96, 97, 98, 100, 102, 103, 125, 130], "clusterdetailsrespons": 19, "parent": [19, 85, 87], "conceptdetailssinglerespons": 19, "parent_clust": 19, "branch": 19, "openalexcategorynearesttopicsresponseelem": 19, "category_nam": 19, "topic_nam": 19, "embedding_scor": 19, "float": [19, 27, 28, 34, 37, 96, 97, 101, 102, 115, 130], "wikipedia_scor": 19, "score": [19, 27, 28, 77, 85, 86, 87, 96, 97, 100, 101, 103, 105, 120, 130], "openalextopicnearestcategoriesresponseelem": 19, "alia": 19, "n_cluster": [19, 52, 85, 86, 88], "2200": 19, "min_n": [19, 52, 85, 86, 88], "oneconceptresponseel": 19, "recomputeclusterstaskrespons": 19, "category_assign": 19, "impurity_count": 19, "impurity_proport": 19, "recomputeclustersrespons": 19, "2": [19, 27, 28, 77, 85, 87, 96, 103, 105, 115, 118, 130, 140], "breakupclustersclusternumberrespons": 19, "breakupclustersrespons": 19, "src": [19, 52, 64, 105, 106], "src_type": [19, 52], "categori": [19, 85, 87, 96, 97], "tgt": [19, 52, 64, 105, 106], "tgt_type": [19, 52], "avg": [19, 52, 85, 87, 88], "linear": [19, 85, 87], "coeff": [19, 52, 85, 87, 88], "tupl": [19, 95, 96, 101, 103, 130], "graphdistancerespons": 19, "sim": 19, "graphnearestcategoryrequest": 19, "adapt": 19, "10": [19, 22, 27, 55, 85, 87, 93, 96, 101, 103, 130], "top_n": [19, 52, 85, 87, 88], "top_down_search": 19, "use_embed": [19, 52, 85, 88], "return_clust": [19, 52, 85, 87, 88], "3": [19, 27, 28, 85, 86, 87, 96, 97, 103, 115, 140], "nearestclusterel": 19, "rank": 19, "nearestcategoryel": 19, "nearestcategoryelementwithclust": 19, "embeddingenablednearestentityrespons": 19, "embeddings_us": 19, "graphconceptnearestcategoryrespons": 19, "valid": [19, 95, 122], "existing_label": 19, "graphclusternearestcategoryrespons": 19, "graphnearestconceptrespons": 19, "closest": [19, 77, 78, 85, 87], "retrieve_from_es_index": 21, "retrievalrequest": [21, 22], "retrieve_endpoint_info": 21, "chunk_text": [21, 93], "chunkrequest": [21, 22], "anonymize_text": [21, 91], "anonymizerequest": [21, 22], "filter": [22, 27, 55, 93, 96, 97, 101, 102], "limit": [22, 55, 93, 103], "return_scor": [22, 55, 93, 101], "filter_by_d": [22, 55, 93], "retrievalrespons": 22, "n_result": 22, "retrievalindextyp": 22, "retrievalinforespons": 22, "chunk_siz": [22, 55, 93], "400": [22, 93], "chunk_overlap": [22, 55, 93], "100": [22, 93, 109], "one_chunk_per_pag": [22, 55, 93], "one_chunk_per_doc": [22, 55, 93], "chunkrespons": 22, "split": [22, 101], "full": [22, 42, 74, 75, 77, 79, 84, 86, 118, 120], "lang": [22, 55, 70, 78, 91, 105, 118], "en": [22, 31, 34, 105, 118, 120], "fr": [22, 31, 34, 105], "anonymizerespons": 22, "extract_sublink": 24, "getsublinksrequest": [24, 25], "extract_sublinks_statu": 24, "extract_page_cont": 24, "extractcontentrequest": [24, 25], "extract_page_content_statu": 24, "getsublinkstaskrespons": 25, "validated_url": [25, 95], "sublink": [25, 95], "status_msg": 25, "getsublinksrespons": 25, "remove_head": [25, 95], "remove_long_pattern": [25, 95], "extractcontenttaskrespons": 25, "extractcontentrespons": 25, "keyword": [27, 28, 61, 96, 100, 102, 103], "keywordsrequest": [27, 28], "use_nltk": [27, 61, 96, 101], "process": [27, 95, 96, 103], "raw": [27, 28, 111], "e": [27, 86, 95, 96, 102, 103, 118, 120], "g": [27, 86, 87, 96, 103, 120], "an": [27, 28, 74, 77, 79, 81, 86, 87, 96, 99, 105, 112, 118, 120], "abstract": [27, 84], "public": 27, "cours": 27, "descript": [27, 28], "lectur": [27, 28], "slide": [27, 118], "wikifi": [27, 28, 96, 97], "wikifyfromrawtextrequest": [27, 28], "wikifyfromkeywordsrequest": [27, 28], "restrict_to_ontologi": [27, 61, 96, 102], "score_smooth": [27, 61, 96, 102], "aggregation_coef": [27, 61, 96, 102], "5": [27, 28, 34, 85, 87, 96, 100, 102, 115, 117, 118, 120], "filtering_threshold": [27, 61, 96, 102], "15": [27, 70, 96, 102], "refresh_scor": [27, 61, 96, 102], "wikipedia": [27, 28, 87, 96, 103], "page": [27, 28, 84, 85, 87, 95, 96, 102, 103], "ar": [27, 42, 75, 77, 85, 87, 95, 96, 97, 101, 102, 114, 118, 130], "relev": [27, 28, 78, 96, 103], "each": [27, 28, 75, 85, 86, 87, 95, 96, 102, 103, 109, 115, 130], "quantifi": 27, "done": [27, 78], "follow": [27, 74, 109, 115, 118, 130], "extract": [27, 28, 79, 84, 95, 96, 101, 118, 120], "automat": [27, 74, 120], "omit": 27, "string": [27, 74, 75, 77, 79, 81, 84, 95, 101, 105, 118], "provid": [27, 40, 79, 85, 86, 87, 95, 96, 100, 105, 118], "input": [27, 28, 77, 79, 84, 95, 118, 120], "under": 27, "instead": [27, 42, 74], "raw_text": [27, 28, 61], "wikisearch": [27, 96, 102], "For": [27, 77, 130], "most": [27, 77], "through": [27, 85, 87, 118], "elasticsearch": [27, 96, 103], "pair": [27, 87, 101, 115, 130], "sever": [27, 28, 96, 102, 115], "deriv": [27, 87], "take": [27, 87, 96, 102, 130], "account": 27, "vector": [27, 86, 98], "among": [27, 78], "other": [27, 87, 96, 102, 103, 115], "aggreg": [27, 78, 86, 96, 102], "accord": [27, 86, 95, 130], "rule": 27, "keep": [27, 87, 102, 109], "onli": [27, 78, 87, 96, 103, 112, 118, 130], "argument": 27, "have": [27, 81, 130], "more": [27, 96, 101, 102, 109, 115], "precis": 27, "control": [27, 96, 102, 130], "It": [27, 28, 96, 101, 103, 130], "either": [27, 96, 103], "us": [27, 74, 75, 78, 79, 81, 84, 85, 86, 87, 95, 96, 101, 102, 103, 115, 118, 120, 130], "one": [27, 77, 86, 87, 96, 101, 103, 109, 115, 130], "default": [27, 40, 74, 81, 86, 95, 96, 97, 100, 101, 102, 103, 115, 118], "whether": [27, 74, 75, 77, 84, 85, 86, 87, 95, 96, 100, 101, 102, 115, 118, 120, 130], "appli": [27, 96, 100, 102], "transform": [27, 81, 86, 96, 100, 102], "distribut": [27, 96, 102], "them": [27, 77, 95, 96, 102], "evenli": [27, 96, 102], "A": [27, 87, 96, 97, 100, 101, 102, 103, 120], "number": [27, 75, 78, 84, 85, 86, 87, 95, 96, 102, 103, 109, 112, 118, 130], "how": [27, 86, 95, 96, 101, 102, 105], "comput": [27, 77, 78, 86, 96, 98, 100, 102, 118, 130], "valu": [27, 74, 75, 77, 87, 95, 96, 98, 102, 118, 130], "sum": [27, 28, 86, 96, 102], "over": [27, 96, 102, 130], "normalis": [27, 96, 101, 102, 130], "max": [27, 96, 102], "between": [27, 74, 77, 85, 86, 87, 102, 114, 115, 118, 130], "linearli": [27, 102, 114], "interpol": [27, 102], "those": [27, 77, 87, 102], "two": [27, 77, 78, 84, 85, 87, 95, 102, 118], "approach": [27, 102], "threshold": [27, 74, 78, 96, 97, 101, 102, 118, 120], "decid": [27, 96, 102], "good": [27, 96, 102], "enough": [27, 81, 96, 102], "": [27, 74, 75, 77, 79, 81, 84, 95, 96, 102, 105], "perspect": [27, 96, 102], "recomput": [27, 96, 102], "wikify_ontology_svg": [27, 61], "wikifyresponseelem": [27, 28], "level": [27, 61, 86, 96, 97], "svg": [27, 96, 97], "file": [27, 74, 75, 77, 79, 84, 96, 97, 112, 118, 120], "subgraph": 27, "induc": [27, 87, 96, 97], "wikify_graph_svg": [27, 61], "concept_score_threshold": [27, 61, 96, 97], "edge_threshold": [27, 61, 96, 97], "min_component_s": [27, 61, 96, 97], "generate_exercis": [27, 61, 96, 99], "generatetextexerciserequest": [27, 28], "generatelectureexerciserequest": [27, 28], "make": [27, 84, 87, 96, 99], "chatbot": [27, 96, 99], "gener": [27, 28, 74, 75, 81, 95, 96, 99, 101, 105, 118], "exercis": [27, 28, 96], "concept_nam": [28, 86, 96, 97, 102, 103], "search_scor": [28, 96, 97, 102, 103], "levenshtein_scor": [28, 96, 97], "embedding_local_scor": 28, "embedding_global_scor": 28, "graph_scor": [28, 96, 97, 100], "ontology_local_scor": [28, 96, 97, 100], "ontology_global_scor": [28, 96, 97, 100], "embedding_keywords_scor": 28, "graph_keywords_scor": 28, "ontology_keywords_scor": 28, "mixed_scor": [28, 96, 97, 102], "consist": 28, "which": [28, 74, 78, 87, 95, 96, 97, 101, 103, 118, 120, 130], "measur": 28, "degre": 28, "respect": [28, 87, 114, 130], "json_schema_extra": 28, "exampl": [28, 96, 101, 130], "1196": 28, "angl": 28, "9447807640350212": 28, "936190393844887": 28, "9806112066572416": 28, "7920787642145825": 28, "995049504950495": 28, "974893873592604": 28, "9821428571428572": 28, "12401488": 28, "triangl": 28, "center": 28, "6047569988500392": 28, "18117340257708767": 28, "5498335395955196": 28, "22692356368077668": 28, "30184919393927595": 28, "4680631523928115": 28, "3889476967863415": 28, "6666666666666666": 28, "18009831669894236": 28, "3392857142857143": 28, "13295107": 28, "transvers": 28, "geometri": 28, "7783132229139607": 28, "8541509524253893": 28, "7899500675092881": 28, "8158838242881319": 28, "079490218003065": 28, "2110192540065071": 28, "6477110513680882": 28, "8333333333333333": 28, "8540145985401459": 28, "7178571428571429": 28, "146689": 28, "earth": 28, "radiu": 28, "6191743554865394": 28, "3393292344705985": 28, "6058537722364034": 28, "32094309692256273": 28, "04560562055085982": 28, "5850789404910146": 28, "2747973601576835": 28, "0006414535135995178": 28, "18025826114750698": 28, "2222222222222222": 28, "475": 28, "152547": 28, "bisect": 28, "5829791653941659": 28, "6658021950254382": 28, "5916531383849596": 28, "6072448552560294": 28, "3652836360342975": 28, "2470772552749216": 28, "49403585288280044": 28, "6649784001191716": 28, "27142857142857146": 28, "161243": 28, "nine": 28, "point": [28, 86, 95], "circl": 28, "5954070757052229": 28, "6252501137210749": 28, "6128662674658956": 28, "6809346631686672": 28, "23567484697484573": 28, "3974121105221985": 28, "5454425715474266": 28, "6234172501117234": 28, "5428571428571429": 28, "165487": 28, "world": 28, "line": [28, 74, 77, 86, 112, 120, 130], "5875702591903744": 28, "32915926499040604": 28, "5557247926738698": 28, "35937866385263295": 28, "018301492693509606": 28, "20854298868986648": 28, "35381073854308764": 28, "3324892000595859": 28, "1780815": 28, "6123892146782264": 28, "40341637127911656": 28, "7313486756137682": 28, "43983570252851467": 28, "6785714285714286": 28, "1896705": 28, "oscul": 28, "6001356168702854": 28, "6095596040570643": 28, "15095693713821154": 28, "44197078056376315": 28, "06785714285714284": 28, "1898401": 28, "arc": 28, "6206023872446591": 28, "45726985451624325": 28, "6214735523605726": 28, "5967180832515523": 28, "37885045617052326": 28, "09530697673156802": 28, "429472346018896": 28, "41496111506273836": 28, "6075750180441352": 28, "1975821": 28, "skew": 28, "6071866898797716": 28, "453132323677798": 28, "5926923831317541": 28, "6342079203068262": 28, "1467272460558672": 28, "4842714203388464": 28, "4997033279190881": 28, "4571726500819306": 28, "201359": 28, "squar": [28, 130], "6094673983855882": 28, "6228894106876862": 28, "1853365490872417": 28, "33646712232710085": 28, "4634098506722587": 28, "2035714285714286": 28, "22634860": 28, "segment": [28, 105, 120], "6015345514255728": 28, "44397434138761116": 28, "6289329297461709": 28, "6463107906576082": 28, "5940970321127149": 28, "1325957938789834": 28, "47811753398436485": 28, "250265": 28, "rhumb": 28, "7314235936190492": 28, "5403307788136165": 28, "7146040614704057": 28, "7244902789723203": 28, "10852920758292811": 28, "36085995785542146": 28, "49088968517023296": 28, "5297660279561411": 28, "48877312914546234": 28, "4848520041529702": 28, "7678571428571428": 28, "31482": 28, "tangent": 28, "59976908308104": 28, "4963883113854736": 28, "1724878951919264": 28, "35549687067330726": 28, "3307757": 28, "simson": 28, "578947689005502": 28, "6270069103429565": 28, "013581124397822893": 28, "43210300146756936": 28, "462730": 28, "inscrib": 28, "768343013064605": 28, "7717801666974846": 28, "12482171404042144": 28, "6445516077439113": 28, "6622740540324344": 28, "44285714285714284": 28, "48082": 28, "great": 28, "6151678032679938": 28, "6194506424602977": 28, "5237975686048405": 28, "5752620110628913": 28, "40714285714285714": 28, "524003": 28, "intern": 28, "extern": 28, "9544700262181692": 28, "9547191776223249": 28, "06348267860292894": 28, "6012700464524801": 28, "8358244891138791": 28, "9464285714285714": 28, "5407025": 28, "7428783723631838": 28, "7502904601610197": 28, "006235350315249621": 28, "39303319759855243": 28, "6026876561381135": 28, "3928571428571429": 28, "6220": 28, "6044584589208712": 28, "6247087590356082": 28, "5495989056289238": 28, "6404968907479984": 28, "6107142857142858": 28, "664497": 28, "parallel": [28, 78], "6220133585096995": 28, "6017217718876411": 28, "40095604092651027": 28, "06793369410635872": 28, "3948184056141364": 28, "76956": 28, "7548885234150651": 28, "8246343320198054": 28, "7571720795352108": 28, "8192570426095808": 28, "3076508249923096": 28, "5768412624599064": 28, "7030698606760027": 28, "8248175182481752": 28, "65": 28, "89246": 28, "curv": 28, "6058837846959582": 28, "6061010985898527": 28, "6010512105924976": 28, "009984282260938813": 28, "4660368744333562": 28, "91111": 28, "trisect": 28, "7222511927302219": 28, "7114737175075206": 28, "42053296186769257": 28, "5472899496445176": 28, "7163539488698042": 28, "6821428571428572": 28, "946975": 28, "8476721575861583": 28, "653131668312657": 28, "9162572314594017": 28, "9426016455778317": 28, "2862599599983249": 28, "7850418748754415": 28, "6514226203690341": 28, "9778406317665507": 28, "bloom_level": 28, "4": [28, 85, 87, 115, 140], "6": [28, 84, 115], "include_solut": 28, "output_format": 28, "plain": 28, "markdown": 28, "latex": 28, "llm_model": 28, "gpt": 28, "4o": 28, "mini": 28, "openai_api_kei": 28, "llm": 28, "lecture_id": 28, "calculate_translation_text_fingerprint": 30, "translationrequest": [30, 31], "calculate_translation_text_fingerprint_statu": 30, "translate_statu": 30, "text_detect_languag": 30, "textdetectlanguagerequest": [30, 31], "text_detect_language_statu": 30, "textfingerprinttaskrespons": 31, "textfingerprintrespons": 31, "sourc": [31, 78, 86, 87, 105], "de": 31, "target": [31, 77, 78, 87, 105, 118], "skip_segment": 31, "translationtaskrespons": 31, "translationrespons": 31, "textdetectlanguagetaskrespons": 31, "textdetectlanguagerespons": 31, "retrieve_fil": 33, "retrieveurlrequest": [33, 34], "get_retrieve_file_statu": 33, "calculate_video_fingerprint": 33, "videofingerprintrequest": [33, 34], "calculate_video_fingerprint_statu": 33, "get_fil": 33, "extract_audio": [33, 117], "extractaudiorequest": [33, 34], "extract_audio_statu": 33, "detect_slid": 33, "detectslidesrequest": [33, 34], "detect_slides_statu": 33, "playlist": [34, 118], "videostreaminfo": 34, "codec_typ": 34, "audio": [34, 77, 78, 118, 120], "codec_nam": 34, "durat": [34, 37, 118], "bit_rat": 34, "sample_r": 34, "resolut": 34, "videotokenstatu": 34, "stream": [34, 77, 118], "retrieveurlresponseinn": 34, "retrieveurlrespons": 34, "videofingerprinttaskrespons": 34, "videofingerprintrespons": 34, "recalculate_cach": [34, 67], "extractaudiotaskrespons": 34, "extractaudiorespons": 34, "slidedetectionparam": 34, "hash_thresh": [34, 117], "95": 34, "multipli": [34, 117, 118], "default_threshold": [34, 117, 118], "05": [34, 117, 118, 130], "include_first": [34, 117], "include_last": [34, 117], "paramet": [34, 74, 77, 86, 96, 97, 100, 101, 102, 103, 109, 111, 112, 115, 120, 123, 130], "slidetokenandtimestamp": 34, "timestamp": [34, 114, 120], "detectslidestaskrespons": 34, "slide_token": 34, "detectslidesrespons": 34, "calculate_audio_fingerprint": 36, "audiofingerprintrequest": [36, 37], "calculate_audio_fingerprint_statu": 36, "transcrib": [36, 119], "audiotranscriptionrequest": [36, 37], "transcribe_statu": 36, "detect_languag": 36, "audiodetectlanguagerequest": [36, 37], "detect_language_statu": 36, "audiofingerprinttaskrespons": 37, "audiofingerprintrespons": 37, "audiodetectlanguagetaskrespons": 37, "audiodetectlanguagerespons": 37, "force_lang": [37, 120], "strict": [37, 120], "audiotranscriptiontaskrespons": 37, "transcript_result": 37, "subtitle_result": 37, "audiotranscriptionrespons": 37, "celery_config": 39, "celery_tool": 39, "job": [39, 45, 48, 51, 54, 57, 60, 63, 66, 69], "route_task": 40, "arg": [40, 42], "kwarg": [40, 67, 78, 85, 87, 93], "option": [40, 85, 86, 87, 95], "kw": 40, "baseconfig": 40, "developmentconfig": 40, "get_set": 40, "create_celeri": 40, "creat": [40, 74, 75, 85, 87, 95, 105, 112, 115], "get_celery_task": 40, "asyncresult": 40, "get_task_info": 40, "get_n_celery_work": 41, "direct_lookup_generic_job": 42, "task_fn": 42, "return_result": [42, 46, 58, 64, 70], "timeout": 42, "40": [42, 95], "launch": 42, "direct": [42, 85, 87, 130], "cach": [42, 73, 78, 118], "lookup": [42, 73], "look": 42, "If": [42, 75, 77, 81, 85, 86, 87, 101, 105, 112, 130], "just": [42, 86], "second": [42, 43, 77, 95, 115, 120], "case": [42, 75, 84, 112], "hit": 42, "miss": [42, 130], "msg": [43, 108, 112, 115], "total": [43, 78, 109, 115], "64": 43, "get_embedding_text_fingerprint_chain_list": 46, "fingerprint_lookup_job": [46, 49, 64, 67, 70], "fingerprint_compute_job": [46, 64], "asynchron": [46, 64], "fingerprint_job": [46, 49, 64, 67, 70], "embedding_job": 46, "retrieve_image_from_url_job": 49, "upload_image_from_file_job": 49, "ocr_job": 49, "api_token": [49, 83], "openai_token": [49, 83], "gemini_token": [49, 83], "tree_job": 52, "category_info_job": 52, "cluster_info_job": 52, "concept_info_job": 52, "openalex_category_nearest_topics_job": 52, "openalex_topic_nearest_categories_job": 52, "recompute_clusters_job": 52, "graph_distance_job": 52, "concept_nearest_category_job": 52, "use_depth_3": [52, 85, 87, 88], "cluster_nearest_category_job": 52, "concept_nearest_concept_job": 52, "breakup_cluster_job": 52, "retrieve_from_es_job": 55, "index_to_search_in": [55, 93], "chunk_text_job": 55, "anonymize_text_job": 55, "sublink_lookup_job": 58, "extract_sublinks_job": 58, "extract_content_job": 58, "long_pattern": [58, 95], "wikify_text": 61, "wikify_keyword": 61, "keyword_list": 61, "get_translation_text_fingerprint_chain_list": 64, "translation_job": 64, "skip_sentence_segment": [64, 105, 106], "detect_text_language_job": 64, "get_video_fingerprint_chain_list": 67, "min_similar": [67, 77, 78], "n_job": 67, "8": [67, 74, 117], "ignore_fp_result": 67, "get_audio_fingerprint_chain_list": 67, "get_slide_fingerprint_chain_list": 67, "origin_token": [67, 74, 117], "retrieve_url_job": 67, "is_playlist": 67, "extract_audio_job": 67, "detect_slides_job": 67, "get_file_job": 67, "get_audio_language_detection_task_chain": 70, "n_div": [70, 120], "len_seg": 70, "30": [70, 120], "language_lookup_job": 70, "detect_language_job": 70, "transcribe_job": 70, "strict_sil": [70, 120], "common_util": 73, "multimedia_util": 73, "delete_fil": 74, "file_path": [74, 75, 83], "delet": [74, 111], "create_symlink_between_path": 74, "old_path": 74, "new_path": 74, "symlink": 74, "old": 74, "real": 74, "new": [74, 84, 86, 115, 118], "videodbcachingmanag": 74, "initialize_databas": 74, "dbcachingmanagerbas": [74, 78], "init_db": 74, "audiodbcachingmanag": 74, "slidedbcachingmanag": 74, "textdbcachingmanag": 74, "scrapingdbcachingmanag": 74, "get_details_using_origin": 74, "col": [74, 78, 87], "get": [74, 87], "detail": [74, 78], "row": [74, 78, 86, 87, 102, 130], "column": [74, 86, 87, 96, 97, 100, 102, 103, 130], "embeddingdbcachingmanag": 74, "videoconfig": 74, "get_root_dir": 74, "get_image_dir": 74, "get_audio_dir": 74, "get_video_dir": 74, "get_transcript_dir": 74, "concat_file_path": 74, "filenam": [74, 75, 112], "subfold": 74, "concaten": 74, "root": [74, 118], "dir": 74, "generate_filepath": 74, "force_dir": 74, "its": [74, 77, 85, 86, 87, 95, 102, 118, 130], "particular": 74, "create_symlink": 74, "new_filenam": 74, "fingerprintparamet": 74, "load_valu": 74, "get_min_sim_imag": 74, "get_min_sim_audio": 74, "get_min_sim_video": 74, "get_token_file_statu": 74, "file_manag": [74, 83, 117, 120], "write_binary_file_to_token": 74, "b64_str": 74, "write": [74, 75, 118], "receiv": 74, "base64": 74, "encod": [74, 77, 96, 101, 111], "unexpect": [74, 77, 78, 85, 86, 87, 120, 130], "indent": [74, 77, 78, 85, 86, 87, 108, 112, 120], "handl": [74, 78], "f": [74, 75, 115], "binari": [74, 118], "rb": 74, "could": 74, "b64encod": 74, "read": [74, 75, 112, 118], "decod": [74, 77, 118], "utf": 74, "block": [74, 77, 86, 112, 115, 120], "quot": [74, 77, 86, 120], "end": [74, 75, 77, 86, 95, 120, 130], "without": [74, 77, 86, 115, 120, 130], "blank": [74, 77, 86, 120, 130], "unind": [74, 77, 86, 120, 130], "directori": [74, 112], "written": 74, "throw": 74, "except": [74, 81], "make_sure_path_exist": 75, "file_at_the_end": 75, "full_perm": 75, "recurs": [75, 118], "folder": [75, 118], "need": [75, 78, 81, 115], "exist": [75, 77, 84, 112], "thu": 75, "doesn": [75, 77], "t": [75, 77, 87, 96, 101, 112, 118], "assign": [75, 130], "permiss": 75, "chmod": 75, "777": 75, "newli": 75, "file_exist": 75, "write_text_fil": 75, "filename_with_path": 75, "textual": 75, "write_json_fil": 75, "d": [75, 109, 111], "json": [75, 84, 112, 118, 120], "read_text_fil": 75, "open": 75, "read_json_fil": 75, "format_datetime_for_mysql": 75, "dt": 75, "parse_mysql_datetim": 75, "get_current_datetim": 75, "current": [75, 114], "datetim": [75, 114], "mysql": 75, "invert_dict": 75, "strtobool": 75, "val": 75, "convert": [75, 87, 111], "represent": [75, 77], "truth": 75, "y": [75, 130], "ye": 75, "n": [75, 81, 83, 87, 96, 103, 117, 135], "off": 75, "rais": 75, "valueerror": 75, "anyth": 75, "els": [75, 118], "insensit": 75, "copy_file_within_fold": 75, "folder_nam": 75, "src_file": 75, "dest_fil": 75, "convert_list_to_text": 75, "str_or_list": 75, "convert_text_back_to_list": 75, "return_list": [75, 106], "generate_random_token": 75, "random": [75, 86, 135], "time": [75, 81, 95, 107, 109, 120], "get_file_s": 75, "retrieve_generic_file_from_generic_url": 75, "output_filename_with_path": [75, 118, 120], "output_token": [75, 118, 120], "wget": [75, 118], "store": [75, 96, 97, 118], "local": [75, 118], "is_url": 75, "is_effective_url": 75, "is_token": 75, "is_pdf": 75, "get_most_common_el": 75, "input_list": [75, 81], "remove_nul": 75, "perceptual_hash_text": 77, "perceptu": [77, 118], "hash": [77, 118], "strong": 77, "min_window_length": 77, "minimum": [77, 78, 81, 86, 95, 118], "window": 77, "k": [77, 118, 130], "gram": 77, "max_window_length": 77, "maximum": [77, 95, 101, 103, 118, 130], "hash_len": 77, "md5_video_or_audio": 77, "input_filename_with_path": [77, 79, 84, 118, 120], "md5": [77, 81, 105], "perceptual_hash_audio": 77, "max_length": [77, 95], "7200": 77, "both": [77, 86, 130], "perceptual_hash_imag": 77, "hash_siz": 77, "16": 77, "size": [77, 86, 96, 97, 118], "doe": [77, 87, 112], "perceptual_hash_pdf": 77, "compare_decoded_fingerprint": 77, "decoded_1": 77, "decoded_2": 77, "compar": [77, 95, 130], "fuzzi": 77, "match": [77, 78, 95, 103], "ratio": [77, 86, 130], "compare_encoded_fingerprint": 77, "f1": 77, "f2": 77, "decoder_func": 77, "hex_to_hash": 77, "indic": [77, 87, 95, 118, 120], "exact": 77, "similar": [77, 78, 85, 87, 118, 130], "find_closest_fingerprint_from_list": 77, "target_fp": 77, "fp_list": 77, "token_list": 77, "date_list": 77, "strip_underscor": 77, "candid": 77, "find": [77, 85, 87, 95, 96, 103, 118], "highest": [77, 120], "whose": [77, 87, 130], "abov": [77, 114, 118, 130], "correspond": [77, 86], "lower": 77, "than": [77, 101, 130], "differ": [77, 115, 130], "v": [77, 81, 87, 95, 130], "remov": [77, 95], "trail": 77, "underscor": 77, "satisfi": 77, "criterion": 77, "find_closest_fingerprint_for_list_from_list": 77, "find_closest_audio_fingerprint_from_list": 77, "find_closest_image_fingerprint_from_list": 77, "find_closest_text_fingerprint_from_list": 77, "md5_text": 77, "compute_text_fingerprint": 77, "lookup_latest_allowed_d": 78, "fp_token": 78, "db_manag": 78, "fingerprint_lookup_retrieve_from_db": 78, "equality_condit": 78, "equal": [78, 95], "condit": 78, "count": 78, "where": [78, 118, 130], "same": [78, 95, 102, 118, 130], "plu": [78, 87, 96, 100, 105], "fingerprint_lookup_parallel": 78, "input_dict": [78, 120], "n_total": [78, 95], "data_typ": 78, "perform": [78, 79, 84, 86, 95, 103, 118, 130], "previou": [78, 109, 115], "step": [78, 118], "consid": [78, 86, 96, 97, 103, 118], "type": [78, 81, 95, 96, 100, 101, 102, 103, 111, 112, 120], "mode": [78, 86], "fingerprint_lookup_direct": 78, "fp_result": 78, "fingerprint_lookup_callback": 78, "results_list": [78, 120], "collect": 78, "databas": 78, "insert": 78, "retrieve_fingerprint_callback": 78, "has_origin": 78, "add_token_status_to_result": 78, "token_status_func": 78, "ignore_fingerprint_results_callback": 78, "is_fingerprint": 78, "fingerprint_cache_lookup": 78, "fingerprint_cache_lookup_with_most_similar": 78, "extra_col": 78, "cache_lookup_gener": 78, "database_callback_gener": 78, "values_dict": 78, "use_closest_match": 78, "token_based_text_lookup": 78, "main_col": 78, "modify_result_func": 78, "modify_result_arg": 78, "fingerprint_based_text_lookup": 78, "fp": [78, 81, 106, 118], "get_video_token_statu": 79, "get_image_token_statu": 79, "get_audio_token_statu": 79, "perform_prob": 79, "probe": [79, 118], "ffprobe": 79, "document": [79, 84, 118], "get_available_stream": 79, "perform_tesseract_ocr": 79, "image_path": [79, 84, 118], "ocr": [79, 82, 118], "detect_text_languag": 79, "detect": [79, 84, 118, 120], "embedding_to_json": 81, "embedding_from_json": 81, "generate_embedding_text_token": 81, "get_text_token_count_using_model": 81, "model_token": 81, "embeddingmodel": 81, "get_devic": [81, 105], "load_model": [81, 91, 105], "load_heavi": 81, "sentenc": [81, 101], "model_load": 81, "get_token": 81, "set_token": 81, "get_last_usag": [81, 105, 120], "unload_model": [81, 105, 120], "unload_period": [81, 105, 120], "10800": [81, 105], "unload": 81, "light": 81, "sinc": 81, "last": [81, 115], "heavi": 81, "qualifi": 81, "get_token_count": 81, "get_max_token": 81, "emb": 81, "copy_embedding_object": 81, "embedding_obj": 81, "compute_embedding_text_fingerprint_callback": 81, "token_based_embedding_lookup": 81, "fingerprint_based_embedding_lookup": 81, "insert_embedding_into_db": 81, "jsonify_embedding_result": 81, "embedding_text_list_fingerprint_parallel": 81, "text_list": 81, "embedding_text_list_dummy_fingerprint_parallel": 81, "embedding_text_list_fingerprint_callback": 81, "embedding_text_list_embed_parallel": 81, "embedding_text_list_embed_callback": 81, "embedding_text_list_embed_jsonify_callback": 81, "create_image_filename_using_url_format": 83, "create_origin_token_using_info": 83, "cache_lookup_retrieve_image_from_url": 83, "retrieve_image_file_from_url": 83, "force_token": [83, 117], "retrieve_image_file_from_url_callback": 83, "upload_image_from_fil": 83, "cache_lookup_extract_slide_text": 83, "break_pdf_into_imag": 83, "perform_ocr": [83, 84], "extract_slide_text": 83, "extract_multi_image_text": 83, "page_and_filename_list": 83, "collect_multi_image_ocr": 83, "extract_slide_text_callback": 83, "is_valid_latex": 84, "cleanup_json": 84, "imgtobase64convert": 84, "get_base64": 84, "abstractocrmodel": 84, "api_kei": 84, "model_class": 84, "model_nam": 84, "establish_connect": 84, "lazili": 84, "connect": [84, 96, 97], "alreadi": 84, "successfulli": 84, "establish": 84, "googleocrmodel": 84, "text_detect": 84, "document_text_detect": 84, "wait_for_ocr_result": 84, "image_object": 84, "dtd": 84, "retri": 84, "call": [84, 96, 101], "wait": 84, "td": 84, "failur": 84, "openaiocrmodel": 84, "validate_latex": 84, "geminiocrmodel": 84, "get_ocr_colnam": 84, "perform_tesseract_ocr_on_pdf": 84, "pdf_path": 84, "in_pag": 84, "separ": [84, 101], "singular": 84, "entir": 84, "ontologydata": [85, 87], "test_mod": [85, 87], "load_data": [85, 87], "load_ontology_concept_nam": [85, 87], "load_ontology_categori": [85, 87], "load_non_ontology_concept_nam": [85, 87], "load_concept_concept_graphscor": [85, 87], "load_category_categori": [85, 87], "load_category_concept": [85, 87], "load_anchor_page_dict": [85, 87], "anchor": [85, 87], "child": [85, 87], "relat": [85, 87], "compute_symmetric_concept_concept_matrix": [85, 87], "matrix": [85, 86, 87], "compute_precalculated_similarity_matric": [85, 87], "precomput": [85, 87], "matric": [85, 87], "get_concept_concept_similar": [85, 87], "concept_1_id": [85, 87], "concept_2_id": [85, 87], "get_concept_cluster_similar": [85, 87], "averag": [85, 86, 87, 96, 102, 130], "get_cluster_cluster_similar": [85, 87], "cluster_1_id": [85, 87], "cluster_2_id": [85, 87], "get_concept_category_similar": [85, 87], "coeffici": [85, 87, 130], "get_cluster_category_similar": [85, 87], "get_category_category_similar": [85, 87], "category_1_id": [85, 87], "category_2_id": [85, 87], "get_concept_closest_concept": [85, 87], "top": [85, 87, 103], "get_concept_closest_concept_embed": [85, 87], "get_concept_closest_categori": [85, 87], "adaptive_threshold": [85, 87], "go": [85, 87], "directli": [85, 87], "get_concept_category_closest_embed": [85, 87], "get_cluster_closest_categori": [85, 87], "get_custom_cluster_closest_categori": [85, 87], "custom": [85, 87], "get_cluster_closest_category_embed": [85, 87], "get_custom_cluster_closest_category_embed": [85, 87], "get_category_closest_categori": [85, 87], "As": [85, 87], "compos": [85, 87], "crossov": [85, 87], "get_ontology_concept_names_t": [85, 87], "concepts_to_keep": [85, 87], "get_ontology_category_nam": [85, 87], "get_ontology_category_info": [85, 87], "cat_id": [85, 87, 88], "get_non_ontology_concept_nam": [85, 87], "get_concept_concept_graphscore_t": [85, 87], "get_category_to_categori": [85, 87], "get_category_par": [85, 87], "get_category_branch": [85, 87], "get_category_children": [85, 87], "get_cluster_par": [85, 87], "get_cluster_children": [85, 87], "get_concept_parent_categori": [85, 87], "get_concept_parent_clust": [85, 87], "get_category_cluster_list": [85, 87], "get_category_concept_list": [85, 87], "get_cluster_concept_list": [85, 87], "get_category_concept_t": [85, 87], "get_category_cluster_t": [85, 87], "get_category_anchor_pag": [85, 87], "get_cluster_concept": [85, 87], "get_concept_nam": [85, 87], "get_concept_names_list": [85, 87], "get_test_concept_nam": [85, 87], "get_test_category_concept": [85, 87], "get_test_cluster_concept": [85, 87], "get_root_categori": [85, 87], "generate_tree_structur": [85, 87], "generate_category_concept_dict": [85, 87], "ontology_data_obj": [85, 88], "get_concept_category_closest": [85, 88], "get_cluster_category_closest": [85, 88], "get_concept_concept_closest": [85, 88], "get_openalex_nearest": [85, 89], "openalex": 85, "compute_all_graphs_from_scratch": 86, "data_to_use_dict": 86, "scratch": 86, "datafram": [86, 87, 96, 97, 100, 102, 103, 130], "map": [86, 87, 95, 114], "normalize_featur": 86, "l2": [86, 87], "norm": [86, 130], "dens": 86, "get_laplacian": 86, "laplacian": 86, "unnorm": 86, "adjac": [86, 87], "lil": 86, "spars": 86, "sum_laplacian": 86, "simpl": 86, "arithmetic_mean_laplacian": 86, "arithmet": [86, 130], "mean": [86, 96, 103, 130], "combine_laplacian": 86, "combin": [86, 130], "li": 86, "spec_embed_on_laplacian": 86, "seed": 86, "420": 86, "spectral": 86, "compon": [86, 96, 97], "optim": [86, 95], "combine_and_embed_laplacian": 86, "main_graph": 86, "n_dim": 86, "1000": 86, "calcul": [86, 118], "combination_method": 86, "armean": 86, "dimens": 86, "perform_pca": 86, "n_compon": 86, "random_st": 86, "center_and_scal": 86, "pca": 86, "state": [86, 109], "dimension": 86, "reduct": 86, "precompute_clustering_metr": 86, "affin": [86, 130], "normalize_vector": 86, "perform_constrained_agglom": 86, "cosin": [86, 130], "linkag": 86, "full_comput": 86, "agglom": 86, "must": 86, "link": 86, "cannot": 86, "constraint": 86, "ndarrai": [86, 87], "ml": 86, "cl": 86, "return_model": 86, "well": [86, 115], "label": 86, "distanc": [86, 118, 130], "variance_ratio_ev": 86, "varianc": 86, "also": [86, 115], "known": 86, "calinski": 86, "harabasz": 86, "davies_bouldin_ev": 86, "davi": 86, "bouldin": 86, "cluster_using_embed": 86, "low": [86, 130], "space": [86, 95, 101, 112], "group_clust": 86, "rows_and_col": 86, "precomputed_map": 86, "group": 86, "togeth": [86, 87], "becom": 86, "singl": [86, 118], "what": [86, 96, 101], "median": [86, 118], "reassign_outli": 86, "reassign": 86, "outlier": 86, "non": 86, "cluster_and_reassign_outli": 86, "assign_to_categories_using_exist": 86, "category_concept": 86, "category_id_to_index": 86, "convert_cluster_labels_to_dict": 86, "cluster_label": 86, "concept_index_to_id": 86, "concept_index_to_nam": 86, "db_results_to_pandas_df": 87, "get_id_dict": 87, "make_adj_undirect": 87, "graph_adj": 87, "undirect": 87, "symmetr": 87, "derive_col_to_col_graph": 87, "orig_adj": 87, "get_col_to_col_dict": 87, "df": [87, 124, 131], "source_col": 87, "target_col": 87, "element": [87, 95], "anoth": 87, "kei": [87, 103, 120, 130], "return_chosen_indic": 87, "base_list": 87, "remove_invalid_pair": 87, "l_main": 87, "l_secondary_1": 87, "l_secondary_2": 87, "ref_dict": 87, "refer": 87, "appear": 87, "In": 87, "word": [87, 101, 118], "elimin": [87, 95], "against": 87, "l_secondari": 87, "secondari": 87, "clean": [87, 110], "order": 87, "thei": [87, 96, 101, 118], "were": 87, "create_graph_from_df": 87, "weight_col": 87, "col_dict": 87, "row_dict": 87, "pool_rows_and_col": 87, "make_symmetr": 87, "edg": [87, 95, 96, 97, 130], "turn": 87, "node": 87, "weight": [87, 96, 102, 130], "adj": 87, "pool": 87, "convert_to_csr_matrix": 87, "csr": 87, "to_ndarray_and_flatten": 87, "adjusted_exp": 87, "x": [87, 130], "overlap": 87, "adjusted_exp_slope_1_point": 87, "compute_averag": 87, "ensure_nonzero_denomin": 87, "compute_average_of_df": 87, "average_and_combin": 87, "s1": [87, 95], "s2": [87, 95], "l1": 87, "skip_empti": 87, "embeddings_table_exist": 87, "execute_single_entity_concepts_and_anchors_queri": 87, "concepts_queri": 87, "anchors_queri": 87, "entity_id": 87, "execute_multi_entity_concepts_and_anchors_queri": 87, "combine_concept_and_anchor_scor": 87, "d4_cat_id_to_index": 87, "concept_length": 87, "anchor_length": 87, "get_category_info": 88, "get_cluster_info": 88, "get_concept_info": 88, "anonym": 90, "retrieval_set": 90, "retrieval_util": 90, "anonymizermodel": 91, "anonymizer_model": 91, "normalize_index_nam": 93, "has_invalid_charact": 93, "search_es_index": 93, "retriever_typ": 93, "allowed_filt": 93, "return_embed": 93, "retrieve_from_": 93, "embedding_result": 93, "compare_str": 95, "string1": 95, "string2": 95, "arrai": 95, "first": [95, 112, 115, 118], "charact": 95, "find_consecutive_run": 95, "min_run": 95, "consecut": [95, 115], "run": [95, 109, 115], "sequenc": [95, 118], "k1": [95, 118], "k2": [95, 118], "find_edge_pattern": 95, "content_stack": 95, "flip_str": 95, "repeat": 95, "pattern": 95, "begin": [95, 115], "webpag": 95, "flip": 95, "footer": 95, "string_circular_shift": 95, "shift": 95, "circular": 95, "mani": 95, "find_spac": 95, "everi": [95, 112, 118, 130], "shift_to_max_correl": 95, "correl": 95, "posit": [95, 96, 103], "largest": 95, "intersect": 95, "find_repeated_pattern": 95, "min_length": 95, "1024": 95, "everywher": 95, "within": 95, "substr": 95, "extract_text_from_url": 95, "request_head": 95, "tag_search_sequ": 95, "headless": 95, "browser": 95, "tag": [95, 111], "search": [95, 96, 103, 118], "check_url": 95, "test_url": 95, "fulli": 95, "resolv": 95, "messag": [95, 115], "code": [95, 112, 120], "create_base_url_token": 95, "initialize_url": 95, "base_url": 95, "initi": 95, "determin": 95, "protocol": 95, "http": 95, "correct": 95, "generate_sublink_token": 95, "base_token": 95, "reconstruct_data_dict": 95, "page_typ": 95, "reconstruct": 95, "precalcul": 95, "initialize_data_dict": 95, "fill": 95, "pagetyp": 95, "field": 95, "vacant": 95, "get_sublink": 95, "later": 95, "parse_page_typ": 95, "pars": [95, 111, 118], "predefin": 95, "process_all_sublink": 95, "modifi": 95, "long": [95, 105], "cache_lookup_get_sublink": 95, "initialize_url_and_get_sublink": 95, "scraping_sublinks_callback": 95, "cache_lookup_process_all_sublink": 95, "process_all_scraping_sublinks_parallel": 95, "sublink_parallel_processing_merge_callback": 95, "remove_junk_scraping_parallel": 95, "extract_scraping_content_callback": 95, "conceptsgraph": [96, 97, 100, 102], "load_from_db": [96, 100], "get_ontology_concept": [96, 100], "add_graph_scor": [96, 100], "smooth": [96, 100, 102], "pd": [96, 97, 100, 102, 103, 130], "panda": [96, 97, 100, 102, 103, 114], "includ": [96, 100, 102, 115], "bump": [96, 100], "avoid": [96, 100, 112], "neg": [96, 100], "exponenti": [96, 100], "shape": [96, 100, 130], "add_ontology_scor": [96, 100], "push": [96, 100], "awai": [96, 100], "extract_keyword": [96, 101], "solv": [96, 101, 111], "problem": [96, 101, 111], "strip": [96, 101], "html": [96, 101, 111], "lowercas": [96, 101, 111], "nltk": [96, 101], "rake": [96, 101], "python": [96, 101], "join": [96, 101], "p": [96, 101], "Then": [96, 101], "crowd": [96, 101], "young": [96, 101], "boi": [96, 101], "re": [96, 101], "foolin": [96, 101], "around": [96, 101], "corner": [96, 101], "drunk": [96, 101], "dress": [96, 101], "best": [96, 101], "brown": [96, 101], "baggi": [96, 101], "platform": [96, 101], "sole": [96, 101], "don": [96, 101, 118], "give": [96, 101], "damn": [96, 101], "about": [96, 101], "trumpet": [96, 101], "playin": [96, 101], "band": [96, 101], "ain": [96, 101], "rock": [96, 101], "roll": [96, 101], "keywords_list": [96, 103], "fraction": [96, 103], "esconceptdetect": [96, 103], "interfac": [96, 103], "portion": [96, 103], "middl": [96, 103], "third": [96, 103], "searchrank": [96, 102, 103], "uniqu": [96, 102, 103, 130], "fallback": [96, 103], "compute_scor": [96, 102], "gather": [96, 102], "final": [96, 102, 115, 118, 130], "x_score": [96, 102], "draw_ontologi": [96, 97], "draw": 96, "neighbourhood": [96, 97], "tmp": [96, 97], "keywords_scor": [96, 97], "visualis": [96, 97, 122], "draw_graph": [96, 97], "below": [96, 97, 101, 114, 118], "out": [96, 97, 101], "conceptembed": 98, "hold": 98, "compute_embedding_scor": 98, "word_token": 101, "possibl": 101, "you": 101, "rake_extract": 101, "split_word": 101, "auto": 101, "filter_past_tenses_and_adverb": 101, "unconstrain": 101, "retur": 101, "minim": 101, "ignor": 101, "past": 101, "tens": 101, "participl": 101, "adverb": 101, "compute_levenshtein_scor": 102, "compute_keywords_scor": 102, "compute_mixed_scor": 102, "aggregate_result": 102, "coef": 102, "filter_result": 102, "epsilon": [102, 124], "depend": 102, "criteria": 102, "specifi": [102, 130], "subset": 102, "search_wikipedia_api": 103, "queri": 103, "search_elasticsearch": 103, "elasticserch": 103, "text_util": 104, "generate_src_tgt_dict": 105, "generate_translation_text_token": 105, "compute_slide_tfidf_scor": 105, "list_of_set": 105, "min_freq": 105, "find_set_cov": 105, "coverag": 105, "find_best_slide_subset": 105, "slides_and_concept": 105, "prioriti": 105, "translationmodel": 105, "huggingfac": 105, "pysbd": 105, "skip": [105, 112], "unpunctu": 105, "too": [105, 115], "flag": 105, "translate_text": 106, "translation_obj": 106, "translate_text_callback": 106, "translate_text_return_list_callback": 106, "compute_translation_text_fingerprint_callback": 106, "cache_lookup_translation_text_using_fingerprint": 106, "cache_lookup_translate_text": 106, "detect_language_transl": 106, "breadcrumb": 107, "progress_bar": 107, "debug": [108, 112], "color": [108, 112], "time_color": 108, "grai": 108, "report": [108, 115], "outdent": 108, "progressbar": 109, "n_iter": 109, "bar_length": 109, "50": 109, "progress": 109, "bar": 109, "track": [109, 115, 118], "usag": [109, 115], "letter": 109, "b": 109, "c": [109, 130], "pb": 109, "len": 109, "consum": [109, 115], "updat": 109, "25": 109, "00": 109, "75": 109, "print": [109, 112, 114, 115], "iter": 109, "percentag": 109, "complet": [109, 115, 135], "overwrit": 109, "ban": 109, "reset": [109, 112, 115], "increment": 109, "counter": 109, "reus": [109, 115], "io": 110, "htmlcleaner": 111, "htmlparser": 111, "handle_starttag": 111, "attr": 111, "handle_endtag": 111, "handle_data": 111, "get_data": 111, "evalu": 112, "pref": 112, "x1b": 112, "0m": 112, "black": 112, "30m": 112, "blue": 112, "34m": 112, "cyan": 112, "36m": 112, "green": 112, "32m": 112, "magenta": 112, "35m": 112, "red": 112, "31m": 112, "white": 112, "37m": 112, "yellow": 112, "33m": 112, "cprint": 112, "is_bold": 112, "bold": 112, "pprint": 112, "inlin": 112, "only_first": 112, "pretti": 112, "preced": 112, "ellipsi": 112, "read_json": 112, "save_json": 112, "save": 112, "mkdir": 112, "dirnam": 112, "date": 113, "stopwatch": 113, "now": 114, "2022": 114, "06": 114, "28": 114, "09": 114, "46": 114, "21": 114, "677968": 114, "rescal": 114, "min_dat": 114, "max_dat": 114, "seri": 114, "rang": [114, 130], "assum": [114, 130], "yyyi": 114, "mm": 114, "dd": 114, "add_year": 114, "n_year": 114, "sw": 115, "delta": 115, "284306764602661": 115, "variabl": 115, "t1": 115, "t2": 115, "yet": 115, "t3": 115, "609307289123535": 115, "849977970123291": 115, "660188913345337": 115, "preprocess": 115, "pre_tim": 115, "task_tim": 115, "postprocess": 115, "post_tim": 115, "total_tim": 115, "proport": 115, "5176954220125477": 115, "tick": 115, "replac": [115, 130], "partial": 115, "furthermor": 115, "19": 115, "86": 115, "lap": 115, "74": 115, "11": 115, "66": 115, "45": 115, "checkpoint": 115, "finish": 115, "summari": 115, "boolean": 115, "video_util": 116, "retrieve_file_from_url": 117, "is_kaltura": [117, 118], "retrieve_file_from_url_callback": 117, "compute_video_fingerprint": 117, "compute_video_fingerprint_callback": 117, "video_id_and_duration_fp_lookup": 117, "cache_lookup_retrieve_file_from_url": 117, "cache_lookup_extract_audio": 117, "extract_audio_callback": 117, "reextract_cached_audio": 117, "compute_audio_fingerprint": 117, "compute_audio_fingerprint_callback": 117, "cache_lookup_detect_slid": 117, "extract_and_sample_fram": 117, "compute_noise_level_parallel": 117, "nlp_model": [117, 118], "compute_noise_threshold_callback": 117, "compute_slide_transitions_parallel": 117, "compute_slide_transitions_callback": 117, "detect_slides_callback": 117, "attempt": 117, "reextract_cached_slid": 117, "compute_single_image_fingerprint": 117, "compute_slide_set_fingerprint": 117, "compute_slide_fingerprint_callback": 117, "retrieve_slide_fingerprint_callback": 117, "add_token_status_to_slide_list": 117, "ignore_slide_fingerprint_results_callback": 117, "ignore_audio_fingerprint_results_callback": 117, "retrieve_audio_fingerprint_callback": 117, "retrieve_video_fingerprint_callback": 117, "ignore_video_fingerprint_results_callback": 117, "ignore_single_image_fingerprint_results_callback": 117, "add_token_status_to_single_imag": 117, "retrieve_video_file_from_generic_url": 118, "retrieve_file_from_kaltura": 118, "m3u8": 118, "kaltura": 118, "retrieve_file_from_youtub": 118, "download": 118, "youtub": 118, "retrieve_file_from_any_sourc": 118, "create_video_filename_using_url_format": 118, "perform_slow_audio_prob": 118, "slower": 118, "ffmpeg": 118, "generate_symbolic_token": 118, "symbol": 118, "itself": 118, "detect_audio_dur": 118, "ogg": 118, "input_token": 118, "generate_audio_token": 118, "extract_audio_from_video": 118, "extract_fram": 118, "output_folder_with_path": 118, "output_fold": 118, "frame": 118, "generate_frame_sample_indic": 118, "input_folder_with_path": 118, "12": 118, "our": 118, "read_txt_gz_fil": 118, "txt": 118, "gz": 118, "write_txt_gz_fil": 118, "read_json_gz_fil": 118, "tesseract_ocr_or_get_cach": 118, "ocr_path": 118, "langaug": 118, "generate_img_and_ocr_paths_and_perform_tesseract_ocr": 118, "nlpmodel": 118, "load_nlp_model": 118, "lazi": [118, 120], "nlp": 118, "get_word": 118, "valid_onli": 118, "get_text_word_vector": 118, "get_text_word_vector_using_word": 118, "get_cosine_sim": 118, "v1": 118, "frame_ocr_dist": 118, "frame_hash_similar": 118, "compute_ocr_noise_level": 118, "frame_sample_indic": 118, "nois": 118, "sampl": [118, 120], "identifi": 118, "compute_ocr_threshold": 118, "distance_list": 118, "subsequ": 118, "empti": 118, "check_ocr_and_hash_threshold": 118, "k_l": 118, "k_r": 118, "ocr_dist_threshold": 118, "hash_similarity_threshold": 118, "frame_ocr_transit": 118, "transit": 118, "frame_format": 118, "leftmost": 118, "rightmost": 118, "distinct": 118, "found": 118, "compute_video_ocr_transit": 118, "hash_dist_threshold": 118, "keep_first": 118, "keep_last": 118, "transitori": 118, "whispertranscriptionmodel": 120, "load_model_whisp": 120, "whisper": 120, "43200": 120, "get_silence_threshold": 120, "detect_audio_segment_lang_whisp": 120, "transcribe_audio_whisp": 120, "verbos": 120, "explicitli": 120, "feed": 120, "transcript": 120, "silenc": 120, "lenient": 120, "affect": 120, "logprob": 120, "speech": 120, "like": 120, "subtitl": 120, "extract_media_seg": 120, "detect_language_retrieve_from_db_and_split": 120, "segment_length": 120, "detect_language_parallel": 120, "tokens_dict": 120, "detect_language_callback": 120, "transcribe_audio_to_text": 120, "transcribe_callback": 120, "cache_lookup_audio_transcript": 120, "cache_lookup_audio_fingerprint": 120, "cache_lookup_audio_languag": 120, "invest": 122, "aggregate_recent_past": 123, "check_unit": 123, "compute_fundraisers_unit": 123, "compute_investors_unit": 123, "compute_investors_units_2": 123, "compute_jaccard_index": 123, "concept_configur": 123, "create_investments_graph": 123, "detect_fundraisers_concept": 123, "toy_exampl": 123, "compute_year_coeffici": 124, "recent_past": 124, "rescale_scor": 124, "year": 124, "aggregate_year": 124, "groupby_column": [124, 131], "normalize_scor": 124, "score_column": 124, "01": 124, "show_trend": 125, "unit_id": 125, "unit_concept": 125, "show_matchmaking_list_view": 125, "investors_concepts_jaccard": 125, "investors_concept": 125, "unit_concept_id": 125, "show_matchmaking_chart_view": 125, "unit_investor": 125, "time_window": 125, "pageid": 130, "investorid": 130, "sqrt": 130, "sum_": 130, "o": 130, "divid": 130, "henc": 130, "mix": 130, "min_ratio": 130, "sourcepageid": 130, "targetpageid": 130, "defin": [130, 134], "kept": 130, "product": 130, "ball": 130, "loop": 130, "normalise_graph": 130, "add": 130, "revers": 130, "vertex": 130, "associ": 130, "key_x": 130, "key_i": 130, "geometr": 130, "compute_affin": 130, "mix_x": 130, "mix_i": 130, "normalise_befor": 130, "requir": 130, "recommend": 130, "euclidean": 130, "notic": 130, "faster": 130, "inf": 130, "typic": 130, "higher": 130, "unus": 130, "u": 130, "equival": 130, "scalar": 130, "tanh": 130, "denot": 130, "get_fr": 131, "db": 131, "get_investors_fr": 131, "fr_id": 131, "get_frs_fundrais": 131, "get_fundraisers_concept": 131, "fundraiser_id": 131, "derive_yearly_data": 131, "date_column": 131, "amount_column": 131, "creation": 134, "build_prefix": 134, "1_old": 136, "2_new": 136, "3_slide": 136}, "objects": {"": [[0, 0, 0, "-", "graphai"]], "graphai": [[1, 0, 0, "-", "api"], [38, 0, 0, "-", "celery"], [72, 0, 0, "-", "core"], [121, 0, 0, "-", "definitions"], [122, 0, 0, "-", "pipelines"]], "graphai.api": [[2, 0, 0, "-", "auth"], [6, 0, 0, "-", "common"], [9, 0, 0, "-", "embedding"], [12, 0, 0, "-", "image"], [15, 0, 0, "-", "main"], [17, 0, 0, "-", "ontology"], [20, 0, 0, "-", "retrieval"], [23, 0, 0, "-", "scraping"], [26, 0, 0, "-", "text"], [29, 0, 0, "-", "translation"], [32, 0, 0, "-", "video"], [35, 0, 0, "-", "voice"]], "graphai.api.auth": [[3, 0, 0, "-", "auth_utils"], [4, 0, 0, "-", "log"], [5, 0, 0, "-", "router"]], "graphai.api.auth.auth_utils": [[3, 1, 1, "", "Token"], [3, 1, 1, "", "TokenData"], [3, 1, 1, "", "User"], [3, 1, 1, "", "UserInDB"], [3, 3, 1, "", "authenticate_user"], [3, 3, 1, "", "extract_username_and_scopes"], [3, 3, 1, "", "extract_username_sync"], [3, 3, 1, "", "generate_random_password_string"], [3, 3, 1, "", "get_password_hash"], [3, 3, 1, "", "get_ratelimit_values"], [3, 3, 1, "", "get_user"], [3, 3, 1, "", "get_user_ratelimit_overrides"], [3, 3, 1, "", "has_rag_access_rights"], [3, 3, 1, "", "verify_password"]], "graphai.api.auth.auth_utils.Token": [[3, 2, 1, "", "access_token"], [3, 2, 1, "", "model_config"], [3, 2, 1, "", "token_type"]], "graphai.api.auth.auth_utils.TokenData": [[3, 2, 1, "", "model_config"], [3, 2, 1, "", "scopes"], [3, 2, 1, "", "username"]], "graphai.api.auth.auth_utils.User": [[3, 2, 1, "", "disabled"], [3, 2, 1, "", "email"], [3, 2, 1, "", "full_name"], [3, 2, 1, "", "model_config"], [3, 2, 1, "", "scopes"], [3, 2, 1, "", "username"]], "graphai.api.auth.auth_utils.UserInDB": [[3, 2, 1, "", "hashed_password"], [3, 2, 1, "", "model_config"]], "graphai.api.auth.log": [[4, 1, 1, "", "LoggerMiddleware"], [4, 3, 1, "", "get_user_agent"], [4, 3, 1, "", "log_request"]], "graphai.api.auth.log.LoggerMiddleware": [[4, 4, 1, "", "dispatch"]], "graphai.api.auth.router": [[5, 3, 1, "", "create_access_token"], [5, 3, 1, "", "get_active_user_dummy"], [5, 3, 1, "", "get_current_active_user"], [5, 3, 1, "", "get_current_user"], [5, 3, 1, "", "get_user_for_rate_limiter"], [5, 3, 1, "", "login_for_access_token"], [5, 3, 1, "", "read_users_me"]], "graphai.api.common": [[7, 0, 0, "-", "schemas"], [8, 0, 0, "-", "utils"]], "graphai.api.common.schemas": [[7, 1, 1, "", "FileRequest"], [7, 1, 1, "", "TaskIDResponse"], [7, 1, 1, "", "TaskStatusResponse"], [7, 1, 1, "", "TokenStatus"]], "graphai.api.common.schemas.FileRequest": [[7, 2, 1, "", "model_config"], [7, 2, 1, "", "token"]], "graphai.api.common.schemas.TaskIDResponse": [[7, 2, 1, "", "model_config"], [7, 2, 1, "", "task_id"]], "graphai.api.common.schemas.TaskStatusResponse": [[7, 2, 1, "", "model_config"], [7, 2, 1, "", "task_id"], [7, 2, 1, "", "task_name"], [7, 2, 1, "", "task_result"], [7, 2, 1, "", "task_status"]], "graphai.api.common.schemas.TokenStatus": [[7, 2, 1, "", "active"], [7, 2, 1, "", "fingerprinted"], [7, 2, 1, "", "model_config"]], "graphai.api.common.utils": [[8, 3, 1, "", "format_api_results"]], "graphai.api.embedding": [[10, 0, 0, "-", "router"], [11, 0, 0, "-", "schemas"]], "graphai.api.embedding.router": [[10, 3, 1, "", "calculate_embedding_text_fingerprint"], [10, 3, 1, "", "calculate_embedding_text_fingerprint_status"], [10, 3, 1, "", "embed_text"], [10, 3, 1, "", "embed_text_status"]], "graphai.api.embedding.schemas": [[11, 1, 1, "", "EmbeddingFingerprintRequest"], [11, 1, 1, "", "EmbeddingRequest"], [11, 1, 1, "", "EmbeddingRequestBase"], [11, 1, 1, "", "EmbeddingResponse"], [11, 1, 1, "", "EmbeddingTaskResponse"]], "graphai.api.embedding.schemas.EmbeddingFingerprintRequest": [[11, 2, 1, "", "model_config"], [11, 2, 1, "", "text"]], "graphai.api.embedding.schemas.EmbeddingRequest": [[11, 2, 1, "", "model_config"], [11, 2, 1, "", "no_cache"], [11, 2, 1, "", "text"]], "graphai.api.embedding.schemas.EmbeddingRequestBase": [[11, 2, 1, "", "force"], [11, 2, 1, "", "model_config"], [11, 2, 1, "", "model_type"]], "graphai.api.embedding.schemas.EmbeddingResponse": [[11, 2, 1, "", "model_config"], [11, 2, 1, "", "task_result"]], "graphai.api.embedding.schemas.EmbeddingTaskResponse": [[11, 2, 1, "", "device"], [11, 2, 1, "", "fresh"], [11, 2, 1, "", "model_config"], [11, 2, 1, "", "model_type"], [11, 2, 1, "", "result"], [11, 2, 1, "", "successful"], [11, 2, 1, "", "text_too_large"]], "graphai.api.image": [[13, 0, 0, "-", "router"], [14, 0, 0, "-", "schemas"]], "graphai.api.image.router": [[13, 3, 1, "", "calculate_slide_fingerprint"], [13, 3, 1, "", "calculate_slide_fingerprint_status"], [13, 3, 1, "", "detect_ocr_language_status"], [13, 3, 1, "", "extract_text"], [13, 3, 1, "", "extract_text_status"], [13, 3, 1, "", "get_retrieve_image_file_status"], [13, 3, 1, "", "retrieve_image_file"], [13, 3, 1, "", "upload_image_file"]], "graphai.api.image.schemas": [[14, 1, 1, "", "DetectOCRLanguageResponse"], [14, 1, 1, "", "DetectOCRLanguageTaskResponse"], [14, 1, 1, "", "ExtractTextRequest"], [14, 1, 1, "", "ExtractTextResponse"], [14, 1, 1, "", "ExtractTextTaskResponse"], [14, 1, 1, "", "ImageFingerprintRequest"], [14, 1, 1, "", "ImageFingerprintResponse"], [14, 1, 1, "", "ImageFingerprintTaskResponse"], [14, 1, 1, "", "IndividualOCRResult"], [14, 1, 1, "", "RetrieveImageURLRequest"], [14, 1, 1, "", "RetrieveImageURLResponse"], [14, 1, 1, "", "RetrieveImageURLResponseInner"], [14, 1, 1, "", "UploadImageRequest"], [14, 1, 1, "", "UploadedFileOriginInfo"]], "graphai.api.image.schemas.DetectOCRLanguageResponse": [[14, 2, 1, "", "model_config"], [14, 2, 1, "", "task_result"]], "graphai.api.image.schemas.DetectOCRLanguageTaskResponse": [[14, 2, 1, "", "fresh"], [14, 2, 1, "", "language"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "successful"]], "graphai.api.image.schemas.ExtractTextRequest": [[14, 2, 1, "", "force"], [14, 2, 1, "", "gemini_api_token"], [14, 2, 1, "", "google_api_token"], [14, 2, 1, "", "method"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "model_type"], [14, 2, 1, "", "no_cache"], [14, 2, 1, "", "openai_api_token"], [14, 2, 1, "", "pdf_in_pages"], [14, 2, 1, "", "token"]], "graphai.api.image.schemas.ExtractTextResponse": [[14, 2, 1, "", "model_config"], [14, 2, 1, "", "task_result"]], "graphai.api.image.schemas.ExtractTextTaskResponse": [[14, 2, 1, "", "fresh"], [14, 2, 1, "", "language"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "result"], [14, 2, 1, "", "successful"]], "graphai.api.image.schemas.ImageFingerprintRequest": [[14, 2, 1, "", "force"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "token"]], "graphai.api.image.schemas.ImageFingerprintResponse": [[14, 2, 1, "", "model_config"], [14, 2, 1, "", "task_result"]], "graphai.api.image.schemas.ImageFingerprintTaskResponse": [[14, 2, 1, "", "closest_token"], [14, 2, 1, "", "closest_token_origin"], [14, 2, 1, "", "fresh"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "result"], [14, 2, 1, "", "successful"]], "graphai.api.image.schemas.IndividualOCRResult": [[14, 2, 1, "", "method"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "text"]], "graphai.api.image.schemas.RetrieveImageURLRequest": [[14, 2, 1, "", "force"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "no_cache"], [14, 2, 1, "", "url"]], "graphai.api.image.schemas.RetrieveImageURLResponse": [[14, 2, 1, "", "model_config"], [14, 2, 1, "", "task_result"]], "graphai.api.image.schemas.RetrieveImageURLResponseInner": [[14, 2, 1, "", "error"], [14, 2, 1, "", "fresh"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "successful"], [14, 2, 1, "", "token"], [14, 2, 1, "", "token_size"], [14, 2, 1, "", "token_status"]], "graphai.api.image.schemas.UploadImageRequest": [[14, 2, 1, "", "contents"], [14, 2, 1, "", "file_extension"], [14, 2, 1, "", "force"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "no_cache"], [14, 2, 1, "", "origin"], [14, 2, 1, "", "origin_info"]], "graphai.api.image.schemas.UploadedFileOriginInfo": [[14, 2, 1, "", "id"], [14, 2, 1, "", "model_config"], [14, 2, 1, "", "name"]], "graphai.api.main": [[16, 0, 0, "-", "main"]], "graphai.api.main.main": [[16, 3, 1, "", "lifespan"], [16, 3, 1, "", "redirect_docs"]], "graphai.api.ontology": [[18, 0, 0, "-", "router"], [19, 0, 0, "-", "schemas"]], "graphai.api.ontology.router": [[18, 3, 1, "", "break_up_cluster"], [18, 3, 1, "", "cat_info"], [18, 3, 1, "", "cluster_info"], [18, 3, 1, "", "compute_graph_cluster_nearest_category"], [18, 3, 1, "", "compute_graph_concept_nearest_category"], [18, 3, 1, "", "compute_graph_distance"], [18, 3, 1, "", "compute_graph_nearest_concept"], [18, 3, 1, "", "concept_info"], [18, 3, 1, "", "openalex_category_nearest_topics"], [18, 3, 1, "", "openalex_topic_nearest_categories"], [18, 3, 1, "", "recompute_clusters"], [18, 3, 1, "", "recompute_clusters_status"], [18, 3, 1, "", "tree"]], "graphai.api.ontology.schemas": [[19, 1, 1, "", "BreakUpClusterRequest"], [19, 1, 1, "", "BreakUpClustersClusterNumberResponse"], [19, 1, 1, "", "BreakUpClustersResponse"], [19, 1, 1, "", "CategoryDetailsResponse"], [19, 1, 1, "", "CategoryInfoResponse"], [19, 1, 1, "", "ClusterDetailsResponse"], [19, 1, 1, "", "ConceptDetails"], [19, 1, 1, "", "ConceptDetailsSingleResponse"], [19, 1, 1, "", "EmbeddingEnabledNearestEntityResponse"], [19, 1, 1, "", "GraphClusterNearestCategoryRequest"], [19, 1, 1, "", "GraphClusterNearestCategoryResponse"], [19, 1, 1, "", "GraphConceptNearestCategoryRequest"], [19, 1, 1, "", "GraphConceptNearestCategoryResponse"], [19, 1, 1, "", "GraphDistanceRequest"], [19, 1, 1, "", "GraphDistanceResponse"], [19, 1, 1, "", "GraphNearestCategoryRequest"], [19, 1, 1, "", "GraphNearestConceptRequest"], [19, 1, 1, "", "GraphNearestConceptResponse"], [19, 1, 1, "", "NearestCategoryElement"], [19, 1, 1, "", "NearestCategoryElementWithClusters"], [19, 1, 1, "", "NearestClusterElement"], [19, 1, 1, "", "OneConceptResponseElement"], [19, 1, 1, "", "OpenalexCategoryNearestTopicsResponseElem"], [19, 2, 1, "", "OpenalexTopicNearestCategoriesResponseElem"], [19, 1, 1, "", "RecomputeClustersRequest"], [19, 1, 1, "", "RecomputeClustersResponse"], [19, 1, 1, "", "RecomputeClustersTaskResponse"], [19, 1, 1, "", "TreeResponse"], [19, 1, 1, "", "TreeResponseElem"]], "graphai.api.ontology.schemas.BreakUpClusterRequest": [[19, 2, 1, "", "cluster_id"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "n_clusters"]], "graphai.api.ontology.schemas.BreakUpClustersClusterNumberResponse": [[19, 2, 1, "", "clusters"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "n_clusters"]], "graphai.api.ontology.schemas.BreakUpClustersResponse": [[19, 2, 1, "", "model_config"], [19, 2, 1, "", "results"]], "graphai.api.ontology.schemas.CategoryDetailsResponse": [[19, 2, 1, "", "child_categories"], [19, 2, 1, "", "clusters"], [19, 2, 1, "", "concepts"], [19, 2, 1, "", "info"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "parent_category"]], "graphai.api.ontology.schemas.CategoryInfoResponse": [[19, 2, 1, "", "category_id"], [19, 2, 1, "", "depth"], [19, 2, 1, "", "id"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "name"]], "graphai.api.ontology.schemas.ClusterDetailsResponse": [[19, 2, 1, "", "concepts"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "parent"]], "graphai.api.ontology.schemas.ConceptDetails": [[19, 2, 1, "", "id"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "name"]], "graphai.api.ontology.schemas.ConceptDetailsSingleResponse": [[19, 2, 1, "", "branch"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "parent_category"], [19, 2, 1, "", "parent_cluster"]], "graphai.api.ontology.schemas.EmbeddingEnabledNearestEntityResponse": [[19, 2, 1, "", "embeddings_used"], [19, 2, 1, "", "model_config"]], "graphai.api.ontology.schemas.GraphClusterNearestCategoryRequest": [[19, 2, 1, "", "model_config"], [19, 2, 1, "", "src"]], "graphai.api.ontology.schemas.GraphClusterNearestCategoryResponse": [[19, 2, 1, "", "existing_label"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "parent_category"], [19, 2, 1, "", "scores"]], "graphai.api.ontology.schemas.GraphConceptNearestCategoryRequest": [[19, 2, 1, "", "model_config"], [19, 2, 1, "", "return_clusters"], [19, 2, 1, "", "src"]], "graphai.api.ontology.schemas.GraphConceptNearestCategoryResponse": [[19, 2, 1, "", "existing_label"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "parent_category"], [19, 2, 1, "", "scores"], [19, 2, 1, "", "valid"]], "graphai.api.ontology.schemas.GraphDistanceRequest": [[19, 2, 1, "", "avg"], [19, 2, 1, "", "coeffs"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "src"], [19, 2, 1, "", "src_type"], [19, 2, 1, "", "tgt"], [19, 2, 1, "", "tgt_type"]], "graphai.api.ontology.schemas.GraphDistanceResponse": [[19, 2, 1, "", "model_config"], [19, 2, 1, "", "sim"]], "graphai.api.ontology.schemas.GraphNearestCategoryRequest": [[19, 2, 1, "", "avg"], [19, 2, 1, "", "coeffs"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "top_down_search"], [19, 2, 1, "", "top_n"], [19, 2, 1, "", "use_embeddings"]], "graphai.api.ontology.schemas.GraphNearestConceptRequest": [[19, 2, 1, "", "model_config"], [19, 2, 1, "", "src"], [19, 2, 1, "", "top_n"], [19, 2, 1, "", "use_embeddings"]], "graphai.api.ontology.schemas.GraphNearestConceptResponse": [[19, 2, 1, "", "closest"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "scores"]], "graphai.api.ontology.schemas.NearestCategoryElement": [[19, 2, 1, "", "category_id"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "rank"], [19, 2, 1, "", "score"]], "graphai.api.ontology.schemas.NearestCategoryElementWithClusters": [[19, 2, 1, "", "clusters"], [19, 2, 1, "", "model_config"]], "graphai.api.ontology.schemas.NearestClusterElement": [[19, 2, 1, "", "cluster_id"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "rank"], [19, 2, 1, "", "score"]], "graphai.api.ontology.schemas.OneConceptResponseElement": [[19, 2, 1, "", "id"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "name"]], "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem": [[19, 2, 1, "", "category_id"], [19, 2, 1, "", "category_name"], [19, 2, 1, "", "embedding_score"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "score"], [19, 2, 1, "", "topic_id"], [19, 2, 1, "", "topic_name"], [19, 2, 1, "", "wikipedia_score"]], "graphai.api.ontology.schemas.RecomputeClustersRequest": [[19, 2, 1, "", "min_n"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "n_clusters"]], "graphai.api.ontology.schemas.RecomputeClustersResponse": [[19, 2, 1, "", "model_config"], [19, 2, 1, "", "task_result"]], "graphai.api.ontology.schemas.RecomputeClustersTaskResponse": [[19, 2, 1, "", "category_assignments"], [19, 2, 1, "", "impurity_count"], [19, 2, 1, "", "impurity_proportion"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "results"], [19, 2, 1, "", "successful"]], "graphai.api.ontology.schemas.TreeResponse": [[19, 2, 1, "", "child_to_parent"], [19, 2, 1, "", "model_config"]], "graphai.api.ontology.schemas.TreeResponseElem": [[19, 2, 1, "", "child_id"], [19, 2, 1, "", "model_config"], [19, 2, 1, "", "parent_id"]], "graphai.api.retrieval": [[21, 0, 0, "-", "router"], [22, 0, 0, "-", "schemas"]], "graphai.api.retrieval.router": [[21, 3, 1, "", "anonymize_text"], [21, 3, 1, "", "chunk_text"], [21, 3, 1, "", "retrieve_endpoint_info"], [21, 3, 1, "", "retrieve_from_es_index"]], "graphai.api.retrieval.schemas": [[22, 1, 1, "", "AnonymizeRequest"], [22, 1, 1, "", "AnonymizeResponse"], [22, 1, 1, "", "ChunkRequest"], [22, 1, 1, "", "ChunkResponse"], [22, 1, 1, "", "RetrievalIndexType"], [22, 1, 1, "", "RetrievalInfoResponse"], [22, 1, 1, "", "RetrievalRequest"], [22, 1, 1, "", "RetrievalResponse"]], "graphai.api.retrieval.schemas.AnonymizeRequest": [[22, 2, 1, "", "lang"], [22, 2, 1, "", "model_config"], [22, 2, 1, "", "text"]], "graphai.api.retrieval.schemas.AnonymizeResponse": [[22, 2, 1, "", "model_config"], [22, 2, 1, "", "result"], [22, 2, 1, "", "successful"]], "graphai.api.retrieval.schemas.ChunkRequest": [[22, 2, 1, "", "chunk_overlap"], [22, 2, 1, "", "chunk_size"], [22, 2, 1, "", "model_config"], [22, 2, 1, "", "one_chunk_per_doc"], [22, 2, 1, "", "one_chunk_per_page"], [22, 2, 1, "", "text"]], "graphai.api.retrieval.schemas.ChunkResponse": [[22, 2, 1, "", "full"], [22, 2, 1, "", "model_config"], [22, 2, 1, "", "split"]], "graphai.api.retrieval.schemas.RetrievalIndexType": [[22, 2, 1, "", "filters"], [22, 2, 1, "", "index"], [22, 2, 1, "", "model_config"]], "graphai.api.retrieval.schemas.RetrievalInfoResponse": [[22, 2, 1, "", "indexes"], [22, 2, 1, "", "model_config"]], "graphai.api.retrieval.schemas.RetrievalRequest": [[22, 2, 1, "", "filter_by_date"], [22, 2, 1, "", "filters"], [22, 2, 1, "", "index"], [22, 2, 1, "", "limit"], [22, 2, 1, "", "model_config"], [22, 2, 1, "", "return_scores"], [22, 2, 1, "", "text"]], "graphai.api.retrieval.schemas.RetrievalResponse": [[22, 2, 1, "", "model_config"], [22, 2, 1, "", "n_results"], [22, 2, 1, "", "result"], [22, 2, 1, "", "successful"]], "graphai.api.scraping": [[24, 0, 0, "-", "router"], [25, 0, 0, "-", "schemas"]], "graphai.api.scraping.router": [[24, 3, 1, "", "extract_page_content"], [24, 3, 1, "", "extract_page_content_status"], [24, 3, 1, "", "extract_sublinks"], [24, 3, 1, "", "extract_sublinks_status"]], "graphai.api.scraping.schemas": [[25, 1, 1, "", "ExtractContentRequest"], [25, 1, 1, "", "ExtractContentResponse"], [25, 1, 1, "", "ExtractContentTaskResponse"], [25, 1, 1, "", "GetSublinksRequest"], [25, 1, 1, "", "GetSublinksResponse"], [25, 1, 1, "", "GetSublinksTaskResponse"]], "graphai.api.scraping.schemas.ExtractContentRequest": [[25, 2, 1, "", "model_config"], [25, 2, 1, "", "remove_headers"], [25, 2, 1, "", "remove_long_patterns"]], "graphai.api.scraping.schemas.ExtractContentResponse": [[25, 2, 1, "", "model_config"], [25, 2, 1, "", "task_result"]], "graphai.api.scraping.schemas.ExtractContentTaskResponse": [[25, 2, 1, "", "data"], [25, 2, 1, "", "model_config"]], "graphai.api.scraping.schemas.GetSublinksRequest": [[25, 2, 1, "", "force"], [25, 2, 1, "", "model_config"], [25, 2, 1, "", "url"]], "graphai.api.scraping.schemas.GetSublinksResponse": [[25, 2, 1, "", "model_config"], [25, 2, 1, "", "task_result"]], "graphai.api.scraping.schemas.GetSublinksTaskResponse": [[25, 2, 1, "", "fresh"], [25, 2, 1, "", "model_config"], [25, 2, 1, "", "status_msg"], [25, 2, 1, "", "sublinks"], [25, 2, 1, "", "successful"], [25, 2, 1, "", "token"], [25, 2, 1, "", "validated_url"]], "graphai.api.text": [[27, 0, 0, "-", "router"], [28, 0, 0, "-", "schemas"]], "graphai.api.text.router": [[27, 3, 1, "", "generate_exercise"], [27, 3, 1, "", "keywords"], [27, 3, 1, "", "wikify"], [27, 3, 1, "", "wikify_graph_svg"], [27, 3, 1, "", "wikify_ontology_svg"]], "graphai.api.text.schemas": [[28, 1, 1, "", "GenerateLectureExerciseRequest"], [28, 1, 1, "", "GenerateTextExerciseRequest"], [28, 1, 1, "", "KeywordsRequest"], [28, 1, 1, "", "WikifyFromKeywordsRequest"], [28, 1, 1, "", "WikifyFromRawTextRequest"], [28, 1, 1, "", "WikifyResponseElem"]], "graphai.api.text.schemas.GenerateLectureExerciseRequest": [[28, 2, 1, "", "bloom_level"], [28, 2, 1, "", "description"], [28, 2, 1, "", "include_solution"], [28, 2, 1, "", "lecture_id"], [28, 2, 1, "", "llm_model"], [28, 2, 1, "", "model_config"], [28, 2, 1, "", "openai_api_key"], [28, 2, 1, "", "output_format"]], "graphai.api.text.schemas.GenerateTextExerciseRequest": [[28, 2, 1, "", "bloom_level"], [28, 2, 1, "", "description"], [28, 2, 1, "", "include_solution"], [28, 2, 1, "", "llm_model"], [28, 2, 1, "", "model_config"], [28, 2, 1, "", "openai_api_key"], [28, 2, 1, "", "output_format"], [28, 2, 1, "", "text"]], "graphai.api.text.schemas.KeywordsRequest": [[28, 2, 1, "", "model_config"], [28, 2, 1, "", "raw_text"]], "graphai.api.text.schemas.WikifyFromKeywordsRequest": [[28, 2, 1, "", "keywords"], [28, 2, 1, "", "model_config"]], "graphai.api.text.schemas.WikifyFromRawTextRequest": [[28, 2, 1, "", "model_config"], [28, 2, 1, "", "raw_text"]], "graphai.api.text.schemas.WikifyResponseElem": [[28, 2, 1, "", "concept_id"], [28, 2, 1, "", "concept_name"], [28, 2, 1, "", "embedding_global_score"], [28, 2, 1, "", "embedding_keywords_score"], [28, 2, 1, "", "embedding_local_score"], [28, 2, 1, "", "graph_keywords_score"], [28, 2, 1, "", "graph_score"], [28, 2, 1, "", "levenshtein_score"], [28, 2, 1, "", "mixed_score"], [28, 2, 1, "", "model_config"], [28, 2, 1, "", "ontology_global_score"], [28, 2, 1, "", "ontology_keywords_score"], [28, 2, 1, "", "ontology_local_score"], [28, 2, 1, "", "search_score"]], "graphai.api.translation": [[30, 0, 0, "-", "router"], [31, 0, 0, "-", "schemas"]], "graphai.api.translation.router": [[30, 3, 1, "", "calculate_translation_text_fingerprint"], [30, 3, 1, "", "calculate_translation_text_fingerprint_status"], [30, 3, 1, "", "text_detect_language"], [30, 3, 1, "", "text_detect_language_status"], [30, 3, 1, "", "translate"], [30, 3, 1, "", "translate_status"]], "graphai.api.translation.schemas": [[31, 1, 1, "", "TextDetectLanguageRequest"], [31, 1, 1, "", "TextDetectLanguageResponse"], [31, 1, 1, "", "TextDetectLanguageTaskResponse"], [31, 1, 1, "", "TextFingerprintResponse"], [31, 1, 1, "", "TextFingerprintTaskResponse"], [31, 1, 1, "", "TranslationRequest"], [31, 1, 1, "", "TranslationResponse"], [31, 1, 1, "", "TranslationTaskResponse"]], "graphai.api.translation.schemas.TextDetectLanguageRequest": [[31, 2, 1, "", "model_config"], [31, 2, 1, "", "text"]], "graphai.api.translation.schemas.TextDetectLanguageResponse": [[31, 2, 1, "", "model_config"], [31, 2, 1, "", "task_result"]], "graphai.api.translation.schemas.TextDetectLanguageTaskResponse": [[31, 2, 1, "", "language"], [31, 2, 1, "", "model_config"], [31, 2, 1, "", "successful"]], "graphai.api.translation.schemas.TextFingerprintResponse": [[31, 2, 1, "", "model_config"], [31, 2, 1, "", "task_result"]], "graphai.api.translation.schemas.TextFingerprintTaskResponse": [[31, 2, 1, "", "fresh"], [31, 2, 1, "", "model_config"], [31, 2, 1, "", "result"], [31, 2, 1, "", "successful"]], "graphai.api.translation.schemas.TranslationRequest": [[31, 2, 1, "", "force"], [31, 2, 1, "", "model_config"], [31, 2, 1, "", "no_cache"], [31, 2, 1, "", "skip_segmentation"], [31, 2, 1, "", "source"], [31, 2, 1, "", "target"], [31, 2, 1, "", "text"]], "graphai.api.translation.schemas.TranslationResponse": [[31, 2, 1, "", "model_config"], [31, 2, 1, "", "task_result"]], "graphai.api.translation.schemas.TranslationTaskResponse": [[31, 2, 1, "", "device"], [31, 2, 1, "", "fresh"], [31, 2, 1, "", "model_config"], [31, 2, 1, "", "result"], [31, 2, 1, "", "successful"], [31, 2, 1, "", "text_too_large"]], "graphai.api.video": [[33, 0, 0, "-", "router"], [34, 0, 0, "-", "schemas"]], "graphai.api.video.router": [[33, 3, 1, "", "calculate_video_fingerprint"], [33, 3, 1, "", "calculate_video_fingerprint_status"], [33, 3, 1, "", "detect_slides"], [33, 3, 1, "", "detect_slides_status"], [33, 3, 1, "", "extract_audio"], [33, 3, 1, "", "extract_audio_status"], [33, 3, 1, "", "get_file"], [33, 3, 1, "", "get_retrieve_file_status"], [33, 3, 1, "", "retrieve_file"]], "graphai.api.video.schemas": [[34, 1, 1, "", "DetectSlidesRequest"], [34, 1, 1, "", "DetectSlidesResponse"], [34, 1, 1, "", "DetectSlidesTaskResponse"], [34, 1, 1, "", "ExtractAudioRequest"], [34, 1, 1, "", "ExtractAudioResponse"], [34, 1, 1, "", "ExtractAudioTaskResponse"], [34, 1, 1, "", "RetrieveURLRequest"], [34, 1, 1, "", "RetrieveURLResponse"], [34, 1, 1, "", "RetrieveURLResponseInner"], [34, 1, 1, "", "SlideDetectionParams"], [34, 1, 1, "", "SlideTokenAndTimeStamp"], [34, 1, 1, "", "VideoFingerprintRequest"], [34, 1, 1, "", "VideoFingerprintResponse"], [34, 1, 1, "", "VideoFingerprintTaskResponse"], [34, 1, 1, "", "VideoStreamInfo"], [34, 1, 1, "", "VideoTokenStatus"]], "graphai.api.video.schemas.DetectSlidesRequest": [[34, 2, 1, "", "force"], [34, 2, 1, "", "language"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "parameters"], [34, 2, 1, "", "recalculate_cached"], [34, 2, 1, "", "token"]], "graphai.api.video.schemas.DetectSlidesResponse": [[34, 2, 1, "", "model_config"], [34, 2, 1, "", "task_result"]], "graphai.api.video.schemas.DetectSlidesTaskResponse": [[34, 2, 1, "", "fresh"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "slide_tokens"], [34, 2, 1, "", "successful"]], "graphai.api.video.schemas.ExtractAudioRequest": [[34, 2, 1, "", "force"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "recalculate_cached"], [34, 2, 1, "", "token"]], "graphai.api.video.schemas.ExtractAudioResponse": [[34, 2, 1, "", "model_config"], [34, 2, 1, "", "task_result"]], "graphai.api.video.schemas.ExtractAudioTaskResponse": [[34, 2, 1, "", "duration"], [34, 2, 1, "", "fresh"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "successful"], [34, 2, 1, "", "token"], [34, 2, 1, "", "token_status"]], "graphai.api.video.schemas.RetrieveURLRequest": [[34, 2, 1, "", "force"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "playlist"], [34, 2, 1, "", "url"]], "graphai.api.video.schemas.RetrieveURLResponse": [[34, 2, 1, "", "model_config"], [34, 2, 1, "", "task_result"]], "graphai.api.video.schemas.RetrieveURLResponseInner": [[34, 2, 1, "", "fresh"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "successful"], [34, 2, 1, "", "token"], [34, 2, 1, "", "token_size"], [34, 2, 1, "", "token_status"]], "graphai.api.video.schemas.SlideDetectionParams": [[34, 2, 1, "", "default_threshold"], [34, 2, 1, "", "hash_thresh"], [34, 2, 1, "", "include_first"], [34, 2, 1, "", "include_last"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "multiplier"]], "graphai.api.video.schemas.SlideTokenAndTimeStamp": [[34, 2, 1, "", "model_config"], [34, 2, 1, "", "timestamp"], [34, 2, 1, "", "token"], [34, 2, 1, "", "token_status"]], "graphai.api.video.schemas.VideoFingerprintRequest": [[34, 2, 1, "", "force"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "token"]], "graphai.api.video.schemas.VideoFingerprintResponse": [[34, 2, 1, "", "model_config"], [34, 2, 1, "", "task_result"]], "graphai.api.video.schemas.VideoFingerprintTaskResponse": [[34, 2, 1, "", "closest_token"], [34, 2, 1, "", "fresh"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "result"], [34, 2, 1, "", "successful"]], "graphai.api.video.schemas.VideoStreamInfo": [[34, 2, 1, "", "bit_rate"], [34, 2, 1, "", "codec_name"], [34, 2, 1, "", "codec_type"], [34, 2, 1, "", "duration"], [34, 2, 1, "", "model_config"], [34, 2, 1, "", "resolution"], [34, 2, 1, "", "sample_rate"]], "graphai.api.video.schemas.VideoTokenStatus": [[34, 2, 1, "", "model_config"], [34, 2, 1, "", "streams"]], "graphai.api.voice": [[36, 0, 0, "-", "router"], [37, 0, 0, "-", "schemas"]], "graphai.api.voice.router": [[36, 3, 1, "", "calculate_audio_fingerprint"], [36, 3, 1, "", "calculate_audio_fingerprint_status"], [36, 3, 1, "", "detect_language"], [36, 3, 1, "", "detect_language_status"], [36, 3, 1, "", "transcribe"], [36, 3, 1, "", "transcribe_status"]], "graphai.api.voice.schemas": [[37, 1, 1, "", "AudioDetectLanguageRequest"], [37, 1, 1, "", "AudioDetectLanguageResponse"], [37, 1, 1, "", "AudioDetectLanguageTaskResponse"], [37, 1, 1, "", "AudioFingerprintRequest"], [37, 1, 1, "", "AudioFingerprintResponse"], [37, 1, 1, "", "AudioFingerprintTaskResponse"], [37, 1, 1, "", "AudioTranscriptionRequest"], [37, 1, 1, "", "AudioTranscriptionResponse"], [37, 1, 1, "", "AudioTranscriptionTaskResponse"]], "graphai.api.voice.schemas.AudioDetectLanguageRequest": [[37, 2, 1, "", "force"], [37, 2, 1, "", "model_config"], [37, 2, 1, "", "token"]], "graphai.api.voice.schemas.AudioDetectLanguageResponse": [[37, 2, 1, "", "model_config"], [37, 2, 1, "", "task_result"]], "graphai.api.voice.schemas.AudioDetectLanguageTaskResponse": [[37, 2, 1, "", "fresh"], [37, 2, 1, "", "language"], [37, 2, 1, "", "model_config"]], "graphai.api.voice.schemas.AudioFingerprintRequest": [[37, 2, 1, "", "force"], [37, 2, 1, "", "model_config"], [37, 2, 1, "", "token"]], "graphai.api.voice.schemas.AudioFingerprintResponse": [[37, 2, 1, "", "model_config"], [37, 2, 1, "", "task_result"]], "graphai.api.voice.schemas.AudioFingerprintTaskResponse": [[37, 2, 1, "", "closest_token"], [37, 2, 1, "", "closest_token_origin"], [37, 2, 1, "", "duration"], [37, 2, 1, "", "fresh"], [37, 2, 1, "", "model_config"], [37, 2, 1, "", "result"], [37, 2, 1, "", "successful"]], "graphai.api.voice.schemas.AudioTranscriptionRequest": [[37, 2, 1, "", "force"], [37, 2, 1, "", "force_lang"], [37, 2, 1, "", "model_config"], [37, 2, 1, "", "strict"], [37, 2, 1, "", "token"]], "graphai.api.voice.schemas.AudioTranscriptionResponse": [[37, 2, 1, "", "model_config"], [37, 2, 1, "", "task_result"]], "graphai.api.voice.schemas.AudioTranscriptionTaskResponse": [[37, 2, 1, "", "fresh"], [37, 2, 1, "", "language"], [37, 2, 1, "", "model_config"], [37, 2, 1, "", "subtitle_results"], [37, 2, 1, "", "transcript_results"]], "graphai.celery": [[39, 0, 0, "-", "common"], [45, 0, 0, "-", "embedding"], [48, 0, 0, "-", "image"], [51, 0, 0, "-", "ontology"], [54, 0, 0, "-", "retrieval"], [57, 0, 0, "-", "scraping"], [60, 0, 0, "-", "text"], [63, 0, 0, "-", "translation"], [66, 0, 0, "-", "video"], [69, 0, 0, "-", "voice"]], "graphai.celery.common": [[40, 0, 0, "-", "celery_config"], [41, 0, 0, "-", "celery_tools"], [42, 0, 0, "-", "jobs"], [43, 0, 0, "-", "log"], [44, 0, 0, "-", "tasks"]], "graphai.celery.common.celery_config": [[40, 1, 1, "", "BaseConfig"], [40, 1, 1, "", "DevelopmentConfig"], [40, 3, 1, "", "create_celery"], [40, 3, 1, "", "get_celery_task"], [40, 3, 1, "", "get_settings"], [40, 3, 1, "", "get_task_info"], [40, 3, 1, "", "route_task"]], "graphai.celery.common.celery_tools": [[41, 3, 1, "", "get_n_celery_workers"]], "graphai.celery.common.jobs": [[42, 3, 1, "", "direct_lookup_generic_job"]], "graphai.celery.common.log": [[43, 3, 1, "", "log"]], "graphai.celery.embedding": [[46, 0, 0, "-", "jobs"], [47, 0, 0, "-", "tasks"]], "graphai.celery.embedding.jobs": [[46, 3, 1, "", "embedding_job"], [46, 3, 1, "", "fingerprint_compute_job"], [46, 3, 1, "", "fingerprint_job"], [46, 3, 1, "", "fingerprint_lookup_job"], [46, 3, 1, "", "get_embedding_text_fingerprint_chain_list"]], "graphai.celery.image": [[49, 0, 0, "-", "jobs"], [50, 0, 0, "-", "tasks"]], "graphai.celery.image.jobs": [[49, 3, 1, "", "fingerprint_job"], [49, 3, 1, "", "fingerprint_lookup_job"], [49, 3, 1, "", "ocr_job"], [49, 3, 1, "", "retrieve_image_from_url_job"], [49, 3, 1, "", "upload_image_from_file_job"]], "graphai.celery.ontology": [[52, 0, 0, "-", "jobs"], [53, 0, 0, "-", "tasks"]], "graphai.celery.ontology.jobs": [[52, 3, 1, "", "breakup_cluster_job"], [52, 3, 1, "", "category_info_job"], [52, 3, 1, "", "cluster_info_job"], [52, 3, 1, "", "cluster_nearest_category_job"], [52, 3, 1, "", "concept_info_job"], [52, 3, 1, "", "concept_nearest_category_job"], [52, 3, 1, "", "concept_nearest_concept_job"], [52, 3, 1, "", "graph_distance_job"], [52, 3, 1, "", "openalex_category_nearest_topics_job"], [52, 3, 1, "", "openalex_topic_nearest_categories_job"], [52, 3, 1, "", "recompute_clusters_job"], [52, 3, 1, "", "tree_job"]], "graphai.celery.retrieval": [[55, 0, 0, "-", "jobs"], [56, 0, 0, "-", "tasks"]], "graphai.celery.retrieval.jobs": [[55, 3, 1, "", "anonymize_text_job"], [55, 3, 1, "", "chunk_text_job"], [55, 3, 1, "", "retrieve_from_es_job"]], "graphai.celery.scraping": [[58, 0, 0, "-", "jobs"], [59, 0, 0, "-", "tasks"]], "graphai.celery.scraping.jobs": [[58, 3, 1, "", "extract_content_job"], [58, 3, 1, "", "extract_sublinks_job"], [58, 3, 1, "", "sublink_lookup_job"]], "graphai.celery.text": [[61, 0, 0, "-", "jobs"], [62, 0, 0, "-", "tasks"]], "graphai.celery.text.jobs": [[61, 3, 1, "", "generate_exercise"], [61, 3, 1, "", "keywords"], [61, 3, 1, "", "wikify_graph_svg"], [61, 3, 1, "", "wikify_keywords"], [61, 3, 1, "", "wikify_ontology_svg"], [61, 3, 1, "", "wikify_text"]], "graphai.celery.translation": [[64, 0, 0, "-", "jobs"], [65, 0, 0, "-", "tasks"]], "graphai.celery.translation.jobs": [[64, 3, 1, "", "detect_text_language_job"], [64, 3, 1, "", "fingerprint_compute_job"], [64, 3, 1, "", "fingerprint_job"], [64, 3, 1, "", "fingerprint_lookup_job"], [64, 3, 1, "", "get_translation_text_fingerprint_chain_list"], [64, 3, 1, "", "translation_job"]], "graphai.celery.video": [[67, 0, 0, "-", "jobs"], [68, 0, 0, "-", "tasks"]], "graphai.celery.video.jobs": [[67, 3, 1, "", "detect_slides_job"], [67, 3, 1, "", "extract_audio_job"], [67, 3, 1, "", "fingerprint_job"], [67, 3, 1, "", "fingerprint_lookup_job"], [67, 3, 1, "", "get_audio_fingerprint_chain_list"], [67, 3, 1, "", "get_file_job"], [67, 3, 1, "", "get_slide_fingerprint_chain_list"], [67, 3, 1, "", "get_video_fingerprint_chain_list"], [67, 3, 1, "", "retrieve_url_job"]], "graphai.celery.voice": [[70, 0, 0, "-", "jobs"], [71, 0, 0, "-", "tasks"]], "graphai.celery.voice.jobs": [[70, 3, 1, "", "detect_language_job"], [70, 3, 1, "", "fingerprint_job"], [70, 3, 1, "", "fingerprint_lookup_job"], [70, 3, 1, "", "get_audio_language_detection_task_chain"], [70, 3, 1, "", "language_lookup_job"], [70, 3, 1, "", "transcribe_job"]], "graphai.core": [[73, 0, 0, "-", "common"], [80, 0, 0, "-", "embedding"], [82, 0, 0, "-", "image"], [85, 0, 0, "-", "ontology"], [90, 0, 0, "-", "retrieval"], [94, 0, 0, "-", "scraping"], [96, 0, 0, "-", "text"], [104, 0, 0, "-", "translation"], [107, 0, 0, "-", "utils"], [116, 0, 0, "-", "video"], [119, 0, 0, "-", "voice"]], "graphai.core.common": [[74, 0, 0, "-", "caching"], [75, 0, 0, "-", "common_utils"], [76, 0, 0, "-", "config"], [77, 0, 0, "-", "fingerprinting"], [78, 0, 0, "-", "lookup"], [79, 0, 0, "-", "multimedia_utils"]], "graphai.core.common.caching": [[74, 1, 1, "", "AudioDBCachingManager"], [74, 1, 1, "", "EmbeddingDBCachingManager"], [74, 1, 1, "", "FingerprintParameters"], [74, 1, 1, "", "ScrapingDBCachingManager"], [74, 1, 1, "", "SlideDBCachingManager"], [74, 1, 1, "", "TextDBCachingManager"], [74, 1, 1, "", "VideoConfig"], [74, 1, 1, "", "VideoDBCachingManager"], [74, 3, 1, "", "create_symlink_between_paths"], [74, 3, 1, "", "delete_file"], [74, 3, 1, "", "get_token_file_status"], [74, 3, 1, "", "write_binary_file_to_token"]], "graphai.core.common.caching.AudioDBCachingManager": [[74, 4, 1, "", "init_db"]], "graphai.core.common.caching.EmbeddingDBCachingManager": [[74, 4, 1, "", "init_db"]], "graphai.core.common.caching.FingerprintParameters": [[74, 4, 1, "", "get_min_sim_audio"], [74, 4, 1, "", "get_min_sim_image"], [74, 4, 1, "", "get_min_sim_video"], [74, 4, 1, "", "load_values"]], "graphai.core.common.caching.ScrapingDBCachingManager": [[74, 4, 1, "", "get_details_using_origin"], [74, 4, 1, "", "init_db"]], "graphai.core.common.caching.SlideDBCachingManager": [[74, 4, 1, "", "init_db"]], "graphai.core.common.caching.TextDBCachingManager": [[74, 4, 1, "", "init_db"]], "graphai.core.common.caching.VideoConfig": [[74, 4, 1, "", "concat_file_path"], [74, 4, 1, "", "create_symlink"], [74, 4, 1, "", "generate_filepath"], [74, 4, 1, "", "get_audio_dir"], [74, 4, 1, "", "get_image_dir"], [74, 4, 1, "", "get_root_dir"], [74, 4, 1, "", "get_transcript_dir"], [74, 4, 1, "", "get_video_dir"]], "graphai.core.common.caching.VideoDBCachingManager": [[74, 4, 1, "", "init_db"]], "graphai.core.common.common_utils": [[75, 3, 1, "", "convert_list_to_text"], [75, 3, 1, "", "convert_text_back_to_list"], [75, 3, 1, "", "copy_file_within_folder"], [75, 3, 1, "", "file_exists"], [75, 3, 1, "", "format_datetime_for_mysql"], [75, 3, 1, "", "generate_random_token"], [75, 3, 1, "", "get_current_datetime"], [75, 3, 1, "", "get_file_size"], [75, 3, 1, "", "get_most_common_element"], [75, 3, 1, "", "invert_dict"], [75, 3, 1, "", "is_effective_url"], [75, 3, 1, "", "is_pdf"], [75, 3, 1, "", "is_token"], [75, 3, 1, "", "is_url"], [75, 3, 1, "", "make_sure_path_exists"], [75, 3, 1, "", "parse_mysql_datetime"], [75, 3, 1, "", "read_json_file"], [75, 3, 1, "", "read_text_file"], [75, 3, 1, "", "retrieve_generic_file_from_generic_url"], [75, 3, 1, "", "strtobool"], [75, 3, 1, "", "write_json_file"], [75, 3, 1, "", "write_text_file"]], "graphai.core.common.fingerprinting": [[77, 3, 1, "", "compare_decoded_fingerprints"], [77, 3, 1, "", "compare_encoded_fingerprints"], [77, 3, 1, "", "compute_text_fingerprint"], [77, 3, 1, "", "find_closest_audio_fingerprint_from_list"], [77, 3, 1, "", "find_closest_fingerprint_for_list_from_list"], [77, 3, 1, "", "find_closest_fingerprint_from_list"], [77, 3, 1, "", "find_closest_image_fingerprint_from_list"], [77, 3, 1, "", "find_closest_text_fingerprint_from_list"], [77, 3, 1, "", "md5_text"], [77, 3, 1, "", "md5_video_or_audio"], [77, 3, 1, "", "perceptual_hash_audio"], [77, 3, 1, "", "perceptual_hash_image"], [77, 3, 1, "", "perceptual_hash_pdf"], [77, 3, 1, "", "perceptual_hash_text"]], "graphai.core.common.lookup": [[78, 3, 1, "", "add_token_status_to_results"], [78, 3, 1, "", "cache_lookup_generic"], [78, 3, 1, "", "database_callback_generic"], [78, 3, 1, "", "fingerprint_based_text_lookup"], [78, 3, 1, "", "fingerprint_cache_lookup"], [78, 3, 1, "", "fingerprint_cache_lookup_with_most_similar"], [78, 3, 1, "", "fingerprint_lookup_callback"], [78, 3, 1, "", "fingerprint_lookup_direct"], [78, 3, 1, "", "fingerprint_lookup_parallel"], [78, 3, 1, "", "fingerprint_lookup_retrieve_from_db"], [78, 3, 1, "", "ignore_fingerprint_results_callback"], [78, 3, 1, "", "is_fingerprinted"], [78, 3, 1, "", "lookup_latest_allowed_date"], [78, 3, 1, "", "retrieve_fingerprint_callback"], [78, 3, 1, "", "token_based_text_lookup"]], "graphai.core.common.multimedia_utils": [[79, 3, 1, "", "detect_text_language"], [79, 3, 1, "", "get_audio_token_status"], [79, 3, 1, "", "get_available_streams"], [79, 3, 1, "", "get_image_token_status"], [79, 3, 1, "", "get_video_token_status"], [79, 3, 1, "", "perform_probe"], [79, 3, 1, "", "perform_tesseract_ocr"]], "graphai.core.embedding": [[81, 0, 0, "-", "embedding"]], "graphai.core.embedding.embedding": [[81, 1, 1, "", "EmbeddingModels"], [81, 3, 1, "", "compute_embedding_text_fingerprint_callback"], [81, 3, 1, "", "copy_embedding_object"], [81, 3, 1, "", "embed_text"], [81, 3, 1, "", "embedding_from_json"], [81, 3, 1, "", "embedding_text_list_dummy_fingerprint_parallel"], [81, 3, 1, "", "embedding_text_list_embed_callback"], [81, 3, 1, "", "embedding_text_list_embed_jsonify_callback"], [81, 3, 1, "", "embedding_text_list_embed_parallel"], [81, 3, 1, "", "embedding_text_list_fingerprint_callback"], [81, 3, 1, "", "embedding_text_list_fingerprint_parallel"], [81, 3, 1, "", "embedding_to_json"], [81, 3, 1, "", "fingerprint_based_embedding_lookup"], [81, 3, 1, "", "generate_embedding_text_token"], [81, 3, 1, "", "get_text_token_count_using_model"], [81, 3, 1, "", "insert_embedding_into_db"], [81, 3, 1, "", "jsonify_embedding_results"], [81, 3, 1, "", "token_based_embedding_lookup"]], "graphai.core.embedding.embedding.EmbeddingModels": [[81, 4, 1, "", "embed"], [81, 4, 1, "", "get_device"], [81, 4, 1, "", "get_last_usage"], [81, 4, 1, "", "get_max_tokens"], [81, 4, 1, "", "get_token_count"], [81, 4, 1, "", "get_tokenizer"], [81, 4, 1, "", "load_model"], [81, 4, 1, "", "load_models"], [81, 4, 1, "", "model_loaded"], [81, 4, 1, "", "set_tokenizer"], [81, 4, 1, "", "unload_model"]], "graphai.core.image": [[83, 0, 0, "-", "image"], [84, 0, 0, "-", "ocr"]], "graphai.core.image.image": [[83, 3, 1, "", "break_pdf_into_images"], [83, 3, 1, "", "cache_lookup_extract_slide_text"], [83, 3, 1, "", "cache_lookup_retrieve_image_from_url"], [83, 3, 1, "", "collect_multi_image_ocr"], [83, 3, 1, "", "create_image_filename_using_url_format"], [83, 3, 1, "", "create_origin_token_using_info"], [83, 3, 1, "", "extract_multi_image_text"], [83, 3, 1, "", "extract_slide_text"], [83, 3, 1, "", "extract_slide_text_callback"], [83, 3, 1, "", "perform_ocr"], [83, 3, 1, "", "retrieve_image_file_from_url"], [83, 3, 1, "", "retrieve_image_file_from_url_callback"], [83, 3, 1, "", "upload_image_from_file"]], "graphai.core.image.ocr": [[84, 1, 1, "", "AbstractOCRModel"], [84, 1, 1, "", "GeminiOCRModel"], [84, 1, 1, "", "GoogleOCRModel"], [84, 1, 1, "", "ImgToBase64Converter"], [84, 1, 1, "", "OpenAIOCRModel"], [84, 3, 1, "", "cleanup_json"], [84, 3, 1, "", "get_ocr_colnames"], [84, 3, 1, "", "is_valid_latex"], [84, 3, 1, "", "perform_tesseract_ocr_on_pdf"]], "graphai.core.image.ocr.AbstractOCRModel": [[84, 4, 1, "", "establish_connection"], [84, 4, 1, "", "perform_ocr"]], "graphai.core.image.ocr.GeminiOCRModel": [[84, 4, 1, "", "perform_ocr"]], "graphai.core.image.ocr.GoogleOCRModel": [[84, 4, 1, "", "perform_ocr"], [84, 4, 1, "", "wait_for_ocr_results"]], "graphai.core.image.ocr.ImgToBase64Converter": [[84, 4, 1, "", "get_base64"]], "graphai.core.image.ocr.OpenAIOCRModel": [[84, 4, 1, "", "perform_ocr"]], "graphai.core.ontology": [[85, 1, 1, "", "OntologyData"], [85, 3, 1, "", "break_up_cluster"], [86, 0, 0, "-", "clustering"], [87, 0, 0, "-", "data"], [85, 3, 1, "", "get_cluster_category_closest"], [85, 3, 1, "", "get_concept_category_closest"], [85, 3, 1, "", "get_concept_concept_closest"], [85, 3, 1, "", "get_openalex_nearest"], [88, 0, 0, "-", "ontology"], [89, 0, 0, "-", "openalex"], [85, 3, 1, "", "recompute_clusters"]], "graphai.core.ontology.OntologyData": [[85, 4, 1, "", "compute_precalculated_similarity_matrices"], [85, 4, 1, "", "compute_symmetric_concept_concept_matrix"], [85, 4, 1, "", "generate_category_concept_dict"], [85, 4, 1, "", "generate_tree_structure"], [85, 4, 1, "", "get_category_anchor_pages"], [85, 4, 1, "", "get_category_branch"], [85, 4, 1, "", "get_category_category_similarity"], [85, 4, 1, "", "get_category_children"], [85, 4, 1, "", "get_category_closest_category"], [85, 4, 1, "", "get_category_cluster_list"], [85, 4, 1, "", "get_category_cluster_table"], [85, 4, 1, "", "get_category_concept_list"], [85, 4, 1, "", "get_category_concept_table"], [85, 4, 1, "", "get_category_parent"], [85, 4, 1, "", "get_category_to_category"], [85, 4, 1, "", "get_cluster_category_similarity"], [85, 4, 1, "", "get_cluster_children"], [85, 4, 1, "", "get_cluster_closest_category"], [85, 4, 1, "", "get_cluster_closest_category_embedding"], [85, 4, 1, "", "get_cluster_cluster_similarity"], [85, 4, 1, "", "get_cluster_concept_list"], [85, 4, 1, "", "get_cluster_concepts"], [85, 4, 1, "", "get_cluster_parent"], [85, 4, 1, "", "get_concept_category_closest_embedding"], [85, 4, 1, "", "get_concept_category_similarity"], [85, 4, 1, "", "get_concept_closest_category"], [85, 4, 1, "", "get_concept_closest_concept"], [85, 4, 1, "", "get_concept_closest_concept_embedding"], [85, 4, 1, "", "get_concept_cluster_similarity"], [85, 4, 1, "", "get_concept_concept_graphscore_table"], [85, 4, 1, "", "get_concept_concept_similarity"], [85, 4, 1, "", "get_concept_name"], [85, 4, 1, "", "get_concept_names_list"], [85, 4, 1, "", "get_concept_parent_category"], [85, 4, 1, "", "get_concept_parent_cluster"], [85, 4, 1, "", "get_custom_cluster_closest_category"], [85, 4, 1, "", "get_custom_cluster_closest_category_embedding"], [85, 4, 1, "", "get_non_ontology_concept_names"], [85, 4, 1, "", "get_ontology_category_info"], [85, 4, 1, "", "get_ontology_category_names"], [85, 4, 1, "", "get_ontology_concept_names_table"], [85, 4, 1, "", "get_root_category"], [85, 4, 1, "", "get_test_category_concept"], [85, 4, 1, "", "get_test_cluster_concept"], [85, 4, 1, "", "get_test_concept_names"], [85, 4, 1, "", "load_anchor_page_dict"], [85, 4, 1, "", "load_category_category"], [85, 4, 1, "", "load_category_concept"], [85, 4, 1, "", "load_concept_concept_graphscore"], [85, 4, 1, "", "load_data"], [85, 4, 1, "", "load_non_ontology_concept_names"], [85, 4, 1, "", "load_ontology_categories"], [85, 4, 1, "", "load_ontology_concept_names"]], "graphai.core.ontology.clustering": [[86, 3, 1, "", "arithmetic_mean_laplacians"], [86, 3, 1, "", "assign_to_categories_using_existing"], [86, 3, 1, "", "cluster_and_reassign_outliers"], [86, 3, 1, "", "cluster_using_embedding"], [86, 3, 1, "", "combine_and_embed_laplacian"], [86, 3, 1, "", "combine_laplacians"], [86, 3, 1, "", "compute_all_graphs_from_scratch"], [86, 3, 1, "", "convert_cluster_labels_to_dict"], [86, 3, 1, "", "davies_bouldin_eval"], [86, 3, 1, "", "get_laplacian"], [86, 3, 1, "", "group_clustered"], [86, 3, 1, "", "normalize_features"], [86, 3, 1, "", "perform_PCA"], [86, 3, 1, "", "perform_constrained_agglomerative"], [86, 3, 1, "", "precompute_clustering_metric"], [86, 3, 1, "", "reassign_outliers"], [86, 3, 1, "", "spec_embed_on_laplacian"], [86, 3, 1, "", "sum_laplacians"], [86, 3, 1, "", "variance_ratio_eval"]], "graphai.core.ontology.data": [[87, 1, 1, "", "OntologyData"], [87, 3, 1, "", "adjusted_exp"], [87, 3, 1, "", "adjusted_exp_slope_1_point"], [87, 3, 1, "", "average_and_combine"], [87, 3, 1, "", "combine_concept_and_anchor_scores"], [87, 3, 1, "", "compute_average"], [87, 3, 1, "", "compute_average_of_df"], [87, 3, 1, "", "convert_to_csr_matrix"], [87, 3, 1, "", "create_graph_from_df"], [87, 3, 1, "", "db_results_to_pandas_df"], [87, 3, 1, "", "derive_col_to_col_graph"], [87, 3, 1, "", "embeddings_table_exists"], [87, 3, 1, "", "ensure_nonzero_denominator"], [87, 3, 1, "", "execute_multi_entity_concepts_and_anchors_query"], [87, 3, 1, "", "execute_single_entity_concepts_and_anchors_query"], [87, 3, 1, "", "get_col_to_col_dict"], [87, 3, 1, "", "get_id_dict"], [87, 3, 1, "", "make_adj_undirected"], [87, 3, 1, "", "remove_invalid_pairs"], [87, 3, 1, "", "return_chosen_indices"], [87, 3, 1, "", "to_ndarray_and_flatten"]], "graphai.core.ontology.data.OntologyData": [[87, 4, 1, "", "compute_precalculated_similarity_matrices"], [87, 4, 1, "", "compute_symmetric_concept_concept_matrix"], [87, 4, 1, "", "generate_category_concept_dict"], [87, 4, 1, "", "generate_tree_structure"], [87, 4, 1, "", "get_category_anchor_pages"], [87, 4, 1, "", "get_category_branch"], [87, 4, 1, "", "get_category_category_similarity"], [87, 4, 1, "", "get_category_children"], [87, 4, 1, "", "get_category_closest_category"], [87, 4, 1, "", "get_category_cluster_list"], [87, 4, 1, "", "get_category_cluster_table"], [87, 4, 1, "", "get_category_concept_list"], [87, 4, 1, "", "get_category_concept_table"], [87, 4, 1, "", "get_category_parent"], [87, 4, 1, "", "get_category_to_category"], [87, 4, 1, "", "get_cluster_category_similarity"], [87, 4, 1, "", "get_cluster_children"], [87, 4, 1, "", "get_cluster_closest_category"], [87, 4, 1, "", "get_cluster_closest_category_embedding"], [87, 4, 1, "", "get_cluster_cluster_similarity"], [87, 4, 1, "", "get_cluster_concept_list"], [87, 4, 1, "", "get_cluster_concepts"], [87, 4, 1, "", "get_cluster_parent"], [87, 4, 1, "", "get_concept_category_closest_embedding"], [87, 4, 1, "", "get_concept_category_similarity"], [87, 4, 1, "", "get_concept_closest_category"], [87, 4, 1, "", "get_concept_closest_concept"], [87, 4, 1, "", "get_concept_closest_concept_embedding"], [87, 4, 1, "", "get_concept_cluster_similarity"], [87, 4, 1, "", "get_concept_concept_graphscore_table"], [87, 4, 1, "", "get_concept_concept_similarity"], [87, 4, 1, "", "get_concept_name"], [87, 4, 1, "", "get_concept_names_list"], [87, 4, 1, "", "get_concept_parent_category"], [87, 4, 1, "", "get_concept_parent_cluster"], [87, 4, 1, "", "get_custom_cluster_closest_category"], [87, 4, 1, "", "get_custom_cluster_closest_category_embedding"], [87, 4, 1, "", "get_non_ontology_concept_names"], [87, 4, 1, "", "get_ontology_category_info"], [87, 4, 1, "", "get_ontology_category_names"], [87, 4, 1, "", "get_ontology_concept_names_table"], [87, 4, 1, "", "get_root_category"], [87, 4, 1, "", "get_test_category_concept"], [87, 4, 1, "", "get_test_cluster_concept"], [87, 4, 1, "", "get_test_concept_names"], [87, 4, 1, "", "load_anchor_page_dict"], [87, 4, 1, "", "load_category_category"], [87, 4, 1, "", "load_category_concept"], [87, 4, 1, "", "load_concept_concept_graphscore"], [87, 4, 1, "", "load_data"], [87, 4, 1, "", "load_non_ontology_concept_names"], [87, 4, 1, "", "load_ontology_categories"], [87, 4, 1, "", "load_ontology_concept_names"]], "graphai.core.ontology.ontology": [[88, 3, 1, "", "break_up_cluster"], [88, 3, 1, "", "get_category_info"], [88, 3, 1, "", "get_cluster_category_closest"], [88, 3, 1, "", "get_cluster_info"], [88, 3, 1, "", "get_concept_category_closest"], [88, 3, 1, "", "get_concept_concept_closest"], [88, 3, 1, "", "get_concept_info"], [88, 3, 1, "", "recompute_clusters"]], "graphai.core.ontology.openalex": [[89, 3, 1, "", "get_openalex_nearest"]], "graphai.core.retrieval": [[91, 0, 0, "-", "anonymization"], [92, 0, 0, "-", "retrieval_settings"], [93, 0, 0, "-", "retrieval_utils"]], "graphai.core.retrieval.anonymization": [[91, 1, 1, "", "AnonymizerModels"], [91, 3, 1, "", "anonymize_text"]], "graphai.core.retrieval.anonymization.AnonymizerModels": [[91, 4, 1, "", "anonymize"], [91, 4, 1, "", "load_models"]], "graphai.core.retrieval.retrieval_utils": [[93, 3, 1, "", "chunk_text"], [93, 3, 1, "", "has_invalid_characters"], [93, 3, 1, "", "normalize_index_name"], [93, 3, 1, "", "retrieve_from_es"], [93, 3, 1, "", "search_es_index"]], "graphai.core.scraping": [[95, 0, 0, "-", "scraping"]], "graphai.core.scraping.scraping": [[95, 3, 1, "", "cache_lookup_get_sublinks"], [95, 3, 1, "", "cache_lookup_process_all_sublinks"], [95, 3, 1, "", "check_url"], [95, 3, 1, "", "compare_strings"], [95, 3, 1, "", "create_base_url_token"], [95, 3, 1, "", "extract_scraping_content_callback"], [95, 3, 1, "", "extract_text_from_url"], [95, 3, 1, "", "find_consecutive_runs"], [95, 3, 1, "", "find_edge_patterns"], [95, 3, 1, "", "find_repeated_patterns"], [95, 3, 1, "", "find_spaces"], [95, 3, 1, "", "generate_sublink_token"], [95, 3, 1, "", "get_sublinks"], [95, 3, 1, "", "initialize_data_dict"], [95, 3, 1, "", "initialize_url"], [95, 3, 1, "", "initialize_url_and_get_sublinks"], [95, 3, 1, "", "parse_page_type"], [95, 3, 1, "", "process_all_scraping_sublinks_parallel"], [95, 3, 1, "", "process_all_sublinks"], [95, 3, 1, "", "reconstruct_data_dict"], [95, 3, 1, "", "remove_headers"], [95, 3, 1, "", "remove_junk_scraping_parallel"], [95, 3, 1, "", "remove_long_patterns"], [95, 3, 1, "", "scraping_sublinks_callback"], [95, 3, 1, "", "shift_to_max_correlation"], [95, 3, 1, "", "string_circular_shift"], [95, 3, 1, "", "sublink_parallel_processing_merge_callback"]], "graphai.core.text": [[96, 1, 1, "", "ConceptsGraph"], [96, 3, 1, "", "compute_scores"], [97, 0, 0, "-", "draw"], [96, 3, 1, "", "draw_graph"], [96, 3, 1, "", "draw_ontology"], [98, 0, 0, "-", "embeddings"], [99, 0, 0, "-", "exercises"], [96, 3, 1, "", "extract_keywords"], [96, 3, 1, "", "generate_exercise"], [100, 0, 0, "-", "graph"], [101, 0, 0, "-", "keywords"], [102, 0, 0, "-", "scores"], [103, 0, 0, "-", "wikisearch"]], "graphai.core.text.ConceptsGraph": [[96, 4, 1, "", "add_graph_score"], [96, 4, 1, "", "add_ontology_scores"], [96, 4, 1, "", "get_ontology_concepts"], [96, 4, 1, "", "load_from_db"]], "graphai.core.text.draw": [[97, 3, 1, "", "draw_graph"], [97, 3, 1, "", "draw_ontology"]], "graphai.core.text.embeddings": [[98, 1, 1, "", "ConceptEmbeddings"], [98, 3, 1, "", "compute_embedding_scores"]], "graphai.core.text.embeddings.ConceptEmbeddings": [[98, 4, 1, "", "values"]], "graphai.core.text.exercises": [[99, 3, 1, "", "generate_exercise"]], "graphai.core.text.graph": [[100, 1, 1, "", "ConceptsGraph"]], "graphai.core.text.graph.ConceptsGraph": [[100, 4, 1, "", "add_graph_score"], [100, 4, 1, "", "add_ontology_scores"], [100, 4, 1, "", "get_ontology_concepts"], [100, 4, 1, "", "load_from_db"]], "graphai.core.text.keywords": [[101, 3, 1, "", "extract_keywords"], [101, 3, 1, "", "rake_extract"], [101, 3, 1, "", "word_tokens"]], "graphai.core.text.scores": [[102, 3, 1, "", "aggregate_results"], [102, 3, 1, "", "compute_keywords_scores"], [102, 3, 1, "", "compute_levenshtein_score"], [102, 3, 1, "", "compute_mixed_score"], [102, 3, 1, "", "compute_scores"], [102, 3, 1, "", "filter_results"]], "graphai.core.text.wikisearch": [[103, 3, 1, "", "search_elasticsearch"], [103, 3, 1, "", "search_wikipedia_api"], [103, 3, 1, "", "wikisearch"]], "graphai.core.translation": [[105, 0, 0, "-", "text_utils"], [106, 0, 0, "-", "translation"]], "graphai.core.translation.text_utils": [[105, 1, 1, "", "TranslationModels"], [105, 3, 1, "", "compute_slide_tfidf_scores"], [105, 3, 1, "", "find_best_slide_subset"], [105, 3, 1, "", "find_set_cover"], [105, 3, 1, "", "generate_src_tgt_dict"], [105, 3, 1, "", "generate_translation_text_token"]], "graphai.core.translation.text_utils.TranslationModels": [[105, 4, 1, "", "get_device"], [105, 4, 1, "", "get_last_usage"], [105, 4, 1, "", "load_models"], [105, 4, 1, "", "translate"], [105, 4, 1, "", "unload_model"]], "graphai.core.translation.translation": [[106, 3, 1, "", "cache_lookup_translate_text"], [106, 3, 1, "", "cache_lookup_translation_text_using_fingerprint"], [106, 3, 1, "", "compute_translation_text_fingerprint_callback"], [106, 3, 1, "", "detect_language_translation"], [106, 3, 1, "", "translate_text"], [106, 3, 1, "", "translate_text_callback"], [106, 3, 1, "", "translate_text_return_list_callback"]], "graphai.core.utils": [[108, 0, 0, "-", "breadcrumb"], [109, 0, 0, "-", "progress_bar"], [110, 0, 0, "-", "text"], [113, 0, 0, "-", "time"]], "graphai.core.utils.breadcrumb": [[108, 1, 1, "", "Breadcrumb"]], "graphai.core.utils.breadcrumb.Breadcrumb": [[108, 4, 1, "", "indent"], [108, 4, 1, "", "log"], [108, 4, 1, "", "outdent"], [108, 4, 1, "", "report"]], "graphai.core.utils.progress_bar": [[109, 1, 1, "", "ProgressBar"]], "graphai.core.utils.progress_bar.ProgressBar": [[109, 4, 1, "", "reset"], [109, 4, 1, "", "update"]], "graphai.core.utils.text": [[111, 0, 0, "-", "clean"], [112, 0, 0, "-", "io"]], "graphai.core.utils.text.clean": [[111, 1, 1, "", "HTMLCleaner"], [111, 3, 1, "", "normalize"]], "graphai.core.utils.text.clean.HTMLCleaner": [[111, 4, 1, "", "get_data"], [111, 4, 1, "", "handle_data"], [111, 4, 1, "", "handle_endtag"], [111, 4, 1, "", "handle_starttag"]], "graphai.core.utils.text.io": [[112, 1, 1, "", "Colors"], [112, 3, 1, "", "cprint"], [112, 3, 1, "", "log"], [112, 3, 1, "", "mkdir"], [112, 3, 1, "", "pprint"], [112, 3, 1, "", "read_json"], [112, 3, 1, "", "save_json"]], "graphai.core.utils.text.io.Colors": [[112, 2, 1, "", "codes"], [112, 2, 1, "", "pref"], [112, 2, 1, "", "reset"]], "graphai.core.utils.time": [[114, 0, 0, "-", "date"], [115, 0, 0, "-", "stopwatch"]], "graphai.core.utils.time.date": [[114, 3, 1, "", "add_years"], [114, 3, 1, "", "now"], [114, 3, 1, "", "rescale"]], "graphai.core.utils.time.stopwatch": [[115, 1, 1, "", "Stopwatch"]], "graphai.core.utils.time.stopwatch.Stopwatch": [[115, 4, 1, "", "delta"], [115, 4, 1, "", "report"], [115, 4, 1, "", "reset"], [115, 4, 1, "", "tick"], [115, 4, 1, "", "total"]], "graphai.core.video": [[117, 0, 0, "-", "video"], [118, 0, 0, "-", "video_utils"]], "graphai.core.video.video": [[117, 3, 1, "", "add_token_status_to_single_image"], [117, 3, 1, "", "add_token_status_to_slide_list"], [117, 3, 1, "", "cache_lookup_detect_slides"], [117, 3, 1, "", "cache_lookup_extract_audio"], [117, 3, 1, "", "cache_lookup_retrieve_file_from_url"], [117, 3, 1, "", "compute_audio_fingerprint"], [117, 3, 1, "", "compute_audio_fingerprint_callback"], [117, 3, 1, "", "compute_noise_level_parallel"], [117, 3, 1, "", "compute_noise_threshold_callback"], [117, 3, 1, "", "compute_single_image_fingerprint"], [117, 3, 1, "", "compute_slide_fingerprint_callback"], [117, 3, 1, "", "compute_slide_set_fingerprint"], [117, 3, 1, "", "compute_slide_transitions_callback"], [117, 3, 1, "", "compute_slide_transitions_parallel"], [117, 3, 1, "", "compute_video_fingerprint"], [117, 3, 1, "", "compute_video_fingerprint_callback"], [117, 3, 1, "", "detect_slides_callback"], [117, 3, 1, "", "extract_and_sample_frames"], [117, 3, 1, "", "extract_audio"], [117, 3, 1, "", "extract_audio_callback"], [117, 3, 1, "", "ignore_audio_fingerprint_results_callback"], [117, 3, 1, "", "ignore_single_image_fingerprint_results_callback"], [117, 3, 1, "", "ignore_slide_fingerprint_results_callback"], [117, 3, 1, "", "ignore_video_fingerprint_results_callback"], [117, 3, 1, "", "reextract_cached_audio"], [117, 3, 1, "", "reextract_cached_slides"], [117, 3, 1, "", "retrieve_audio_fingerprint_callback"], [117, 3, 1, "", "retrieve_file_from_url"], [117, 3, 1, "", "retrieve_file_from_url_callback"], [117, 3, 1, "", "retrieve_slide_fingerprint_callback"], [117, 3, 1, "", "retrieve_video_fingerprint_callback"], [117, 3, 1, "", "video_id_and_duration_fp_lookup"]], "graphai.core.video.video_utils": [[118, 1, 1, "", "NLPModels"], [118, 3, 1, "", "check_ocr_and_hash_thresholds"], [118, 3, 1, "", "compute_ocr_noise_level"], [118, 3, 1, "", "compute_ocr_threshold"], [118, 3, 1, "", "compute_video_ocr_transitions"], [118, 3, 1, "", "create_video_filename_using_url_format"], [118, 3, 1, "", "detect_audio_duration"], [118, 3, 1, "", "extract_audio_from_video"], [118, 3, 1, "", "extract_frames"], [118, 3, 1, "", "frame_hash_similarity"], [118, 3, 1, "", "frame_ocr_distance"], [118, 3, 1, "", "frame_ocr_transition"], [118, 3, 1, "", "generate_audio_token"], [118, 3, 1, "", "generate_frame_sample_indices"], [118, 3, 1, "", "generate_img_and_ocr_paths_and_perform_tesseract_ocr"], [118, 3, 1, "", "generate_symbolic_token"], [118, 3, 1, "", "get_cosine_sim"], [118, 3, 1, "", "perform_slow_audio_probe"], [118, 3, 1, "", "read_json_gz_file"], [118, 3, 1, "", "read_txt_gz_file"], [118, 3, 1, "", "retrieve_file_from_any_source"], [118, 3, 1, "", "retrieve_file_from_kaltura"], [118, 3, 1, "", "retrieve_file_from_youtube"], [118, 3, 1, "", "retrieve_video_file_from_generic_url"], [118, 3, 1, "", "tesseract_ocr_or_get_cached"], [118, 3, 1, "", "write_txt_gz_file"]], "graphai.core.video.video_utils.NLPModels": [[118, 4, 1, "", "get_text_word_vector"], [118, 4, 1, "", "get_text_word_vector_using_words"], [118, 4, 1, "", "get_words"], [118, 4, 1, "", "load_nlp_models"]], "graphai.core.voice": [[120, 0, 0, "-", "transcribe"]], "graphai.core.voice.transcribe": [[120, 1, 1, "", "WhisperTranscriptionModel"], [120, 3, 1, "", "cache_lookup_audio_fingerprint"], [120, 3, 1, "", "cache_lookup_audio_language"], [120, 3, 1, "", "cache_lookup_audio_transcript"], [120, 3, 1, "", "detect_language_callback"], [120, 3, 1, "", "detect_language_parallel"], [120, 3, 1, "", "detect_language_retrieve_from_db_and_split"], [120, 3, 1, "", "extract_media_segment"], [120, 3, 1, "", "transcribe_audio_to_text"], [120, 3, 1, "", "transcribe_callback"]], "graphai.core.voice.transcribe.WhisperTranscriptionModel": [[120, 4, 1, "", "detect_audio_segment_lang_whisper"], [120, 4, 1, "", "get_last_usage"], [120, 4, 1, "", "get_silence_thresholds"], [120, 4, 1, "", "load_model_whisper"], [120, 4, 1, "", "transcribe_audio_whisper"], [120, 4, 1, "", "unload_model"]], "graphai.pipelines": [[123, 0, 0, "-", "investment"], [136, 0, 0, "-", "validation"], [140, 0, 0, "-", "visualisation"]], "graphai.pipelines.investment": [[124, 0, 0, "-", "aggregate_recent_past"], [125, 0, 0, "-", "check_unit"], [126, 0, 0, "-", "compute_fundraisers_units"], [127, 0, 0, "-", "compute_investors_units"], [128, 0, 0, "-", "compute_investors_units_2"], [129, 0, 0, "-", "compute_jaccard_index"], [130, 0, 0, "-", "concept_configuration"], [131, 0, 0, "-", "create_investments_graph"], [132, 0, 0, "-", "detect_fundraisers_concepts"], [133, 0, 0, "-", "main"], [134, 0, 0, "-", "parameters"], [135, 0, 0, "-", "toy_example"]], "graphai.pipelines.investment.aggregate_recent_past": [[124, 3, 1, "", "aggregate_recent_past"], [124, 3, 1, "", "aggregate_years"], [124, 3, 1, "", "compute_year_coefficients"], [124, 3, 1, "", "normalize_scores"], [124, 3, 1, "", "rescale_scores"]], "graphai.pipelines.investment.check_unit": [[125, 3, 1, "", "main"], [125, 3, 1, "", "show_matchmaking_chart_view"], [125, 3, 1, "", "show_matchmaking_list_view"], [125, 3, 1, "", "show_trends"]], "graphai.pipelines.investment.compute_fundraisers_units": [[126, 3, 1, "", "compute_fundraisers_units"]], "graphai.pipelines.investment.compute_investors_units": [[127, 3, 1, "", "compute_investors_units"]], "graphai.pipelines.investment.compute_investors_units_2": [[128, 3, 1, "", "compute_investors_units_2"]], "graphai.pipelines.investment.compute_jaccard_index": [[129, 3, 1, "", "compute_jaccard_index"]], "graphai.pipelines.investment.concept_configuration": [[130, 3, 1, "", "combine"], [130, 3, 1, "", "compute_affinities"], [130, 3, 1, "", "mix"], [130, 3, 1, "", "norm"], [130, 3, 1, "", "normalise"], [130, 3, 1, "", "normalise_graph"]], "graphai.pipelines.investment.create_investments_graph": [[131, 3, 1, "", "create_investments_graph"], [131, 3, 1, "", "derive_yearly_data"], [131, 3, 1, "", "get_frs"], [131, 3, 1, "", "get_frs_fundraisers"], [131, 3, 1, "", "get_fundraisers_concepts"], [131, 3, 1, "", "get_investors_frs"]], "graphai.pipelines.investment.detect_fundraisers_concepts": [[132, 3, 1, "", "detect_fundraisers_concepts"]], "graphai.pipelines.investment.main": [[133, 3, 1, "", "main"]], "graphai.pipelines.investment.parameters": [[134, 3, 1, "", "build_prefix"]], "graphai.pipelines.investment.toy_example": [[135, 3, 1, "", "base"], [135, 3, 1, "", "complete"], [135, 3, 1, "", "path"], [135, 3, 1, "", "random"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:function", "4": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"], "4": ["py", "method", "Python method"]}, "titleterms": {"graphai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "packag": [0, 1, 2, 6, 9, 12, 15, 17, 20, 23, 26, 29, 32, 35, 38, 39, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 73, 80, 82, 85, 90, 94, 96, 104, 107, 110, 113, 116, 119, 122, 123, 136, 140], "subpackag": [0, 1, 38, 72, 107, 122], "submodul": [0, 2, 6, 9, 12, 15, 17, 20, 23, 26, 29, 32, 35, 39, 45, 48, 51, 54, 57, 60, 63, 66, 69, 73, 80, 82, 85, 90, 94, 96, 104, 107, 110, 113, 116, 119, 123, 136, 140], "api": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "auth": [2, 3, 4, 5], "auth_util": 3, "modul": [3, 4, 5, 7, 8, 10, 11, 13, 14, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144], "log": [4, 43], "router": [5, 10, 13, 18, 21, 24, 27, 30, 33, 36], "common": [6, 7, 8, 39, 40, 41, 42, 43, 44, 73, 74, 75, 76, 77, 78, 79], "schema": [7, 11, 14, 19, 22, 25, 28, 31, 34, 37], "util": [8, 107, 108, 109, 110, 111, 112, 113, 114, 115], "embed": [9, 10, 11, 45, 46, 47, 80, 81, 98], "imag": [12, 13, 14, 48, 49, 50, 82, 83, 84], "main": [15, 16, 133], "ontologi": [17, 18, 19, 51, 52, 53, 85, 86, 87, 88, 89], "retriev": [20, 21, 22, 54, 55, 56, 90, 91, 92, 93], "scrape": [23, 24, 25, 57, 58, 59, 94, 95], "text": [26, 27, 28, 60, 61, 62, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112], "translat": [29, 30, 31, 63, 64, 65, 104, 105, 106], "video": [32, 33, 34, 66, 67, 68, 116, 117, 118], "voic": [35, 36, 37, 69, 70, 71, 119, 120], "celeri": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "celery_config": 40, "celery_tool": 41, "job": [42, 46, 49, 52, 55, 58, 61, 64, 67, 70], "task": [44, 47, 50, 53, 56, 59, 62, 65, 68, 71], "core": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "cach": 74, "common_util": 75, "config": 76, "fingerprint": 77, "lookup": 78, "multimedia_util": 79, "ocr": 84, "cluster": 86, "data": 87, "openalex": 89, "anonym": 91, "retrieval_set": 92, "retrieval_util": 93, "draw": 97, "exercis": 99, "graph": [100, 141, 142, 143, 144], "keyword": 101, "score": 102, "wikisearch": 103, "text_util": 105, "breadcrumb": 108, "progress_bar": 109, "clean": 111, "io": 112, "time": [113, 114, 115], "date": 114, "stopwatch": 115, "video_util": 118, "transcrib": 120, "definit": 121, "pipelin": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "invest": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "aggregate_recent_past": 124, "check_unit": 125, "compute_fundraisers_unit": 126, "compute_investors_unit": 127, "compute_investors_units_2": 128, "compute_jaccard_index": 129, "concept_configur": 130, "create_investments_graph": 131, "detect_fundraisers_concept": 132, "paramet": 134, "toy_exampl": 135, "valid": [136, 137, 138, 139], "1_old": 137, "2_new": 138, "3_slide": 139, "visualis": [140, 141, 142, 143, 144], "startup": [141, 142, 143, 144], "2": 142, "3": 143, "4": 144}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"graphai package": [[0, "module-graphai"]], "Subpackages": [[0, "subpackages"], [1, "subpackages"], [38, "subpackages"], [72, "subpackages"], [107, "subpackages"], [122, "subpackages"]], "Submodules": [[0, "submodules"], [2, "submodules"], [6, "submodules"], [9, "submodules"], [12, "submodules"], [15, "submodules"], [17, "submodules"], [20, "submodules"], [23, "submodules"], [26, "submodules"], [29, "submodules"], [32, "submodules"], [35, "submodules"], [39, "submodules"], [45, "submodules"], [48, "submodules"], [51, "submodules"], [54, "submodules"], [57, "submodules"], [60, "submodules"], [63, "submodules"], [66, "submodules"], [69, "submodules"], [73, "submodules"], [80, "submodules"], [82, "submodules"], [85, "submodules"], [90, "submodules"], [94, "submodules"], [96, "submodules"], [104, "submodules"], [107, "submodules"], [110, "submodules"], [113, "submodules"], [116, "submodules"], [119, "submodules"], [123, "submodules"], [136, "submodules"], [140, "submodules"]], "graphai.api package": [[1, "module-graphai.api"]], "graphai.api.auth package": [[2, "module-graphai.api.auth"]], "graphai.api.auth.auth_utils module": [[3, "module-graphai.api.auth.auth_utils"]], "graphai.api.auth.log module": [[4, "module-graphai.api.auth.log"]], "graphai.api.auth.router module": [[5, "module-graphai.api.auth.router"]], "graphai.api.common package": [[6, "module-graphai.api.common"]], "graphai.api.common.schemas module": [[7, "module-graphai.api.common.schemas"]], "graphai.api.common.utils module": [[8, "module-graphai.api.common.utils"]], "graphai.api.embedding package": [[9, "module-graphai.api.embedding"]], "graphai.api.embedding.router module": [[10, "module-graphai.api.embedding.router"]], "graphai.api.embedding.schemas module": [[11, "module-graphai.api.embedding.schemas"]], "graphai.api.image package": [[12, "module-graphai.api.image"]], "graphai.api.image.router module": [[13, "module-graphai.api.image.router"]], "graphai.api.image.schemas module": [[14, "module-graphai.api.image.schemas"]], "graphai.api.main package": [[15, "module-graphai.api.main"]], "graphai.api.main.main module": [[16, "module-graphai.api.main.main"]], "graphai.api.ontology package": [[17, "module-graphai.api.ontology"]], "graphai.api.ontology.router module": [[18, "module-graphai.api.ontology.router"]], "graphai.api.ontology.schemas module": [[19, "module-graphai.api.ontology.schemas"]], "graphai.api.retrieval package": [[20, "module-graphai.api.retrieval"]], "graphai.api.retrieval.router module": [[21, "module-graphai.api.retrieval.router"]], "graphai.api.retrieval.schemas module": [[22, "module-graphai.api.retrieval.schemas"]], "graphai.api.scraping package": [[23, "module-graphai.api.scraping"]], "graphai.api.scraping.router module": [[24, "module-graphai.api.scraping.router"]], "graphai.api.scraping.schemas module": [[25, "module-graphai.api.scraping.schemas"]], "graphai.api.text package": [[26, "module-graphai.api.text"]], "graphai.api.text.router module": [[27, "module-graphai.api.text.router"]], "graphai.api.text.schemas module": [[28, "module-graphai.api.text.schemas"]], "graphai.api.translation package": [[29, "module-graphai.api.translation"]], "graphai.api.translation.router module": [[30, "module-graphai.api.translation.router"]], "graphai.api.translation.schemas module": [[31, "module-graphai.api.translation.schemas"]], "graphai.api.video package": [[32, "module-graphai.api.video"]], "graphai.api.video.router module": [[33, "module-graphai.api.video.router"]], "graphai.api.video.schemas module": [[34, "module-graphai.api.video.schemas"]], "graphai.api.voice package": [[35, "module-graphai.api.voice"]], "graphai.api.voice.router module": [[36, "module-graphai.api.voice.router"]], "graphai.api.voice.schemas module": [[37, "module-graphai.api.voice.schemas"]], "graphai.celery package": [[38, "module-graphai.celery"]], "graphai.celery.common package": [[39, "module-graphai.celery.common"]], "graphai.celery.common.celery_config module": [[40, "module-graphai.celery.common.celery_config"]], "graphai.celery.common.celery_tools module": [[41, "module-graphai.celery.common.celery_tools"]], "graphai.celery.common.jobs module": [[42, "module-graphai.celery.common.jobs"]], "graphai.celery.common.log module": [[43, "module-graphai.celery.common.log"]], "graphai.celery.common.tasks module": [[44, "module-graphai.celery.common.tasks"]], "graphai.celery.embedding package": [[45, "module-graphai.celery.embedding"]], "graphai.celery.embedding.jobs module": [[46, "module-graphai.celery.embedding.jobs"]], "graphai.celery.embedding.tasks module": [[47, "module-graphai.celery.embedding.tasks"]], "graphai.celery.image package": [[48, "module-graphai.celery.image"]], "graphai.celery.image.jobs module": [[49, "module-graphai.celery.image.jobs"]], "graphai.celery.image.tasks module": [[50, "module-graphai.celery.image.tasks"]], "graphai.celery.ontology package": [[51, "module-graphai.celery.ontology"]], "graphai.celery.ontology.jobs module": [[52, "module-graphai.celery.ontology.jobs"]], "graphai.celery.ontology.tasks module": [[53, "module-graphai.celery.ontology.tasks"]], "graphai.celery.retrieval package": [[54, "module-graphai.celery.retrieval"]], "graphai.celery.retrieval.jobs module": [[55, "module-graphai.celery.retrieval.jobs"]], "graphai.celery.retrieval.tasks module": [[56, "module-graphai.celery.retrieval.tasks"]], "graphai.celery.scraping package": [[57, "module-graphai.celery.scraping"]], "graphai.celery.scraping.jobs module": [[58, "module-graphai.celery.scraping.jobs"]], "graphai.celery.scraping.tasks module": [[59, "module-graphai.celery.scraping.tasks"]], "graphai.celery.text package": [[60, "module-graphai.celery.text"]], "graphai.celery.text.jobs module": [[61, "module-graphai.celery.text.jobs"]], "graphai.celery.text.tasks module": [[62, "module-graphai.celery.text.tasks"]], "graphai.celery.translation package": [[63, "module-graphai.celery.translation"]], "graphai.celery.translation.jobs module": [[64, "module-graphai.celery.translation.jobs"]], "graphai.celery.translation.tasks module": [[65, "module-graphai.celery.translation.tasks"]], "graphai.celery.video package": [[66, "module-graphai.celery.video"]], "graphai.celery.video.jobs module": [[67, "module-graphai.celery.video.jobs"]], "graphai.celery.video.tasks module": [[68, "module-graphai.celery.video.tasks"]], "graphai.celery.voice package": [[69, "module-graphai.celery.voice"]], "graphai.celery.voice.jobs module": [[70, "module-graphai.celery.voice.jobs"]], "graphai.celery.voice.tasks module": [[71, "module-graphai.celery.voice.tasks"]], "graphai.core package": [[72, "module-graphai.core"]], "graphai.core.common package": [[73, "module-graphai.core.common"]], "graphai.core.common.caching module": [[74, "module-graphai.core.common.caching"]], "graphai.core.common.common_utils module": [[75, "module-graphai.core.common.common_utils"]], "graphai.core.common.config module": [[76, "module-graphai.core.common.config"]], "graphai.core.common.fingerprinting module": [[77, "module-graphai.core.common.fingerprinting"]], "graphai.core.common.lookup module": [[78, "module-graphai.core.common.lookup"]], "graphai.core.common.multimedia_utils module": [[79, "module-graphai.core.common.multimedia_utils"]], "graphai.core.embedding package": [[80, "module-graphai.core.embedding"]], "graphai.core.embedding.embedding module": [[81, "module-graphai.core.embedding.embedding"]], "graphai.core.image package": [[82, "module-graphai.core.image"]], "graphai.core.image.image module": [[83, "module-graphai.core.image.image"]], "graphai.core.image.ocr module": [[84, "module-graphai.core.image.ocr"]], "graphai.core.ontology package": [[85, "module-graphai.core.ontology"]], "graphai.core.ontology.clustering module": [[86, "module-graphai.core.ontology.clustering"]], "graphai.core.ontology.data module": [[87, "module-graphai.core.ontology.data"]], "graphai.core.ontology.ontology module": [[88, "module-graphai.core.ontology.ontology"]], "graphai.core.ontology.openalex module": [[89, "module-graphai.core.ontology.openalex"]], "graphai.core.retrieval package": [[90, "module-graphai.core.retrieval"]], "graphai.core.retrieval.anonymization module": [[91, "module-graphai.core.retrieval.anonymization"]], "graphai.core.retrieval.retrieval_settings module": [[92, "module-graphai.core.retrieval.retrieval_settings"]], "graphai.core.retrieval.retrieval_utils module": [[93, "module-graphai.core.retrieval.retrieval_utils"]], "graphai.core.scraping package": [[94, "module-graphai.core.scraping"]], "graphai.core.scraping.scraping module": [[95, "module-graphai.core.scraping.scraping"]], "graphai.core.text package": [[96, "module-graphai.core.text"]], "graphai.core.text.draw module": [[97, "module-graphai.core.text.draw"]], "graphai.core.text.embeddings module": [[98, "module-graphai.core.text.embeddings"]], "graphai.core.text.exercises module": [[99, "module-graphai.core.text.exercises"]], "graphai.core.text.graph module": [[100, "module-graphai.core.text.graph"]], "graphai.core.text.keywords module": [[101, "module-graphai.core.text.keywords"]], "graphai.core.text.scores module": [[102, "module-graphai.core.text.scores"]], "graphai.core.text.wikisearch module": [[103, "module-graphai.core.text.wikisearch"]], "graphai.core.translation package": [[104, "module-graphai.core.translation"]], "graphai.core.translation.text_utils module": [[105, "module-graphai.core.translation.text_utils"]], "graphai.core.translation.translation module": [[106, "module-graphai.core.translation.translation"]], "graphai.core.utils package": [[107, "module-graphai.core.utils"]], "graphai.core.utils.breadcrumb module": [[108, "module-graphai.core.utils.breadcrumb"]], "graphai.core.utils.progress_bar module": [[109, "module-graphai.core.utils.progress_bar"]], "graphai.core.utils.text package": [[110, "module-graphai.core.utils.text"]], "graphai.core.utils.text.clean module": [[111, "module-graphai.core.utils.text.clean"]], "graphai.core.utils.text.io module": [[112, "module-graphai.core.utils.text.io"]], "graphai.core.utils.time package": [[113, "module-graphai.core.utils.time"]], "graphai.core.utils.time.date module": [[114, "module-graphai.core.utils.time.date"]], "graphai.core.utils.time.stopwatch module": [[115, "module-graphai.core.utils.time.stopwatch"]], "graphai.core.video package": [[116, "module-graphai.core.video"]], "graphai.core.video.video module": [[117, "module-graphai.core.video.video"]], "graphai.core.video.video_utils module": [[118, "module-graphai.core.video.video_utils"]], "graphai.core.voice package": [[119, "module-graphai.core.voice"]], "graphai.core.voice.transcribe module": [[120, "module-graphai.core.voice.transcribe"]], "graphai.definitions module": [[121, "module-graphai.definitions"]], "graphai.pipelines package": [[122, "module-graphai.pipelines"]], "graphai.pipelines.investment package": [[123, "module-graphai.pipelines.investment"]], "graphai.pipelines.investment.aggregate_recent_past module": [[124, "module-graphai.pipelines.investment.aggregate_recent_past"]], "graphai.pipelines.investment.check_unit module": [[125, "module-graphai.pipelines.investment.check_unit"]], "graphai.pipelines.investment.compute_fundraisers_units module": [[126, "module-graphai.pipelines.investment.compute_fundraisers_units"]], "graphai.pipelines.investment.compute_investors_units module": [[127, "module-graphai.pipelines.investment.compute_investors_units"]], "graphai.pipelines.investment.compute_investors_units_2 module": [[128, "module-graphai.pipelines.investment.compute_investors_units_2"]], "graphai.pipelines.investment.compute_jaccard_index module": [[129, "module-graphai.pipelines.investment.compute_jaccard_index"]], "graphai.pipelines.investment.concept_configuration module": [[130, "module-graphai.pipelines.investment.concept_configuration"]], "graphai.pipelines.investment.create_investments_graph module": [[131, "module-graphai.pipelines.investment.create_investments_graph"]], "graphai.pipelines.investment.detect_fundraisers_concepts module": [[132, "module-graphai.pipelines.investment.detect_fundraisers_concepts"]], "graphai.pipelines.investment.main module": [[133, "module-graphai.pipelines.investment.main"]], "graphai.pipelines.investment.parameters module": [[134, "module-graphai.pipelines.investment.parameters"]], "graphai.pipelines.investment.toy_example module": [[135, "module-graphai.pipelines.investment.toy_example"]], "graphai.pipelines.validation package": [[136, "module-graphai.pipelines.validation"]], "graphai.pipelines.validation.1_old module": [[137, "graphai-pipelines-validation-1-old-module"]], "graphai.pipelines.validation.2_new module": [[138, "graphai-pipelines-validation-2-new-module"]], "graphai.pipelines.validation.3_slides module": [[139, "graphai-pipelines-validation-3-slides-module"]], "graphai.pipelines.visualisation package": [[140, "module-graphai.pipelines.visualisation"]], "graphai.pipelines.visualisation.startups-graph module": [[141, "graphai-pipelines-visualisation-startups-graph-module"]], "graphai.pipelines.visualisation.startups-graph-2 module": [[142, "graphai-pipelines-visualisation-startups-graph-2-module"]], "graphai.pipelines.visualisation.startups-graph-3 module": [[143, "graphai-pipelines-visualisation-startups-graph-3-module"]], "graphai.pipelines.visualisation.startups-graph-4 module": [[144, "graphai-pipelines-visualisation-startups-graph-4-module"]]}, "indexentries": {"graphai": [[0, "module-graphai"]], "module": [[0, "module-graphai"], [1, "module-graphai.api"], [2, "module-graphai.api.auth"], [3, "module-graphai.api.auth.auth_utils"], [4, "module-graphai.api.auth.log"], [5, "module-graphai.api.auth.router"], [6, "module-graphai.api.common"], [7, "module-graphai.api.common.schemas"], [8, "module-graphai.api.common.utils"], [9, "module-graphai.api.embedding"], [10, "module-graphai.api.embedding.router"], [11, "module-graphai.api.embedding.schemas"], [12, "module-graphai.api.image"], [13, "module-graphai.api.image.router"], [14, "module-graphai.api.image.schemas"], [15, "module-graphai.api.main"], [16, "module-graphai.api.main.main"], [17, "module-graphai.api.ontology"], [18, "module-graphai.api.ontology.router"], [19, "module-graphai.api.ontology.schemas"], [20, "module-graphai.api.retrieval"], [21, "module-graphai.api.retrieval.router"], [22, "module-graphai.api.retrieval.schemas"], [23, "module-graphai.api.scraping"], [24, "module-graphai.api.scraping.router"], [25, "module-graphai.api.scraping.schemas"], [26, "module-graphai.api.text"], [27, "module-graphai.api.text.router"], [28, "module-graphai.api.text.schemas"], [29, "module-graphai.api.translation"], [30, "module-graphai.api.translation.router"], [31, "module-graphai.api.translation.schemas"], [32, "module-graphai.api.video"], [33, "module-graphai.api.video.router"], [34, "module-graphai.api.video.schemas"], [35, "module-graphai.api.voice"], [36, "module-graphai.api.voice.router"], [37, "module-graphai.api.voice.schemas"], [38, "module-graphai.celery"], [39, "module-graphai.celery.common"], [40, "module-graphai.celery.common.celery_config"], [41, "module-graphai.celery.common.celery_tools"], [42, "module-graphai.celery.common.jobs"], [43, "module-graphai.celery.common.log"], [44, "module-graphai.celery.common.tasks"], [45, "module-graphai.celery.embedding"], [46, "module-graphai.celery.embedding.jobs"], [47, "module-graphai.celery.embedding.tasks"], [48, "module-graphai.celery.image"], [49, "module-graphai.celery.image.jobs"], [50, "module-graphai.celery.image.tasks"], [51, "module-graphai.celery.ontology"], [52, "module-graphai.celery.ontology.jobs"], [53, "module-graphai.celery.ontology.tasks"], [54, "module-graphai.celery.retrieval"], [55, "module-graphai.celery.retrieval.jobs"], [56, "module-graphai.celery.retrieval.tasks"], [57, "module-graphai.celery.scraping"], [58, "module-graphai.celery.scraping.jobs"], [59, "module-graphai.celery.scraping.tasks"], [60, "module-graphai.celery.text"], [61, "module-graphai.celery.text.jobs"], [62, "module-graphai.celery.text.tasks"], [63, "module-graphai.celery.translation"], [64, "module-graphai.celery.translation.jobs"], [65, "module-graphai.celery.translation.tasks"], [66, "module-graphai.celery.video"], [67, "module-graphai.celery.video.jobs"], [68, "module-graphai.celery.video.tasks"], [69, "module-graphai.celery.voice"], [70, "module-graphai.celery.voice.jobs"], [71, "module-graphai.celery.voice.tasks"], [72, "module-graphai.core"], [73, "module-graphai.core.common"], [74, "module-graphai.core.common.caching"], [75, "module-graphai.core.common.common_utils"], [76, "module-graphai.core.common.config"], [77, "module-graphai.core.common.fingerprinting"], [78, "module-graphai.core.common.lookup"], [79, "module-graphai.core.common.multimedia_utils"], [80, "module-graphai.core.embedding"], [81, "module-graphai.core.embedding.embedding"], [82, "module-graphai.core.image"], [83, "module-graphai.core.image.image"], [84, "module-graphai.core.image.ocr"], [85, "module-graphai.core.ontology"], [86, "module-graphai.core.ontology.clustering"], [87, "module-graphai.core.ontology.data"], [88, "module-graphai.core.ontology.ontology"], [89, "module-graphai.core.ontology.openalex"], [90, "module-graphai.core.retrieval"], [91, "module-graphai.core.retrieval.anonymization"], [92, "module-graphai.core.retrieval.retrieval_settings"], [93, "module-graphai.core.retrieval.retrieval_utils"], [94, "module-graphai.core.scraping"], [95, "module-graphai.core.scraping.scraping"], [96, "module-graphai.core.text"], [97, "module-graphai.core.text.draw"], [98, "module-graphai.core.text.embeddings"], [99, "module-graphai.core.text.exercises"], [100, "module-graphai.core.text.graph"], [101, "module-graphai.core.text.keywords"], [102, "module-graphai.core.text.scores"], [103, "module-graphai.core.text.wikisearch"], [104, "module-graphai.core.translation"], [105, "module-graphai.core.translation.text_utils"], [106, "module-graphai.core.translation.translation"], [107, "module-graphai.core.utils"], [108, "module-graphai.core.utils.breadcrumb"], [109, "module-graphai.core.utils.progress_bar"], [110, "module-graphai.core.utils.text"], [111, "module-graphai.core.utils.text.clean"], [112, "module-graphai.core.utils.text.io"], [113, "module-graphai.core.utils.time"], [114, "module-graphai.core.utils.time.date"], [115, "module-graphai.core.utils.time.stopwatch"], [116, "module-graphai.core.video"], [117, "module-graphai.core.video.video"], [118, "module-graphai.core.video.video_utils"], [119, "module-graphai.core.voice"], [120, "module-graphai.core.voice.transcribe"], [121, "module-graphai.definitions"], [122, "module-graphai.pipelines"], [123, "module-graphai.pipelines.investment"], [124, "module-graphai.pipelines.investment.aggregate_recent_past"], [125, "module-graphai.pipelines.investment.check_unit"], [126, "module-graphai.pipelines.investment.compute_fundraisers_units"], [127, "module-graphai.pipelines.investment.compute_investors_units"], [128, "module-graphai.pipelines.investment.compute_investors_units_2"], [129, "module-graphai.pipelines.investment.compute_jaccard_index"], [130, "module-graphai.pipelines.investment.concept_configuration"], [131, "module-graphai.pipelines.investment.create_investments_graph"], [132, "module-graphai.pipelines.investment.detect_fundraisers_concepts"], [133, "module-graphai.pipelines.investment.main"], [134, "module-graphai.pipelines.investment.parameters"], [135, "module-graphai.pipelines.investment.toy_example"], [136, "module-graphai.pipelines.validation"], [140, "module-graphai.pipelines.visualisation"]], "graphai.api": [[1, "module-graphai.api"]], "graphai.api.auth": [[2, "module-graphai.api.auth"]], "token (class in graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.Token"]], "tokendata (class in graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.TokenData"]], "user (class in graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.User"]], "userindb (class in graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.UserInDB"]], "access_token (graphai.api.auth.auth_utils.token attribute)": [[3, "graphai.api.auth.auth_utils.Token.access_token"]], "authenticate_user() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.authenticate_user"]], "disabled (graphai.api.auth.auth_utils.user attribute)": [[3, "graphai.api.auth.auth_utils.User.disabled"]], "email (graphai.api.auth.auth_utils.user attribute)": [[3, "graphai.api.auth.auth_utils.User.email"]], "extract_username_and_scopes() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.extract_username_and_scopes"]], "extract_username_sync() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.extract_username_sync"]], "full_name (graphai.api.auth.auth_utils.user attribute)": [[3, "graphai.api.auth.auth_utils.User.full_name"]], "generate_random_password_string() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.generate_random_password_string"]], "get_password_hash() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.get_password_hash"]], "get_ratelimit_values() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.get_ratelimit_values"]], "get_user() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.get_user"]], "get_user_ratelimit_overrides() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.get_user_ratelimit_overrides"]], "graphai.api.auth.auth_utils": [[3, "module-graphai.api.auth.auth_utils"]], "has_rag_access_rights() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.has_rag_access_rights"]], "hashed_password (graphai.api.auth.auth_utils.userindb attribute)": [[3, "graphai.api.auth.auth_utils.UserInDB.hashed_password"]], "model_config (graphai.api.auth.auth_utils.token attribute)": [[3, "graphai.api.auth.auth_utils.Token.model_config"]], "model_config (graphai.api.auth.auth_utils.tokendata attribute)": [[3, "graphai.api.auth.auth_utils.TokenData.model_config"]], "model_config (graphai.api.auth.auth_utils.user attribute)": [[3, "graphai.api.auth.auth_utils.User.model_config"]], "model_config (graphai.api.auth.auth_utils.userindb attribute)": [[3, "graphai.api.auth.auth_utils.UserInDB.model_config"]], "scopes (graphai.api.auth.auth_utils.tokendata attribute)": [[3, "graphai.api.auth.auth_utils.TokenData.scopes"]], "scopes (graphai.api.auth.auth_utils.user attribute)": [[3, "graphai.api.auth.auth_utils.User.scopes"]], "token_type (graphai.api.auth.auth_utils.token attribute)": [[3, "graphai.api.auth.auth_utils.Token.token_type"]], "username (graphai.api.auth.auth_utils.tokendata attribute)": [[3, "graphai.api.auth.auth_utils.TokenData.username"]], "username (graphai.api.auth.auth_utils.user attribute)": [[3, "graphai.api.auth.auth_utils.User.username"]], "verify_password() (in module graphai.api.auth.auth_utils)": [[3, "graphai.api.auth.auth_utils.verify_password"]], "loggermiddleware (class in graphai.api.auth.log)": [[4, "graphai.api.auth.log.LoggerMiddleware"]], "dispatch() (graphai.api.auth.log.loggermiddleware method)": [[4, "graphai.api.auth.log.LoggerMiddleware.dispatch"]], "get_user_agent() (in module graphai.api.auth.log)": [[4, "graphai.api.auth.log.get_user_agent"]], "graphai.api.auth.log": [[4, "module-graphai.api.auth.log"]], "log_request() (in module graphai.api.auth.log)": [[4, "graphai.api.auth.log.log_request"]], "create_access_token() (in module graphai.api.auth.router)": [[5, "graphai.api.auth.router.create_access_token"]], "get_active_user_dummy() (in module graphai.api.auth.router)": [[5, "graphai.api.auth.router.get_active_user_dummy"]], "get_current_active_user() (in module graphai.api.auth.router)": [[5, "graphai.api.auth.router.get_current_active_user"]], "get_current_user() (in module graphai.api.auth.router)": [[5, "graphai.api.auth.router.get_current_user"]], "get_user_for_rate_limiter() (in module graphai.api.auth.router)": [[5, "graphai.api.auth.router.get_user_for_rate_limiter"]], "graphai.api.auth.router": [[5, "module-graphai.api.auth.router"]], "login_for_access_token() (in module graphai.api.auth.router)": [[5, "graphai.api.auth.router.login_for_access_token"]], "read_users_me() (in module graphai.api.auth.router)": [[5, "graphai.api.auth.router.read_users_me"]], "graphai.api.common": [[6, "module-graphai.api.common"]], "filerequest (class in graphai.api.common.schemas)": [[7, "graphai.api.common.schemas.FileRequest"]], "taskidresponse (class in graphai.api.common.schemas)": [[7, "graphai.api.common.schemas.TaskIDResponse"]], "taskstatusresponse (class in graphai.api.common.schemas)": [[7, "graphai.api.common.schemas.TaskStatusResponse"]], "tokenstatus (class in graphai.api.common.schemas)": [[7, "graphai.api.common.schemas.TokenStatus"]], "active (graphai.api.common.schemas.tokenstatus attribute)": [[7, "graphai.api.common.schemas.TokenStatus.active"]], "fingerprinted (graphai.api.common.schemas.tokenstatus attribute)": [[7, "graphai.api.common.schemas.TokenStatus.fingerprinted"]], "graphai.api.common.schemas": [[7, "module-graphai.api.common.schemas"]], "model_config (graphai.api.common.schemas.filerequest attribute)": [[7, "graphai.api.common.schemas.FileRequest.model_config"]], "model_config (graphai.api.common.schemas.taskidresponse attribute)": [[7, "graphai.api.common.schemas.TaskIDResponse.model_config"]], "model_config (graphai.api.common.schemas.taskstatusresponse attribute)": [[7, "graphai.api.common.schemas.TaskStatusResponse.model_config"]], "model_config (graphai.api.common.schemas.tokenstatus attribute)": [[7, "graphai.api.common.schemas.TokenStatus.model_config"]], "task_id (graphai.api.common.schemas.taskidresponse attribute)": [[7, "graphai.api.common.schemas.TaskIDResponse.task_id"]], "task_id (graphai.api.common.schemas.taskstatusresponse attribute)": [[7, "graphai.api.common.schemas.TaskStatusResponse.task_id"]], "task_name (graphai.api.common.schemas.taskstatusresponse attribute)": [[7, "graphai.api.common.schemas.TaskStatusResponse.task_name"]], "task_result (graphai.api.common.schemas.taskstatusresponse attribute)": [[7, "graphai.api.common.schemas.TaskStatusResponse.task_result"]], "task_status (graphai.api.common.schemas.taskstatusresponse attribute)": [[7, "graphai.api.common.schemas.TaskStatusResponse.task_status"]], "token (graphai.api.common.schemas.filerequest attribute)": [[7, "graphai.api.common.schemas.FileRequest.token"]], "format_api_results() (in module graphai.api.common.utils)": [[8, "graphai.api.common.utils.format_api_results"]], "graphai.api.common.utils": [[8, "module-graphai.api.common.utils"]], "graphai.api.embedding": [[9, "module-graphai.api.embedding"]], "calculate_embedding_text_fingerprint() (in module graphai.api.embedding.router)": [[10, "graphai.api.embedding.router.calculate_embedding_text_fingerprint"]], "calculate_embedding_text_fingerprint_status() (in module graphai.api.embedding.router)": [[10, "graphai.api.embedding.router.calculate_embedding_text_fingerprint_status"]], "embed_text() (in module graphai.api.embedding.router)": [[10, "graphai.api.embedding.router.embed_text"]], "embed_text_status() (in module graphai.api.embedding.router)": [[10, "graphai.api.embedding.router.embed_text_status"]], "graphai.api.embedding.router": [[10, "module-graphai.api.embedding.router"]], "embeddingfingerprintrequest (class in graphai.api.embedding.schemas)": [[11, "graphai.api.embedding.schemas.EmbeddingFingerprintRequest"]], "embeddingrequest (class in graphai.api.embedding.schemas)": [[11, "graphai.api.embedding.schemas.EmbeddingRequest"]], "embeddingrequestbase (class in graphai.api.embedding.schemas)": [[11, "graphai.api.embedding.schemas.EmbeddingRequestBase"]], "embeddingresponse (class in graphai.api.embedding.schemas)": [[11, "graphai.api.embedding.schemas.EmbeddingResponse"]], "embeddingtaskresponse (class in graphai.api.embedding.schemas)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse"]], "device (graphai.api.embedding.schemas.embeddingtaskresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse.device"]], "force (graphai.api.embedding.schemas.embeddingrequestbase attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingRequestBase.force"]], "fresh (graphai.api.embedding.schemas.embeddingtaskresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse.fresh"]], "graphai.api.embedding.schemas": [[11, "module-graphai.api.embedding.schemas"]], "model_config (graphai.api.embedding.schemas.embeddingfingerprintrequest attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingFingerprintRequest.model_config"]], "model_config (graphai.api.embedding.schemas.embeddingrequest attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingRequest.model_config"]], "model_config (graphai.api.embedding.schemas.embeddingrequestbase attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingRequestBase.model_config"]], "model_config (graphai.api.embedding.schemas.embeddingresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingResponse.model_config"]], "model_config (graphai.api.embedding.schemas.embeddingtaskresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse.model_config"]], "model_type (graphai.api.embedding.schemas.embeddingrequestbase attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingRequestBase.model_type"]], "model_type (graphai.api.embedding.schemas.embeddingtaskresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse.model_type"]], "no_cache (graphai.api.embedding.schemas.embeddingrequest attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingRequest.no_cache"]], "result (graphai.api.embedding.schemas.embeddingtaskresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse.result"]], "successful (graphai.api.embedding.schemas.embeddingtaskresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse.successful"]], "task_result (graphai.api.embedding.schemas.embeddingresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingResponse.task_result"]], "text (graphai.api.embedding.schemas.embeddingfingerprintrequest attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingFingerprintRequest.text"]], "text (graphai.api.embedding.schemas.embeddingrequest attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingRequest.text"]], "text_too_large (graphai.api.embedding.schemas.embeddingtaskresponse attribute)": [[11, "graphai.api.embedding.schemas.EmbeddingTaskResponse.text_too_large"]], "graphai.api.image": [[12, "module-graphai.api.image"]], "calculate_slide_fingerprint() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.calculate_slide_fingerprint"]], "calculate_slide_fingerprint_status() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.calculate_slide_fingerprint_status"]], "detect_ocr_language_status() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.detect_ocr_language_status"]], "extract_text() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.extract_text"]], "extract_text_status() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.extract_text_status"]], "get_retrieve_image_file_status() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.get_retrieve_image_file_status"]], "graphai.api.image.router": [[13, "module-graphai.api.image.router"]], "retrieve_image_file() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.retrieve_image_file"]], "upload_image_file() (in module graphai.api.image.router)": [[13, "graphai.api.image.router.upload_image_file"]], "detectocrlanguageresponse (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.DetectOCRLanguageResponse"]], "detectocrlanguagetaskresponse (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.DetectOCRLanguageTaskResponse"]], "extracttextrequest (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.ExtractTextRequest"]], "extracttextresponse (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.ExtractTextResponse"]], "extracttexttaskresponse (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.ExtractTextTaskResponse"]], "imagefingerprintrequest (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.ImageFingerprintRequest"]], "imagefingerprintresponse (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.ImageFingerprintResponse"]], "imagefingerprinttaskresponse (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.ImageFingerprintTaskResponse"]], "individualocrresult (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.IndividualOCRResult"]], "retrieveimageurlrequest (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.RetrieveImageURLRequest"]], "retrieveimageurlresponse (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponse"]], "retrieveimageurlresponseinner (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner"]], "uploadimagerequest (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.UploadImageRequest"]], "uploadedfileorigininfo (class in graphai.api.image.schemas)": [[14, "graphai.api.image.schemas.UploadedFileOriginInfo"]], "closest_token (graphai.api.image.schemas.imagefingerprinttaskresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintTaskResponse.closest_token"]], "closest_token_origin (graphai.api.image.schemas.imagefingerprinttaskresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintTaskResponse.closest_token_origin"]], "contents (graphai.api.image.schemas.uploadimagerequest attribute)": [[14, "graphai.api.image.schemas.UploadImageRequest.contents"]], "error (graphai.api.image.schemas.retrieveimageurlresponseinner attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner.error"]], "file_extension (graphai.api.image.schemas.uploadimagerequest attribute)": [[14, "graphai.api.image.schemas.UploadImageRequest.file_extension"]], "force (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.force"]], "force (graphai.api.image.schemas.imagefingerprintrequest attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintRequest.force"]], "force (graphai.api.image.schemas.retrieveimageurlrequest attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLRequest.force"]], "force (graphai.api.image.schemas.uploadimagerequest attribute)": [[14, "graphai.api.image.schemas.UploadImageRequest.force"]], "fresh (graphai.api.image.schemas.detectocrlanguagetaskresponse attribute)": [[14, "graphai.api.image.schemas.DetectOCRLanguageTaskResponse.fresh"]], "fresh (graphai.api.image.schemas.extracttexttaskresponse attribute)": [[14, "graphai.api.image.schemas.ExtractTextTaskResponse.fresh"]], "fresh (graphai.api.image.schemas.imagefingerprinttaskresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintTaskResponse.fresh"]], "fresh (graphai.api.image.schemas.retrieveimageurlresponseinner attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner.fresh"]], "gemini_api_token (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.gemini_api_token"]], "google_api_token (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.google_api_token"]], "graphai.api.image.schemas": [[14, "module-graphai.api.image.schemas"]], "id (graphai.api.image.schemas.uploadedfileorigininfo attribute)": [[14, "graphai.api.image.schemas.UploadedFileOriginInfo.id"]], "language (graphai.api.image.schemas.detectocrlanguagetaskresponse attribute)": [[14, "graphai.api.image.schemas.DetectOCRLanguageTaskResponse.language"]], "language (graphai.api.image.schemas.extracttexttaskresponse attribute)": [[14, "graphai.api.image.schemas.ExtractTextTaskResponse.language"]], "method (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.method"]], "method (graphai.api.image.schemas.individualocrresult attribute)": [[14, "graphai.api.image.schemas.IndividualOCRResult.method"]], "model_config (graphai.api.image.schemas.detectocrlanguageresponse attribute)": [[14, "graphai.api.image.schemas.DetectOCRLanguageResponse.model_config"]], "model_config (graphai.api.image.schemas.detectocrlanguagetaskresponse attribute)": [[14, "graphai.api.image.schemas.DetectOCRLanguageTaskResponse.model_config"]], "model_config (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.model_config"]], "model_config (graphai.api.image.schemas.extracttextresponse attribute)": [[14, "graphai.api.image.schemas.ExtractTextResponse.model_config"]], "model_config (graphai.api.image.schemas.extracttexttaskresponse attribute)": [[14, "graphai.api.image.schemas.ExtractTextTaskResponse.model_config"]], "model_config (graphai.api.image.schemas.imagefingerprintrequest attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintRequest.model_config"]], "model_config (graphai.api.image.schemas.imagefingerprintresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintResponse.model_config"]], "model_config (graphai.api.image.schemas.imagefingerprinttaskresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintTaskResponse.model_config"]], "model_config (graphai.api.image.schemas.individualocrresult attribute)": [[14, "graphai.api.image.schemas.IndividualOCRResult.model_config"]], "model_config (graphai.api.image.schemas.retrieveimageurlrequest attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLRequest.model_config"]], "model_config (graphai.api.image.schemas.retrieveimageurlresponse attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponse.model_config"]], "model_config (graphai.api.image.schemas.retrieveimageurlresponseinner attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner.model_config"]], "model_config (graphai.api.image.schemas.uploadimagerequest attribute)": [[14, "graphai.api.image.schemas.UploadImageRequest.model_config"]], "model_config (graphai.api.image.schemas.uploadedfileorigininfo attribute)": [[14, "graphai.api.image.schemas.UploadedFileOriginInfo.model_config"]], "model_type (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.model_type"]], "name (graphai.api.image.schemas.uploadedfileorigininfo attribute)": [[14, "graphai.api.image.schemas.UploadedFileOriginInfo.name"]], "no_cache (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.no_cache"]], "no_cache (graphai.api.image.schemas.retrieveimageurlrequest attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLRequest.no_cache"]], "no_cache (graphai.api.image.schemas.uploadimagerequest attribute)": [[14, "graphai.api.image.schemas.UploadImageRequest.no_cache"]], "openai_api_token (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.openai_api_token"]], "origin (graphai.api.image.schemas.uploadimagerequest attribute)": [[14, "graphai.api.image.schemas.UploadImageRequest.origin"]], "origin_info (graphai.api.image.schemas.uploadimagerequest attribute)": [[14, "graphai.api.image.schemas.UploadImageRequest.origin_info"]], "pdf_in_pages (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.pdf_in_pages"]], "result (graphai.api.image.schemas.extracttexttaskresponse attribute)": [[14, "graphai.api.image.schemas.ExtractTextTaskResponse.result"]], "result (graphai.api.image.schemas.imagefingerprinttaskresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintTaskResponse.result"]], "successful (graphai.api.image.schemas.detectocrlanguagetaskresponse attribute)": [[14, "graphai.api.image.schemas.DetectOCRLanguageTaskResponse.successful"]], "successful (graphai.api.image.schemas.extracttexttaskresponse attribute)": [[14, "graphai.api.image.schemas.ExtractTextTaskResponse.successful"]], "successful (graphai.api.image.schemas.imagefingerprinttaskresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintTaskResponse.successful"]], "successful (graphai.api.image.schemas.retrieveimageurlresponseinner attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner.successful"]], "task_result (graphai.api.image.schemas.detectocrlanguageresponse attribute)": [[14, "graphai.api.image.schemas.DetectOCRLanguageResponse.task_result"]], "task_result (graphai.api.image.schemas.extracttextresponse attribute)": [[14, "graphai.api.image.schemas.ExtractTextResponse.task_result"]], "task_result (graphai.api.image.schemas.imagefingerprintresponse attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintResponse.task_result"]], "task_result (graphai.api.image.schemas.retrieveimageurlresponse attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponse.task_result"]], "text (graphai.api.image.schemas.individualocrresult attribute)": [[14, "graphai.api.image.schemas.IndividualOCRResult.text"]], "token (graphai.api.image.schemas.extracttextrequest attribute)": [[14, "graphai.api.image.schemas.ExtractTextRequest.token"]], "token (graphai.api.image.schemas.imagefingerprintrequest attribute)": [[14, "graphai.api.image.schemas.ImageFingerprintRequest.token"]], "token (graphai.api.image.schemas.retrieveimageurlresponseinner attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner.token"]], "token_size (graphai.api.image.schemas.retrieveimageurlresponseinner attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner.token_size"]], "token_status (graphai.api.image.schemas.retrieveimageurlresponseinner attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLResponseInner.token_status"]], "url (graphai.api.image.schemas.retrieveimageurlrequest attribute)": [[14, "graphai.api.image.schemas.RetrieveImageURLRequest.url"]], "graphai.api.main": [[15, "module-graphai.api.main"]], "graphai.api.main.main": [[16, "module-graphai.api.main.main"]], "lifespan() (in module graphai.api.main.main)": [[16, "graphai.api.main.main.lifespan"]], "redirect_docs() (in module graphai.api.main.main)": [[16, "graphai.api.main.main.redirect_docs"]], "graphai.api.ontology": [[17, "module-graphai.api.ontology"]], "break_up_cluster() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.break_up_cluster"]], "cat_info() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.cat_info"]], "cluster_info() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.cluster_info"]], "compute_graph_cluster_nearest_category() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.compute_graph_cluster_nearest_category"]], "compute_graph_concept_nearest_category() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.compute_graph_concept_nearest_category"]], "compute_graph_distance() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.compute_graph_distance"]], "compute_graph_nearest_concept() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.compute_graph_nearest_concept"]], "concept_info() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.concept_info"]], "graphai.api.ontology.router": [[18, "module-graphai.api.ontology.router"]], "openalex_category_nearest_topics() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.openalex_category_nearest_topics"]], "openalex_topic_nearest_categories() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.openalex_topic_nearest_categories"]], "recompute_clusters() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.recompute_clusters"]], "recompute_clusters_status() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.recompute_clusters_status"]], "tree() (in module graphai.api.ontology.router)": [[18, "graphai.api.ontology.router.tree"]], "breakupclusterrequest (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.BreakUpClusterRequest"]], "breakupclustersclusternumberresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.BreakUpClustersClusterNumberResponse"]], "breakupclustersresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.BreakUpClustersResponse"]], "categorydetailsresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.CategoryDetailsResponse"]], "categoryinforesponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.CategoryInfoResponse"]], "clusterdetailsresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.ClusterDetailsResponse"]], "conceptdetails (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.ConceptDetails"]], "conceptdetailssingleresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.ConceptDetailsSingleResponse"]], "embeddingenablednearestentityresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.EmbeddingEnabledNearestEntityResponse"]], "graphclusternearestcategoryrequest (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryRequest"]], "graphclusternearestcategoryresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryResponse"]], "graphconceptnearestcategoryrequest (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryRequest"]], "graphconceptnearestcategoryresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryResponse"]], "graphdistancerequest (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest"]], "graphdistanceresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphDistanceResponse"]], "graphnearestcategoryrequest (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphNearestCategoryRequest"]], "graphnearestconceptrequest (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptRequest"]], "graphnearestconceptresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptResponse"]], "nearestcategoryelement (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.NearestCategoryElement"]], "nearestcategoryelementwithclusters (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.NearestCategoryElementWithClusters"]], "nearestclusterelement (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.NearestClusterElement"]], "oneconceptresponseelement (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.OneConceptResponseElement"]], "openalexcategorynearesttopicsresponseelem (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem"]], "openalextopicnearestcategoriesresponseelem (in module graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.OpenalexTopicNearestCategoriesResponseElem"]], "recomputeclustersrequest (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.RecomputeClustersRequest"]], "recomputeclustersresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.RecomputeClustersResponse"]], "recomputeclusterstaskresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.RecomputeClustersTaskResponse"]], "treeresponse (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.TreeResponse"]], "treeresponseelem (class in graphai.api.ontology.schemas)": [[19, "graphai.api.ontology.schemas.TreeResponseElem"]], "avg (graphai.api.ontology.schemas.graphdistancerequest attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest.avg"]], "avg (graphai.api.ontology.schemas.graphnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestCategoryRequest.avg"]], "branch (graphai.api.ontology.schemas.conceptdetailssingleresponse attribute)": [[19, "graphai.api.ontology.schemas.ConceptDetailsSingleResponse.branch"]], "category_assignments (graphai.api.ontology.schemas.recomputeclusterstaskresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersTaskResponse.category_assignments"]], "category_id (graphai.api.ontology.schemas.categoryinforesponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryInfoResponse.category_id"]], "category_id (graphai.api.ontology.schemas.nearestcategoryelement attribute)": [[19, "graphai.api.ontology.schemas.NearestCategoryElement.category_id"]], "category_id (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.category_id"]], "category_name (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.category_name"]], "child_categories (graphai.api.ontology.schemas.categorydetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryDetailsResponse.child_categories"]], "child_id (graphai.api.ontology.schemas.treeresponseelem attribute)": [[19, "graphai.api.ontology.schemas.TreeResponseElem.child_id"]], "child_to_parent (graphai.api.ontology.schemas.treeresponse attribute)": [[19, "graphai.api.ontology.schemas.TreeResponse.child_to_parent"]], "closest (graphai.api.ontology.schemas.graphnearestconceptresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptResponse.closest"]], "cluster_id (graphai.api.ontology.schemas.breakupclusterrequest attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClusterRequest.cluster_id"]], "cluster_id (graphai.api.ontology.schemas.nearestclusterelement attribute)": [[19, "graphai.api.ontology.schemas.NearestClusterElement.cluster_id"]], "clusters (graphai.api.ontology.schemas.breakupclustersclusternumberresponse attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClustersClusterNumberResponse.clusters"]], "clusters (graphai.api.ontology.schemas.categorydetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryDetailsResponse.clusters"]], "clusters (graphai.api.ontology.schemas.nearestcategoryelementwithclusters attribute)": [[19, "graphai.api.ontology.schemas.NearestCategoryElementWithClusters.clusters"]], "coeffs (graphai.api.ontology.schemas.graphdistancerequest attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest.coeffs"]], "coeffs (graphai.api.ontology.schemas.graphnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestCategoryRequest.coeffs"]], "concepts (graphai.api.ontology.schemas.categorydetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryDetailsResponse.concepts"]], "concepts (graphai.api.ontology.schemas.clusterdetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.ClusterDetailsResponse.concepts"]], "depth (graphai.api.ontology.schemas.categoryinforesponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryInfoResponse.depth"]], "embedding_score (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.embedding_score"]], "embeddings_used (graphai.api.ontology.schemas.embeddingenablednearestentityresponse attribute)": [[19, "graphai.api.ontology.schemas.EmbeddingEnabledNearestEntityResponse.embeddings_used"]], "existing_label (graphai.api.ontology.schemas.graphclusternearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryResponse.existing_label"]], "existing_label (graphai.api.ontology.schemas.graphconceptnearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryResponse.existing_label"]], "graphai.api.ontology.schemas": [[19, "module-graphai.api.ontology.schemas"]], "id (graphai.api.ontology.schemas.categoryinforesponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryInfoResponse.id"]], "id (graphai.api.ontology.schemas.conceptdetails attribute)": [[19, "graphai.api.ontology.schemas.ConceptDetails.id"]], "id (graphai.api.ontology.schemas.oneconceptresponseelement attribute)": [[19, "graphai.api.ontology.schemas.OneConceptResponseElement.id"]], "impurity_count (graphai.api.ontology.schemas.recomputeclusterstaskresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersTaskResponse.impurity_count"]], "impurity_proportion (graphai.api.ontology.schemas.recomputeclusterstaskresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersTaskResponse.impurity_proportion"]], "info (graphai.api.ontology.schemas.categorydetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryDetailsResponse.info"]], "min_n (graphai.api.ontology.schemas.recomputeclustersrequest attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersRequest.min_n"]], "model_config (graphai.api.ontology.schemas.breakupclusterrequest attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClusterRequest.model_config"]], "model_config (graphai.api.ontology.schemas.breakupclustersclusternumberresponse attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClustersClusterNumberResponse.model_config"]], "model_config (graphai.api.ontology.schemas.breakupclustersresponse attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClustersResponse.model_config"]], "model_config (graphai.api.ontology.schemas.categorydetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryDetailsResponse.model_config"]], "model_config (graphai.api.ontology.schemas.categoryinforesponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryInfoResponse.model_config"]], "model_config (graphai.api.ontology.schemas.clusterdetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.ClusterDetailsResponse.model_config"]], "model_config (graphai.api.ontology.schemas.conceptdetails attribute)": [[19, "graphai.api.ontology.schemas.ConceptDetails.model_config"]], "model_config (graphai.api.ontology.schemas.conceptdetailssingleresponse attribute)": [[19, "graphai.api.ontology.schemas.ConceptDetailsSingleResponse.model_config"]], "model_config (graphai.api.ontology.schemas.embeddingenablednearestentityresponse attribute)": [[19, "graphai.api.ontology.schemas.EmbeddingEnabledNearestEntityResponse.model_config"]], "model_config (graphai.api.ontology.schemas.graphclusternearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryRequest.model_config"]], "model_config (graphai.api.ontology.schemas.graphclusternearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryResponse.model_config"]], "model_config (graphai.api.ontology.schemas.graphconceptnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryRequest.model_config"]], "model_config (graphai.api.ontology.schemas.graphconceptnearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryResponse.model_config"]], "model_config (graphai.api.ontology.schemas.graphdistancerequest attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest.model_config"]], "model_config (graphai.api.ontology.schemas.graphdistanceresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceResponse.model_config"]], "model_config (graphai.api.ontology.schemas.graphnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestCategoryRequest.model_config"]], "model_config (graphai.api.ontology.schemas.graphnearestconceptrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptRequest.model_config"]], "model_config (graphai.api.ontology.schemas.graphnearestconceptresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptResponse.model_config"]], "model_config (graphai.api.ontology.schemas.nearestcategoryelement attribute)": [[19, "graphai.api.ontology.schemas.NearestCategoryElement.model_config"]], "model_config (graphai.api.ontology.schemas.nearestcategoryelementwithclusters attribute)": [[19, "graphai.api.ontology.schemas.NearestCategoryElementWithClusters.model_config"]], "model_config (graphai.api.ontology.schemas.nearestclusterelement attribute)": [[19, "graphai.api.ontology.schemas.NearestClusterElement.model_config"]], "model_config (graphai.api.ontology.schemas.oneconceptresponseelement attribute)": [[19, "graphai.api.ontology.schemas.OneConceptResponseElement.model_config"]], "model_config (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.model_config"]], "model_config (graphai.api.ontology.schemas.recomputeclustersrequest attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersRequest.model_config"]], "model_config (graphai.api.ontology.schemas.recomputeclustersresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersResponse.model_config"]], "model_config (graphai.api.ontology.schemas.recomputeclusterstaskresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersTaskResponse.model_config"]], "model_config (graphai.api.ontology.schemas.treeresponse attribute)": [[19, "graphai.api.ontology.schemas.TreeResponse.model_config"]], "model_config (graphai.api.ontology.schemas.treeresponseelem attribute)": [[19, "graphai.api.ontology.schemas.TreeResponseElem.model_config"]], "n_clusters (graphai.api.ontology.schemas.breakupclusterrequest attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClusterRequest.n_clusters"]], "n_clusters (graphai.api.ontology.schemas.breakupclustersclusternumberresponse attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClustersClusterNumberResponse.n_clusters"]], "n_clusters (graphai.api.ontology.schemas.recomputeclustersrequest attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersRequest.n_clusters"]], "name (graphai.api.ontology.schemas.categoryinforesponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryInfoResponse.name"]], "name (graphai.api.ontology.schemas.conceptdetails attribute)": [[19, "graphai.api.ontology.schemas.ConceptDetails.name"]], "name (graphai.api.ontology.schemas.oneconceptresponseelement attribute)": [[19, "graphai.api.ontology.schemas.OneConceptResponseElement.name"]], "parent (graphai.api.ontology.schemas.clusterdetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.ClusterDetailsResponse.parent"]], "parent_category (graphai.api.ontology.schemas.categorydetailsresponse attribute)": [[19, "graphai.api.ontology.schemas.CategoryDetailsResponse.parent_category"]], "parent_category (graphai.api.ontology.schemas.conceptdetailssingleresponse attribute)": [[19, "graphai.api.ontology.schemas.ConceptDetailsSingleResponse.parent_category"]], "parent_category (graphai.api.ontology.schemas.graphclusternearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryResponse.parent_category"]], "parent_category (graphai.api.ontology.schemas.graphconceptnearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryResponse.parent_category"]], "parent_cluster (graphai.api.ontology.schemas.conceptdetailssingleresponse attribute)": [[19, "graphai.api.ontology.schemas.ConceptDetailsSingleResponse.parent_cluster"]], "parent_id (graphai.api.ontology.schemas.treeresponseelem attribute)": [[19, "graphai.api.ontology.schemas.TreeResponseElem.parent_id"]], "rank (graphai.api.ontology.schemas.nearestcategoryelement attribute)": [[19, "graphai.api.ontology.schemas.NearestCategoryElement.rank"]], "rank (graphai.api.ontology.schemas.nearestclusterelement attribute)": [[19, "graphai.api.ontology.schemas.NearestClusterElement.rank"]], "results (graphai.api.ontology.schemas.breakupclustersresponse attribute)": [[19, "graphai.api.ontology.schemas.BreakUpClustersResponse.results"]], "results (graphai.api.ontology.schemas.recomputeclusterstaskresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersTaskResponse.results"]], "return_clusters (graphai.api.ontology.schemas.graphconceptnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryRequest.return_clusters"]], "score (graphai.api.ontology.schemas.nearestcategoryelement attribute)": [[19, "graphai.api.ontology.schemas.NearestCategoryElement.score"]], "score (graphai.api.ontology.schemas.nearestclusterelement attribute)": [[19, "graphai.api.ontology.schemas.NearestClusterElement.score"]], "score (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.score"]], "scores (graphai.api.ontology.schemas.graphclusternearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryResponse.scores"]], "scores (graphai.api.ontology.schemas.graphconceptnearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryResponse.scores"]], "scores (graphai.api.ontology.schemas.graphnearestconceptresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptResponse.scores"]], "sim (graphai.api.ontology.schemas.graphdistanceresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceResponse.sim"]], "src (graphai.api.ontology.schemas.graphclusternearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphClusterNearestCategoryRequest.src"]], "src (graphai.api.ontology.schemas.graphconceptnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryRequest.src"]], "src (graphai.api.ontology.schemas.graphdistancerequest attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest.src"]], "src (graphai.api.ontology.schemas.graphnearestconceptrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptRequest.src"]], "src_type (graphai.api.ontology.schemas.graphdistancerequest attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest.src_type"]], "successful (graphai.api.ontology.schemas.recomputeclusterstaskresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersTaskResponse.successful"]], "task_result (graphai.api.ontology.schemas.recomputeclustersresponse attribute)": [[19, "graphai.api.ontology.schemas.RecomputeClustersResponse.task_result"]], "tgt (graphai.api.ontology.schemas.graphdistancerequest attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest.tgt"]], "tgt_type (graphai.api.ontology.schemas.graphdistancerequest attribute)": [[19, "graphai.api.ontology.schemas.GraphDistanceRequest.tgt_type"]], "top_down_search (graphai.api.ontology.schemas.graphnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestCategoryRequest.top_down_search"]], "top_n (graphai.api.ontology.schemas.graphnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestCategoryRequest.top_n"]], "top_n (graphai.api.ontology.schemas.graphnearestconceptrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptRequest.top_n"]], "topic_id (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.topic_id"]], "topic_name (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.topic_name"]], "use_embeddings (graphai.api.ontology.schemas.graphnearestcategoryrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestCategoryRequest.use_embeddings"]], "use_embeddings (graphai.api.ontology.schemas.graphnearestconceptrequest attribute)": [[19, "graphai.api.ontology.schemas.GraphNearestConceptRequest.use_embeddings"]], "valid (graphai.api.ontology.schemas.graphconceptnearestcategoryresponse attribute)": [[19, "graphai.api.ontology.schemas.GraphConceptNearestCategoryResponse.valid"]], "wikipedia_score (graphai.api.ontology.schemas.openalexcategorynearesttopicsresponseelem attribute)": [[19, "graphai.api.ontology.schemas.OpenalexCategoryNearestTopicsResponseElem.wikipedia_score"]], "graphai.api.retrieval": [[20, "module-graphai.api.retrieval"]], "anonymize_text() (in module graphai.api.retrieval.router)": [[21, "graphai.api.retrieval.router.anonymize_text"]], "chunk_text() (in module graphai.api.retrieval.router)": [[21, "graphai.api.retrieval.router.chunk_text"]], "graphai.api.retrieval.router": [[21, "module-graphai.api.retrieval.router"]], "retrieve_endpoint_info() (in module graphai.api.retrieval.router)": [[21, "graphai.api.retrieval.router.retrieve_endpoint_info"]], "retrieve_from_es_index() (in module graphai.api.retrieval.router)": [[21, "graphai.api.retrieval.router.retrieve_from_es_index"]], "anonymizerequest (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.AnonymizeRequest"]], "anonymizeresponse (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.AnonymizeResponse"]], "chunkrequest (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.ChunkRequest"]], "chunkresponse (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.ChunkResponse"]], "retrievalindextype (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.RetrievalIndexType"]], "retrievalinforesponse (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.RetrievalInfoResponse"]], "retrievalrequest (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest"]], "retrievalresponse (class in graphai.api.retrieval.schemas)": [[22, "graphai.api.retrieval.schemas.RetrievalResponse"]], "chunk_overlap (graphai.api.retrieval.schemas.chunkrequest attribute)": [[22, "graphai.api.retrieval.schemas.ChunkRequest.chunk_overlap"]], "chunk_size (graphai.api.retrieval.schemas.chunkrequest attribute)": [[22, "graphai.api.retrieval.schemas.ChunkRequest.chunk_size"]], "filter_by_date (graphai.api.retrieval.schemas.retrievalrequest attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest.filter_by_date"]], "filters (graphai.api.retrieval.schemas.retrievalindextype attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalIndexType.filters"]], "filters (graphai.api.retrieval.schemas.retrievalrequest attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest.filters"]], "full (graphai.api.retrieval.schemas.chunkresponse attribute)": [[22, "graphai.api.retrieval.schemas.ChunkResponse.full"]], "graphai.api.retrieval.schemas": [[22, "module-graphai.api.retrieval.schemas"]], "index (graphai.api.retrieval.schemas.retrievalindextype attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalIndexType.index"]], "index (graphai.api.retrieval.schemas.retrievalrequest attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest.index"]], "indexes (graphai.api.retrieval.schemas.retrievalinforesponse attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalInfoResponse.indexes"]], "lang (graphai.api.retrieval.schemas.anonymizerequest attribute)": [[22, "graphai.api.retrieval.schemas.AnonymizeRequest.lang"]], "limit (graphai.api.retrieval.schemas.retrievalrequest attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest.limit"]], "model_config (graphai.api.retrieval.schemas.anonymizerequest attribute)": [[22, "graphai.api.retrieval.schemas.AnonymizeRequest.model_config"]], "model_config (graphai.api.retrieval.schemas.anonymizeresponse attribute)": [[22, "graphai.api.retrieval.schemas.AnonymizeResponse.model_config"]], "model_config (graphai.api.retrieval.schemas.chunkrequest attribute)": [[22, "graphai.api.retrieval.schemas.ChunkRequest.model_config"]], "model_config (graphai.api.retrieval.schemas.chunkresponse attribute)": [[22, "graphai.api.retrieval.schemas.ChunkResponse.model_config"]], "model_config (graphai.api.retrieval.schemas.retrievalindextype attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalIndexType.model_config"]], "model_config (graphai.api.retrieval.schemas.retrievalinforesponse attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalInfoResponse.model_config"]], "model_config (graphai.api.retrieval.schemas.retrievalrequest attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest.model_config"]], "model_config (graphai.api.retrieval.schemas.retrievalresponse attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalResponse.model_config"]], "n_results (graphai.api.retrieval.schemas.retrievalresponse attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalResponse.n_results"]], "one_chunk_per_doc (graphai.api.retrieval.schemas.chunkrequest attribute)": [[22, "graphai.api.retrieval.schemas.ChunkRequest.one_chunk_per_doc"]], "one_chunk_per_page (graphai.api.retrieval.schemas.chunkrequest attribute)": [[22, "graphai.api.retrieval.schemas.ChunkRequest.one_chunk_per_page"]], "result (graphai.api.retrieval.schemas.anonymizeresponse attribute)": [[22, "graphai.api.retrieval.schemas.AnonymizeResponse.result"]], "result (graphai.api.retrieval.schemas.retrievalresponse attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalResponse.result"]], "return_scores (graphai.api.retrieval.schemas.retrievalrequest attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest.return_scores"]], "split (graphai.api.retrieval.schemas.chunkresponse attribute)": [[22, "graphai.api.retrieval.schemas.ChunkResponse.split"]], "successful (graphai.api.retrieval.schemas.anonymizeresponse attribute)": [[22, "graphai.api.retrieval.schemas.AnonymizeResponse.successful"]], "successful (graphai.api.retrieval.schemas.retrievalresponse attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalResponse.successful"]], "text (graphai.api.retrieval.schemas.anonymizerequest attribute)": [[22, "graphai.api.retrieval.schemas.AnonymizeRequest.text"]], "text (graphai.api.retrieval.schemas.chunkrequest attribute)": [[22, "graphai.api.retrieval.schemas.ChunkRequest.text"]], "text (graphai.api.retrieval.schemas.retrievalrequest attribute)": [[22, "graphai.api.retrieval.schemas.RetrievalRequest.text"]], "graphai.api.scraping": [[23, "module-graphai.api.scraping"]], "extract_page_content() (in module graphai.api.scraping.router)": [[24, "graphai.api.scraping.router.extract_page_content"]], "extract_page_content_status() (in module graphai.api.scraping.router)": [[24, "graphai.api.scraping.router.extract_page_content_status"]], "extract_sublinks() (in module graphai.api.scraping.router)": [[24, "graphai.api.scraping.router.extract_sublinks"]], "extract_sublinks_status() (in module graphai.api.scraping.router)": [[24, "graphai.api.scraping.router.extract_sublinks_status"]], "graphai.api.scraping.router": [[24, "module-graphai.api.scraping.router"]], "extractcontentrequest (class in graphai.api.scraping.schemas)": [[25, "graphai.api.scraping.schemas.ExtractContentRequest"]], "extractcontentresponse (class in graphai.api.scraping.schemas)": [[25, "graphai.api.scraping.schemas.ExtractContentResponse"]], "extractcontenttaskresponse (class in graphai.api.scraping.schemas)": [[25, "graphai.api.scraping.schemas.ExtractContentTaskResponse"]], "getsublinksrequest (class in graphai.api.scraping.schemas)": [[25, "graphai.api.scraping.schemas.GetSublinksRequest"]], "getsublinksresponse (class in graphai.api.scraping.schemas)": [[25, "graphai.api.scraping.schemas.GetSublinksResponse"]], "getsublinkstaskresponse (class in graphai.api.scraping.schemas)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse"]], "data (graphai.api.scraping.schemas.extractcontenttaskresponse attribute)": [[25, "graphai.api.scraping.schemas.ExtractContentTaskResponse.data"]], "force (graphai.api.scraping.schemas.getsublinksrequest attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksRequest.force"]], "fresh (graphai.api.scraping.schemas.getsublinkstaskresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse.fresh"]], "graphai.api.scraping.schemas": [[25, "module-graphai.api.scraping.schemas"]], "model_config (graphai.api.scraping.schemas.extractcontentrequest attribute)": [[25, "graphai.api.scraping.schemas.ExtractContentRequest.model_config"]], "model_config (graphai.api.scraping.schemas.extractcontentresponse attribute)": [[25, "graphai.api.scraping.schemas.ExtractContentResponse.model_config"]], "model_config (graphai.api.scraping.schemas.extractcontenttaskresponse attribute)": [[25, "graphai.api.scraping.schemas.ExtractContentTaskResponse.model_config"]], "model_config (graphai.api.scraping.schemas.getsublinksrequest attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksRequest.model_config"]], "model_config (graphai.api.scraping.schemas.getsublinksresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksResponse.model_config"]], "model_config (graphai.api.scraping.schemas.getsublinkstaskresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse.model_config"]], "remove_headers (graphai.api.scraping.schemas.extractcontentrequest attribute)": [[25, "graphai.api.scraping.schemas.ExtractContentRequest.remove_headers"]], "remove_long_patterns (graphai.api.scraping.schemas.extractcontentrequest attribute)": [[25, "graphai.api.scraping.schemas.ExtractContentRequest.remove_long_patterns"]], "status_msg (graphai.api.scraping.schemas.getsublinkstaskresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse.status_msg"]], "sublinks (graphai.api.scraping.schemas.getsublinkstaskresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse.sublinks"]], "successful (graphai.api.scraping.schemas.getsublinkstaskresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse.successful"]], "task_result (graphai.api.scraping.schemas.extractcontentresponse attribute)": [[25, "graphai.api.scraping.schemas.ExtractContentResponse.task_result"]], "task_result (graphai.api.scraping.schemas.getsublinksresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksResponse.task_result"]], "token (graphai.api.scraping.schemas.getsublinkstaskresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse.token"]], "url (graphai.api.scraping.schemas.getsublinksrequest attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksRequest.url"]], "validated_url (graphai.api.scraping.schemas.getsublinkstaskresponse attribute)": [[25, "graphai.api.scraping.schemas.GetSublinksTaskResponse.validated_url"]], "graphai.api.text": [[26, "module-graphai.api.text"]], "generate_exercise() (in module graphai.api.text.router)": [[27, "graphai.api.text.router.generate_exercise"]], "graphai.api.text.router": [[27, "module-graphai.api.text.router"]], "keywords() (in module graphai.api.text.router)": [[27, "graphai.api.text.router.keywords"]], "wikify() (in module graphai.api.text.router)": [[27, "graphai.api.text.router.wikify"]], "wikify_graph_svg() (in module graphai.api.text.router)": [[27, "graphai.api.text.router.wikify_graph_svg"]], "wikify_ontology_svg() (in module graphai.api.text.router)": [[27, "graphai.api.text.router.wikify_ontology_svg"]], "generatelectureexerciserequest (class in graphai.api.text.schemas)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest"]], "generatetextexerciserequest (class in graphai.api.text.schemas)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest"]], "keywordsrequest (class in graphai.api.text.schemas)": [[28, "graphai.api.text.schemas.KeywordsRequest"]], "wikifyfromkeywordsrequest (class in graphai.api.text.schemas)": [[28, "graphai.api.text.schemas.WikifyFromKeywordsRequest"]], "wikifyfromrawtextrequest (class in graphai.api.text.schemas)": [[28, "graphai.api.text.schemas.WikifyFromRawTextRequest"]], "wikifyresponseelem (class in graphai.api.text.schemas)": [[28, "graphai.api.text.schemas.WikifyResponseElem"]], "bloom_level (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.bloom_level"]], "bloom_level (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.bloom_level"]], "concept_id (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.concept_id"]], "concept_name (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.concept_name"]], "description (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.description"]], "description (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.description"]], "embedding_global_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.embedding_global_score"]], "embedding_keywords_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.embedding_keywords_score"]], "embedding_local_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.embedding_local_score"]], "graph_keywords_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.graph_keywords_score"]], "graph_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.graph_score"]], "graphai.api.text.schemas": [[28, "module-graphai.api.text.schemas"]], "include_solution (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.include_solution"]], "include_solution (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.include_solution"]], "keywords (graphai.api.text.schemas.wikifyfromkeywordsrequest attribute)": [[28, "graphai.api.text.schemas.WikifyFromKeywordsRequest.keywords"]], "lecture_id (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.lecture_id"]], "levenshtein_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.levenshtein_score"]], "llm_model (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.llm_model"]], "llm_model (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.llm_model"]], "mixed_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.mixed_score"]], "model_config (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.model_config"]], "model_config (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.model_config"]], "model_config (graphai.api.text.schemas.keywordsrequest attribute)": [[28, "graphai.api.text.schemas.KeywordsRequest.model_config"]], "model_config (graphai.api.text.schemas.wikifyfromkeywordsrequest attribute)": [[28, "graphai.api.text.schemas.WikifyFromKeywordsRequest.model_config"]], "model_config (graphai.api.text.schemas.wikifyfromrawtextrequest attribute)": [[28, "graphai.api.text.schemas.WikifyFromRawTextRequest.model_config"]], "model_config (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.model_config"]], "ontology_global_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.ontology_global_score"]], "ontology_keywords_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.ontology_keywords_score"]], "ontology_local_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.ontology_local_score"]], "openai_api_key (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.openai_api_key"]], "openai_api_key (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.openai_api_key"]], "output_format (graphai.api.text.schemas.generatelectureexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateLectureExerciseRequest.output_format"]], "output_format (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.output_format"]], "raw_text (graphai.api.text.schemas.keywordsrequest attribute)": [[28, "graphai.api.text.schemas.KeywordsRequest.raw_text"]], "raw_text (graphai.api.text.schemas.wikifyfromrawtextrequest attribute)": [[28, "graphai.api.text.schemas.WikifyFromRawTextRequest.raw_text"]], "search_score (graphai.api.text.schemas.wikifyresponseelem attribute)": [[28, "graphai.api.text.schemas.WikifyResponseElem.search_score"]], "text (graphai.api.text.schemas.generatetextexerciserequest attribute)": [[28, "graphai.api.text.schemas.GenerateTextExerciseRequest.text"]], "graphai.api.translation": [[29, "module-graphai.api.translation"]], "calculate_translation_text_fingerprint() (in module graphai.api.translation.router)": [[30, "graphai.api.translation.router.calculate_translation_text_fingerprint"]], "calculate_translation_text_fingerprint_status() (in module graphai.api.translation.router)": [[30, "graphai.api.translation.router.calculate_translation_text_fingerprint_status"]], "graphai.api.translation.router": [[30, "module-graphai.api.translation.router"]], "text_detect_language() (in module graphai.api.translation.router)": [[30, "graphai.api.translation.router.text_detect_language"]], "text_detect_language_status() (in module graphai.api.translation.router)": [[30, "graphai.api.translation.router.text_detect_language_status"]], "translate() (in module graphai.api.translation.router)": [[30, "graphai.api.translation.router.translate"]], "translate_status() (in module graphai.api.translation.router)": [[30, "graphai.api.translation.router.translate_status"]], "textdetectlanguagerequest (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TextDetectLanguageRequest"]], "textdetectlanguageresponse (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TextDetectLanguageResponse"]], "textdetectlanguagetaskresponse (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TextDetectLanguageTaskResponse"]], "textfingerprintresponse (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TextFingerprintResponse"]], "textfingerprinttaskresponse (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TextFingerprintTaskResponse"]], "translationrequest (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TranslationRequest"]], "translationresponse (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TranslationResponse"]], "translationtaskresponse (class in graphai.api.translation.schemas)": [[31, "graphai.api.translation.schemas.TranslationTaskResponse"]], "device (graphai.api.translation.schemas.translationtaskresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationTaskResponse.device"]], "force (graphai.api.translation.schemas.translationrequest attribute)": [[31, "graphai.api.translation.schemas.TranslationRequest.force"]], "fresh (graphai.api.translation.schemas.textfingerprinttaskresponse attribute)": [[31, "graphai.api.translation.schemas.TextFingerprintTaskResponse.fresh"]], "fresh (graphai.api.translation.schemas.translationtaskresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationTaskResponse.fresh"]], "graphai.api.translation.schemas": [[31, "module-graphai.api.translation.schemas"]], "language (graphai.api.translation.schemas.textdetectlanguagetaskresponse attribute)": [[31, "graphai.api.translation.schemas.TextDetectLanguageTaskResponse.language"]], "model_config (graphai.api.translation.schemas.textdetectlanguagerequest attribute)": [[31, "graphai.api.translation.schemas.TextDetectLanguageRequest.model_config"]], "model_config (graphai.api.translation.schemas.textdetectlanguageresponse attribute)": [[31, "graphai.api.translation.schemas.TextDetectLanguageResponse.model_config"]], "model_config (graphai.api.translation.schemas.textdetectlanguagetaskresponse attribute)": [[31, "graphai.api.translation.schemas.TextDetectLanguageTaskResponse.model_config"]], "model_config (graphai.api.translation.schemas.textfingerprintresponse attribute)": [[31, "graphai.api.translation.schemas.TextFingerprintResponse.model_config"]], "model_config (graphai.api.translation.schemas.textfingerprinttaskresponse attribute)": [[31, "graphai.api.translation.schemas.TextFingerprintTaskResponse.model_config"]], "model_config (graphai.api.translation.schemas.translationrequest attribute)": [[31, "graphai.api.translation.schemas.TranslationRequest.model_config"]], "model_config (graphai.api.translation.schemas.translationresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationResponse.model_config"]], "model_config (graphai.api.translation.schemas.translationtaskresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationTaskResponse.model_config"]], "no_cache (graphai.api.translation.schemas.translationrequest attribute)": [[31, "graphai.api.translation.schemas.TranslationRequest.no_cache"]], "result (graphai.api.translation.schemas.textfingerprinttaskresponse attribute)": [[31, "graphai.api.translation.schemas.TextFingerprintTaskResponse.result"]], "result (graphai.api.translation.schemas.translationtaskresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationTaskResponse.result"]], "skip_segmentation (graphai.api.translation.schemas.translationrequest attribute)": [[31, "graphai.api.translation.schemas.TranslationRequest.skip_segmentation"]], "source (graphai.api.translation.schemas.translationrequest attribute)": [[31, "graphai.api.translation.schemas.TranslationRequest.source"]], "successful (graphai.api.translation.schemas.textdetectlanguagetaskresponse attribute)": [[31, "graphai.api.translation.schemas.TextDetectLanguageTaskResponse.successful"]], "successful (graphai.api.translation.schemas.textfingerprinttaskresponse attribute)": [[31, "graphai.api.translation.schemas.TextFingerprintTaskResponse.successful"]], "successful (graphai.api.translation.schemas.translationtaskresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationTaskResponse.successful"]], "target (graphai.api.translation.schemas.translationrequest attribute)": [[31, "graphai.api.translation.schemas.TranslationRequest.target"]], "task_result (graphai.api.translation.schemas.textdetectlanguageresponse attribute)": [[31, "graphai.api.translation.schemas.TextDetectLanguageResponse.task_result"]], "task_result (graphai.api.translation.schemas.textfingerprintresponse attribute)": [[31, "graphai.api.translation.schemas.TextFingerprintResponse.task_result"]], "task_result (graphai.api.translation.schemas.translationresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationResponse.task_result"]], "text (graphai.api.translation.schemas.textdetectlanguagerequest attribute)": [[31, "graphai.api.translation.schemas.TextDetectLanguageRequest.text"]], "text (graphai.api.translation.schemas.translationrequest attribute)": [[31, "graphai.api.translation.schemas.TranslationRequest.text"]], "text_too_large (graphai.api.translation.schemas.translationtaskresponse attribute)": [[31, "graphai.api.translation.schemas.TranslationTaskResponse.text_too_large"]], "graphai.api.video": [[32, "module-graphai.api.video"]], "calculate_video_fingerprint() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.calculate_video_fingerprint"]], "calculate_video_fingerprint_status() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.calculate_video_fingerprint_status"]], "detect_slides() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.detect_slides"]], "detect_slides_status() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.detect_slides_status"]], "extract_audio() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.extract_audio"]], "extract_audio_status() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.extract_audio_status"]], "get_file() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.get_file"]], "get_retrieve_file_status() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.get_retrieve_file_status"]], "graphai.api.video.router": [[33, "module-graphai.api.video.router"]], "retrieve_file() (in module graphai.api.video.router)": [[33, "graphai.api.video.router.retrieve_file"]], "detectslidesrequest (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.DetectSlidesRequest"]], "detectslidesresponse (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.DetectSlidesResponse"]], "detectslidestaskresponse (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.DetectSlidesTaskResponse"]], "extractaudiorequest (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.ExtractAudioRequest"]], "extractaudioresponse (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.ExtractAudioResponse"]], "extractaudiotaskresponse (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.ExtractAudioTaskResponse"]], "retrieveurlrequest (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.RetrieveURLRequest"]], "retrieveurlresponse (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.RetrieveURLResponse"]], "retrieveurlresponseinner (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.RetrieveURLResponseInner"]], "slidedetectionparams (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.SlideDetectionParams"]], "slidetokenandtimestamp (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.SlideTokenAndTimeStamp"]], "videofingerprintrequest (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.VideoFingerprintRequest"]], "videofingerprintresponse (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.VideoFingerprintResponse"]], "videofingerprinttaskresponse (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.VideoFingerprintTaskResponse"]], "videostreaminfo (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.VideoStreamInfo"]], "videotokenstatus (class in graphai.api.video.schemas)": [[34, "graphai.api.video.schemas.VideoTokenStatus"]], "bit_rate (graphai.api.video.schemas.videostreaminfo attribute)": [[34, "graphai.api.video.schemas.VideoStreamInfo.bit_rate"]], "closest_token (graphai.api.video.schemas.videofingerprinttaskresponse attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintTaskResponse.closest_token"]], "codec_name (graphai.api.video.schemas.videostreaminfo attribute)": [[34, "graphai.api.video.schemas.VideoStreamInfo.codec_name"]], "codec_type (graphai.api.video.schemas.videostreaminfo attribute)": [[34, "graphai.api.video.schemas.VideoStreamInfo.codec_type"]], "default_threshold (graphai.api.video.schemas.slidedetectionparams attribute)": [[34, "graphai.api.video.schemas.SlideDetectionParams.default_threshold"]], "duration (graphai.api.video.schemas.extractaudiotaskresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioTaskResponse.duration"]], "duration (graphai.api.video.schemas.videostreaminfo attribute)": [[34, "graphai.api.video.schemas.VideoStreamInfo.duration"]], "force (graphai.api.video.schemas.detectslidesrequest attribute)": [[34, "graphai.api.video.schemas.DetectSlidesRequest.force"]], "force (graphai.api.video.schemas.extractaudiorequest attribute)": [[34, "graphai.api.video.schemas.ExtractAudioRequest.force"]], "force (graphai.api.video.schemas.retrieveurlrequest attribute)": [[34, "graphai.api.video.schemas.RetrieveURLRequest.force"]], "force (graphai.api.video.schemas.videofingerprintrequest attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintRequest.force"]], "fresh (graphai.api.video.schemas.detectslidestaskresponse attribute)": [[34, "graphai.api.video.schemas.DetectSlidesTaskResponse.fresh"]], "fresh (graphai.api.video.schemas.extractaudiotaskresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioTaskResponse.fresh"]], "fresh (graphai.api.video.schemas.retrieveurlresponseinner attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponseInner.fresh"]], "fresh (graphai.api.video.schemas.videofingerprinttaskresponse attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintTaskResponse.fresh"]], "graphai.api.video.schemas": [[34, "module-graphai.api.video.schemas"]], "hash_thresh (graphai.api.video.schemas.slidedetectionparams attribute)": [[34, "graphai.api.video.schemas.SlideDetectionParams.hash_thresh"]], "include_first (graphai.api.video.schemas.slidedetectionparams attribute)": [[34, "graphai.api.video.schemas.SlideDetectionParams.include_first"]], "include_last (graphai.api.video.schemas.slidedetectionparams attribute)": [[34, "graphai.api.video.schemas.SlideDetectionParams.include_last"]], "language (graphai.api.video.schemas.detectslidesrequest attribute)": [[34, "graphai.api.video.schemas.DetectSlidesRequest.language"]], "model_config (graphai.api.video.schemas.detectslidesrequest attribute)": [[34, "graphai.api.video.schemas.DetectSlidesRequest.model_config"]], "model_config (graphai.api.video.schemas.detectslidesresponse attribute)": [[34, "graphai.api.video.schemas.DetectSlidesResponse.model_config"]], "model_config (graphai.api.video.schemas.detectslidestaskresponse attribute)": [[34, "graphai.api.video.schemas.DetectSlidesTaskResponse.model_config"]], "model_config (graphai.api.video.schemas.extractaudiorequest attribute)": [[34, "graphai.api.video.schemas.ExtractAudioRequest.model_config"]], "model_config (graphai.api.video.schemas.extractaudioresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioResponse.model_config"]], "model_config (graphai.api.video.schemas.extractaudiotaskresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioTaskResponse.model_config"]], "model_config (graphai.api.video.schemas.retrieveurlrequest attribute)": [[34, "graphai.api.video.schemas.RetrieveURLRequest.model_config"]], "model_config (graphai.api.video.schemas.retrieveurlresponse attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponse.model_config"]], "model_config (graphai.api.video.schemas.retrieveurlresponseinner attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponseInner.model_config"]], "model_config (graphai.api.video.schemas.slidedetectionparams attribute)": [[34, "graphai.api.video.schemas.SlideDetectionParams.model_config"]], "model_config (graphai.api.video.schemas.slidetokenandtimestamp attribute)": [[34, "graphai.api.video.schemas.SlideTokenAndTimeStamp.model_config"]], "model_config (graphai.api.video.schemas.videofingerprintrequest attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintRequest.model_config"]], "model_config (graphai.api.video.schemas.videofingerprintresponse attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintResponse.model_config"]], "model_config (graphai.api.video.schemas.videofingerprinttaskresponse attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintTaskResponse.model_config"]], "model_config (graphai.api.video.schemas.videostreaminfo attribute)": [[34, "graphai.api.video.schemas.VideoStreamInfo.model_config"]], "model_config (graphai.api.video.schemas.videotokenstatus attribute)": [[34, "graphai.api.video.schemas.VideoTokenStatus.model_config"]], "multiplier (graphai.api.video.schemas.slidedetectionparams attribute)": [[34, "graphai.api.video.schemas.SlideDetectionParams.multiplier"]], "parameters (graphai.api.video.schemas.detectslidesrequest attribute)": [[34, "graphai.api.video.schemas.DetectSlidesRequest.parameters"]], "playlist (graphai.api.video.schemas.retrieveurlrequest attribute)": [[34, "graphai.api.video.schemas.RetrieveURLRequest.playlist"]], "recalculate_cached (graphai.api.video.schemas.detectslidesrequest attribute)": [[34, "graphai.api.video.schemas.DetectSlidesRequest.recalculate_cached"]], "recalculate_cached (graphai.api.video.schemas.extractaudiorequest attribute)": [[34, "graphai.api.video.schemas.ExtractAudioRequest.recalculate_cached"]], "resolution (graphai.api.video.schemas.videostreaminfo attribute)": [[34, "graphai.api.video.schemas.VideoStreamInfo.resolution"]], "result (graphai.api.video.schemas.videofingerprinttaskresponse attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintTaskResponse.result"]], "sample_rate (graphai.api.video.schemas.videostreaminfo attribute)": [[34, "graphai.api.video.schemas.VideoStreamInfo.sample_rate"]], "slide_tokens (graphai.api.video.schemas.detectslidestaskresponse attribute)": [[34, "graphai.api.video.schemas.DetectSlidesTaskResponse.slide_tokens"]], "streams (graphai.api.video.schemas.videotokenstatus attribute)": [[34, "graphai.api.video.schemas.VideoTokenStatus.streams"]], "successful (graphai.api.video.schemas.detectslidestaskresponse attribute)": [[34, "graphai.api.video.schemas.DetectSlidesTaskResponse.successful"]], "successful (graphai.api.video.schemas.extractaudiotaskresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioTaskResponse.successful"]], "successful (graphai.api.video.schemas.retrieveurlresponseinner attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponseInner.successful"]], "successful (graphai.api.video.schemas.videofingerprinttaskresponse attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintTaskResponse.successful"]], "task_result (graphai.api.video.schemas.detectslidesresponse attribute)": [[34, "graphai.api.video.schemas.DetectSlidesResponse.task_result"]], "task_result (graphai.api.video.schemas.extractaudioresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioResponse.task_result"]], "task_result (graphai.api.video.schemas.retrieveurlresponse attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponse.task_result"]], "task_result (graphai.api.video.schemas.videofingerprintresponse attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintResponse.task_result"]], "timestamp (graphai.api.video.schemas.slidetokenandtimestamp attribute)": [[34, "graphai.api.video.schemas.SlideTokenAndTimeStamp.timestamp"]], "token (graphai.api.video.schemas.detectslidesrequest attribute)": [[34, "graphai.api.video.schemas.DetectSlidesRequest.token"]], "token (graphai.api.video.schemas.extractaudiorequest attribute)": [[34, "graphai.api.video.schemas.ExtractAudioRequest.token"]], "token (graphai.api.video.schemas.extractaudiotaskresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioTaskResponse.token"]], "token (graphai.api.video.schemas.retrieveurlresponseinner attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponseInner.token"]], "token (graphai.api.video.schemas.slidetokenandtimestamp attribute)": [[34, "graphai.api.video.schemas.SlideTokenAndTimeStamp.token"]], "token (graphai.api.video.schemas.videofingerprintrequest attribute)": [[34, "graphai.api.video.schemas.VideoFingerprintRequest.token"]], "token_size (graphai.api.video.schemas.retrieveurlresponseinner attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponseInner.token_size"]], "token_status (graphai.api.video.schemas.extractaudiotaskresponse attribute)": [[34, "graphai.api.video.schemas.ExtractAudioTaskResponse.token_status"]], "token_status (graphai.api.video.schemas.retrieveurlresponseinner attribute)": [[34, "graphai.api.video.schemas.RetrieveURLResponseInner.token_status"]], "token_status (graphai.api.video.schemas.slidetokenandtimestamp attribute)": [[34, "graphai.api.video.schemas.SlideTokenAndTimeStamp.token_status"]], "url (graphai.api.video.schemas.retrieveurlrequest attribute)": [[34, "graphai.api.video.schemas.RetrieveURLRequest.url"]], "graphai.api.voice": [[35, "module-graphai.api.voice"]], "calculate_audio_fingerprint() (in module graphai.api.voice.router)": [[36, "graphai.api.voice.router.calculate_audio_fingerprint"]], "calculate_audio_fingerprint_status() (in module graphai.api.voice.router)": [[36, "graphai.api.voice.router.calculate_audio_fingerprint_status"]], "detect_language() (in module graphai.api.voice.router)": [[36, "graphai.api.voice.router.detect_language"]], "detect_language_status() (in module graphai.api.voice.router)": [[36, "graphai.api.voice.router.detect_language_status"]], "graphai.api.voice.router": [[36, "module-graphai.api.voice.router"]], "transcribe() (in module graphai.api.voice.router)": [[36, "graphai.api.voice.router.transcribe"]], "transcribe_status() (in module graphai.api.voice.router)": [[36, "graphai.api.voice.router.transcribe_status"]], "audiodetectlanguagerequest (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageRequest"]], "audiodetectlanguageresponse (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageResponse"]], "audiodetectlanguagetaskresponse (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageTaskResponse"]], "audiofingerprintrequest (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioFingerprintRequest"]], "audiofingerprintresponse (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioFingerprintResponse"]], "audiofingerprinttaskresponse (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse"]], "audiotranscriptionrequest (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioTranscriptionRequest"]], "audiotranscriptionresponse (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioTranscriptionResponse"]], "audiotranscriptiontaskresponse (class in graphai.api.voice.schemas)": [[37, "graphai.api.voice.schemas.AudioTranscriptionTaskResponse"]], "closest_token (graphai.api.voice.schemas.audiofingerprinttaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse.closest_token"]], "closest_token_origin (graphai.api.voice.schemas.audiofingerprinttaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse.closest_token_origin"]], "duration (graphai.api.voice.schemas.audiofingerprinttaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse.duration"]], "force (graphai.api.voice.schemas.audiodetectlanguagerequest attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageRequest.force"]], "force (graphai.api.voice.schemas.audiofingerprintrequest attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintRequest.force"]], "force (graphai.api.voice.schemas.audiotranscriptionrequest attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionRequest.force"]], "force_lang (graphai.api.voice.schemas.audiotranscriptionrequest attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionRequest.force_lang"]], "fresh (graphai.api.voice.schemas.audiodetectlanguagetaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageTaskResponse.fresh"]], "fresh (graphai.api.voice.schemas.audiofingerprinttaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse.fresh"]], "fresh (graphai.api.voice.schemas.audiotranscriptiontaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionTaskResponse.fresh"]], "graphai.api.voice.schemas": [[37, "module-graphai.api.voice.schemas"]], "language (graphai.api.voice.schemas.audiodetectlanguagetaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageTaskResponse.language"]], "language (graphai.api.voice.schemas.audiotranscriptiontaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionTaskResponse.language"]], "model_config (graphai.api.voice.schemas.audiodetectlanguagerequest attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageRequest.model_config"]], "model_config (graphai.api.voice.schemas.audiodetectlanguageresponse attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageResponse.model_config"]], "model_config (graphai.api.voice.schemas.audiodetectlanguagetaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageTaskResponse.model_config"]], "model_config (graphai.api.voice.schemas.audiofingerprintrequest attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintRequest.model_config"]], "model_config (graphai.api.voice.schemas.audiofingerprintresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintResponse.model_config"]], "model_config (graphai.api.voice.schemas.audiofingerprinttaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse.model_config"]], "model_config (graphai.api.voice.schemas.audiotranscriptionrequest attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionRequest.model_config"]], "model_config (graphai.api.voice.schemas.audiotranscriptionresponse attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionResponse.model_config"]], "model_config (graphai.api.voice.schemas.audiotranscriptiontaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionTaskResponse.model_config"]], "result (graphai.api.voice.schemas.audiofingerprinttaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse.result"]], "strict (graphai.api.voice.schemas.audiotranscriptionrequest attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionRequest.strict"]], "subtitle_results (graphai.api.voice.schemas.audiotranscriptiontaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionTaskResponse.subtitle_results"]], "successful (graphai.api.voice.schemas.audiofingerprinttaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintTaskResponse.successful"]], "task_result (graphai.api.voice.schemas.audiodetectlanguageresponse attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageResponse.task_result"]], "task_result (graphai.api.voice.schemas.audiofingerprintresponse attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintResponse.task_result"]], "task_result (graphai.api.voice.schemas.audiotranscriptionresponse attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionResponse.task_result"]], "token (graphai.api.voice.schemas.audiodetectlanguagerequest attribute)": [[37, "graphai.api.voice.schemas.AudioDetectLanguageRequest.token"]], "token (graphai.api.voice.schemas.audiofingerprintrequest attribute)": [[37, "graphai.api.voice.schemas.AudioFingerprintRequest.token"]], "token (graphai.api.voice.schemas.audiotranscriptionrequest attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionRequest.token"]], "transcript_results (graphai.api.voice.schemas.audiotranscriptiontaskresponse attribute)": [[37, "graphai.api.voice.schemas.AudioTranscriptionTaskResponse.transcript_results"]], "graphai.celery": [[38, "module-graphai.celery"]], "graphai.celery.common": [[39, "module-graphai.celery.common"]], "baseconfig (class in graphai.celery.common.celery_config)": [[40, "graphai.celery.common.celery_config.BaseConfig"]], "developmentconfig (class in graphai.celery.common.celery_config)": [[40, "graphai.celery.common.celery_config.DevelopmentConfig"]], "create_celery() (in module graphai.celery.common.celery_config)": [[40, "graphai.celery.common.celery_config.create_celery"]], "get_celery_task() (in module graphai.celery.common.celery_config)": [[40, "graphai.celery.common.celery_config.get_celery_task"]], "get_settings() (in module graphai.celery.common.celery_config)": [[40, "graphai.celery.common.celery_config.get_settings"]], "get_task_info() (in module graphai.celery.common.celery_config)": [[40, "graphai.celery.common.celery_config.get_task_info"]], "graphai.celery.common.celery_config": [[40, "module-graphai.celery.common.celery_config"]], "route_task() (in module graphai.celery.common.celery_config)": [[40, "graphai.celery.common.celery_config.route_task"]], "get_n_celery_workers() (in module graphai.celery.common.celery_tools)": [[41, "graphai.celery.common.celery_tools.get_n_celery_workers"]], "graphai.celery.common.celery_tools": [[41, "module-graphai.celery.common.celery_tools"]], "direct_lookup_generic_job() (in module graphai.celery.common.jobs)": [[42, "graphai.celery.common.jobs.direct_lookup_generic_job"]], "graphai.celery.common.jobs": [[42, "module-graphai.celery.common.jobs"]], "graphai.celery.common.log": [[43, "module-graphai.celery.common.log"]], "log() (in module graphai.celery.common.log)": [[43, "graphai.celery.common.log.log"]], "graphai.celery.common.tasks": [[44, "module-graphai.celery.common.tasks"]], "graphai.celery.embedding": [[45, "module-graphai.celery.embedding"]], "embedding_job() (in module graphai.celery.embedding.jobs)": [[46, "graphai.celery.embedding.jobs.embedding_job"]], "fingerprint_compute_job() (in module graphai.celery.embedding.jobs)": [[46, "graphai.celery.embedding.jobs.fingerprint_compute_job"]], "fingerprint_job() (in module graphai.celery.embedding.jobs)": [[46, "graphai.celery.embedding.jobs.fingerprint_job"]], "fingerprint_lookup_job() (in module graphai.celery.embedding.jobs)": [[46, "graphai.celery.embedding.jobs.fingerprint_lookup_job"]], "get_embedding_text_fingerprint_chain_list() (in module graphai.celery.embedding.jobs)": [[46, "graphai.celery.embedding.jobs.get_embedding_text_fingerprint_chain_list"]], "graphai.celery.embedding.jobs": [[46, "module-graphai.celery.embedding.jobs"]], "graphai.celery.embedding.tasks": [[47, "module-graphai.celery.embedding.tasks"]], "graphai.celery.image": [[48, "module-graphai.celery.image"]], "fingerprint_job() (in module graphai.celery.image.jobs)": [[49, "graphai.celery.image.jobs.fingerprint_job"]], "fingerprint_lookup_job() (in module graphai.celery.image.jobs)": [[49, "graphai.celery.image.jobs.fingerprint_lookup_job"]], "graphai.celery.image.jobs": [[49, "module-graphai.celery.image.jobs"]], "ocr_job() (in module graphai.celery.image.jobs)": [[49, "graphai.celery.image.jobs.ocr_job"]], "retrieve_image_from_url_job() (in module graphai.celery.image.jobs)": [[49, "graphai.celery.image.jobs.retrieve_image_from_url_job"]], "upload_image_from_file_job() (in module graphai.celery.image.jobs)": [[49, "graphai.celery.image.jobs.upload_image_from_file_job"]], "graphai.celery.image.tasks": [[50, "module-graphai.celery.image.tasks"]], "graphai.celery.ontology": [[51, "module-graphai.celery.ontology"]], "breakup_cluster_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.breakup_cluster_job"]], "category_info_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.category_info_job"]], "cluster_info_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.cluster_info_job"]], "cluster_nearest_category_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.cluster_nearest_category_job"]], "concept_info_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.concept_info_job"]], "concept_nearest_category_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.concept_nearest_category_job"]], "concept_nearest_concept_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.concept_nearest_concept_job"]], "graph_distance_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.graph_distance_job"]], "graphai.celery.ontology.jobs": [[52, "module-graphai.celery.ontology.jobs"]], "openalex_category_nearest_topics_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.openalex_category_nearest_topics_job"]], "openalex_topic_nearest_categories_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.openalex_topic_nearest_categories_job"]], "recompute_clusters_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.recompute_clusters_job"]], "tree_job() (in module graphai.celery.ontology.jobs)": [[52, "graphai.celery.ontology.jobs.tree_job"]], "graphai.celery.ontology.tasks": [[53, "module-graphai.celery.ontology.tasks"]], "graphai.celery.retrieval": [[54, "module-graphai.celery.retrieval"]], "anonymize_text_job() (in module graphai.celery.retrieval.jobs)": [[55, "graphai.celery.retrieval.jobs.anonymize_text_job"]], "chunk_text_job() (in module graphai.celery.retrieval.jobs)": [[55, "graphai.celery.retrieval.jobs.chunk_text_job"]], "graphai.celery.retrieval.jobs": [[55, "module-graphai.celery.retrieval.jobs"]], "retrieve_from_es_job() (in module graphai.celery.retrieval.jobs)": [[55, "graphai.celery.retrieval.jobs.retrieve_from_es_job"]], "graphai.celery.retrieval.tasks": [[56, "module-graphai.celery.retrieval.tasks"]], "graphai.celery.scraping": [[57, "module-graphai.celery.scraping"]], "extract_content_job() (in module graphai.celery.scraping.jobs)": [[58, "graphai.celery.scraping.jobs.extract_content_job"]], "extract_sublinks_job() (in module graphai.celery.scraping.jobs)": [[58, "graphai.celery.scraping.jobs.extract_sublinks_job"]], "graphai.celery.scraping.jobs": [[58, "module-graphai.celery.scraping.jobs"]], "sublink_lookup_job() (in module graphai.celery.scraping.jobs)": [[58, "graphai.celery.scraping.jobs.sublink_lookup_job"]], "graphai.celery.scraping.tasks": [[59, "module-graphai.celery.scraping.tasks"]], "graphai.celery.text": [[60, "module-graphai.celery.text"]], "generate_exercise() (in module graphai.celery.text.jobs)": [[61, "graphai.celery.text.jobs.generate_exercise"]], "graphai.celery.text.jobs": [[61, "module-graphai.celery.text.jobs"]], "keywords() (in module graphai.celery.text.jobs)": [[61, "graphai.celery.text.jobs.keywords"]], "wikify_graph_svg() (in module graphai.celery.text.jobs)": [[61, "graphai.celery.text.jobs.wikify_graph_svg"]], "wikify_keywords() (in module graphai.celery.text.jobs)": [[61, "graphai.celery.text.jobs.wikify_keywords"]], "wikify_ontology_svg() (in module graphai.celery.text.jobs)": [[61, "graphai.celery.text.jobs.wikify_ontology_svg"]], "wikify_text() (in module graphai.celery.text.jobs)": [[61, "graphai.celery.text.jobs.wikify_text"]], "graphai.celery.text.tasks": [[62, "module-graphai.celery.text.tasks"]], "graphai.celery.translation": [[63, "module-graphai.celery.translation"]], "detect_text_language_job() (in module graphai.celery.translation.jobs)": [[64, "graphai.celery.translation.jobs.detect_text_language_job"]], "fingerprint_compute_job() (in module graphai.celery.translation.jobs)": [[64, "graphai.celery.translation.jobs.fingerprint_compute_job"]], "fingerprint_job() (in module graphai.celery.translation.jobs)": [[64, "graphai.celery.translation.jobs.fingerprint_job"]], "fingerprint_lookup_job() (in module graphai.celery.translation.jobs)": [[64, "graphai.celery.translation.jobs.fingerprint_lookup_job"]], "get_translation_text_fingerprint_chain_list() (in module graphai.celery.translation.jobs)": [[64, "graphai.celery.translation.jobs.get_translation_text_fingerprint_chain_list"]], "graphai.celery.translation.jobs": [[64, "module-graphai.celery.translation.jobs"]], "translation_job() (in module graphai.celery.translation.jobs)": [[64, "graphai.celery.translation.jobs.translation_job"]], "graphai.celery.translation.tasks": [[65, "module-graphai.celery.translation.tasks"]], "graphai.celery.video": [[66, "module-graphai.celery.video"]], "detect_slides_job() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.detect_slides_job"]], "extract_audio_job() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.extract_audio_job"]], "fingerprint_job() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.fingerprint_job"]], "fingerprint_lookup_job() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.fingerprint_lookup_job"]], "get_audio_fingerprint_chain_list() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.get_audio_fingerprint_chain_list"]], "get_file_job() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.get_file_job"]], "get_slide_fingerprint_chain_list() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.get_slide_fingerprint_chain_list"]], "get_video_fingerprint_chain_list() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.get_video_fingerprint_chain_list"]], "graphai.celery.video.jobs": [[67, "module-graphai.celery.video.jobs"]], "retrieve_url_job() (in module graphai.celery.video.jobs)": [[67, "graphai.celery.video.jobs.retrieve_url_job"]], "graphai.celery.video.tasks": [[68, "module-graphai.celery.video.tasks"]], "graphai.celery.voice": [[69, "module-graphai.celery.voice"]], "detect_language_job() (in module graphai.celery.voice.jobs)": [[70, "graphai.celery.voice.jobs.detect_language_job"]], "fingerprint_job() (in module graphai.celery.voice.jobs)": [[70, "graphai.celery.voice.jobs.fingerprint_job"]], "fingerprint_lookup_job() (in module graphai.celery.voice.jobs)": [[70, "graphai.celery.voice.jobs.fingerprint_lookup_job"]], "get_audio_language_detection_task_chain() (in module graphai.celery.voice.jobs)": [[70, "graphai.celery.voice.jobs.get_audio_language_detection_task_chain"]], "graphai.celery.voice.jobs": [[70, "module-graphai.celery.voice.jobs"]], "language_lookup_job() (in module graphai.celery.voice.jobs)": [[70, "graphai.celery.voice.jobs.language_lookup_job"]], "transcribe_job() (in module graphai.celery.voice.jobs)": [[70, "graphai.celery.voice.jobs.transcribe_job"]], "graphai.celery.voice.tasks": [[71, "module-graphai.celery.voice.tasks"]], "graphai.core": [[72, "module-graphai.core"]], "graphai.core.common": [[73, "module-graphai.core.common"]], "audiodbcachingmanager (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.AudioDBCachingManager"]], "embeddingdbcachingmanager (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.EmbeddingDBCachingManager"]], "fingerprintparameters (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.FingerprintParameters"]], "scrapingdbcachingmanager (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.ScrapingDBCachingManager"]], "slidedbcachingmanager (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.SlideDBCachingManager"]], "textdbcachingmanager (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.TextDBCachingManager"]], "videoconfig (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.VideoConfig"]], "videodbcachingmanager (class in graphai.core.common.caching)": [[74, "graphai.core.common.caching.VideoDBCachingManager"]], "concat_file_path() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.concat_file_path"]], "create_symlink() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.create_symlink"]], "create_symlink_between_paths() (in module graphai.core.common.caching)": [[74, "graphai.core.common.caching.create_symlink_between_paths"]], "delete_file() (in module graphai.core.common.caching)": [[74, "graphai.core.common.caching.delete_file"]], "generate_filepath() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.generate_filepath"]], "get_audio_dir() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.get_audio_dir"]], "get_details_using_origin() (graphai.core.common.caching.scrapingdbcachingmanager method)": [[74, "graphai.core.common.caching.ScrapingDBCachingManager.get_details_using_origin"]], "get_image_dir() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.get_image_dir"]], "get_min_sim_audio() (graphai.core.common.caching.fingerprintparameters method)": [[74, "graphai.core.common.caching.FingerprintParameters.get_min_sim_audio"]], "get_min_sim_image() (graphai.core.common.caching.fingerprintparameters method)": [[74, "graphai.core.common.caching.FingerprintParameters.get_min_sim_image"]], "get_min_sim_video() (graphai.core.common.caching.fingerprintparameters method)": [[74, "graphai.core.common.caching.FingerprintParameters.get_min_sim_video"]], "get_root_dir() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.get_root_dir"]], "get_token_file_status() (in module graphai.core.common.caching)": [[74, "graphai.core.common.caching.get_token_file_status"]], "get_transcript_dir() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.get_transcript_dir"]], "get_video_dir() (graphai.core.common.caching.videoconfig method)": [[74, "graphai.core.common.caching.VideoConfig.get_video_dir"]], "graphai.core.common.caching": [[74, "module-graphai.core.common.caching"]], "init_db() (graphai.core.common.caching.audiodbcachingmanager method)": [[74, "graphai.core.common.caching.AudioDBCachingManager.init_db"]], "init_db() (graphai.core.common.caching.embeddingdbcachingmanager method)": [[74, "graphai.core.common.caching.EmbeddingDBCachingManager.init_db"]], "init_db() (graphai.core.common.caching.scrapingdbcachingmanager method)": [[74, "graphai.core.common.caching.ScrapingDBCachingManager.init_db"]], "init_db() (graphai.core.common.caching.slidedbcachingmanager method)": [[74, "graphai.core.common.caching.SlideDBCachingManager.init_db"]], "init_db() (graphai.core.common.caching.textdbcachingmanager method)": [[74, "graphai.core.common.caching.TextDBCachingManager.init_db"]], "init_db() (graphai.core.common.caching.videodbcachingmanager method)": [[74, "graphai.core.common.caching.VideoDBCachingManager.init_db"]], "load_values() (graphai.core.common.caching.fingerprintparameters method)": [[74, "graphai.core.common.caching.FingerprintParameters.load_values"]], "write_binary_file_to_token() (in module graphai.core.common.caching)": [[74, "graphai.core.common.caching.write_binary_file_to_token"]], "convert_list_to_text() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.convert_list_to_text"]], "convert_text_back_to_list() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.convert_text_back_to_list"]], "copy_file_within_folder() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.copy_file_within_folder"]], "file_exists() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.file_exists"]], "format_datetime_for_mysql() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.format_datetime_for_mysql"]], "generate_random_token() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.generate_random_token"]], "get_current_datetime() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.get_current_datetime"]], "get_file_size() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.get_file_size"]], "get_most_common_element() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.get_most_common_element"]], "graphai.core.common.common_utils": [[75, "module-graphai.core.common.common_utils"]], "invert_dict() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.invert_dict"]], "is_effective_url() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.is_effective_url"]], "is_pdf() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.is_pdf"]], "is_token() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.is_token"]], "is_url() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.is_url"]], "make_sure_path_exists() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.make_sure_path_exists"]], "parse_mysql_datetime() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.parse_mysql_datetime"]], "read_json_file() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.read_json_file"]], "read_text_file() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.read_text_file"]], "retrieve_generic_file_from_generic_url() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.retrieve_generic_file_from_generic_url"]], "strtobool() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.strtobool"]], "write_json_file() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.write_json_file"]], "write_text_file() (in module graphai.core.common.common_utils)": [[75, "graphai.core.common.common_utils.write_text_file"]], "graphai.core.common.config": [[76, "module-graphai.core.common.config"]], "compare_decoded_fingerprints() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.compare_decoded_fingerprints"]], "compare_encoded_fingerprints() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.compare_encoded_fingerprints"]], "compute_text_fingerprint() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.compute_text_fingerprint"]], "find_closest_audio_fingerprint_from_list() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.find_closest_audio_fingerprint_from_list"]], "find_closest_fingerprint_for_list_from_list() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.find_closest_fingerprint_for_list_from_list"]], "find_closest_fingerprint_from_list() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.find_closest_fingerprint_from_list"]], "find_closest_image_fingerprint_from_list() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.find_closest_image_fingerprint_from_list"]], "find_closest_text_fingerprint_from_list() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.find_closest_text_fingerprint_from_list"]], "graphai.core.common.fingerprinting": [[77, "module-graphai.core.common.fingerprinting"]], "md5_text() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.md5_text"]], "md5_video_or_audio() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.md5_video_or_audio"]], "perceptual_hash_audio() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.perceptual_hash_audio"]], "perceptual_hash_image() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.perceptual_hash_image"]], "perceptual_hash_pdf() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.perceptual_hash_pdf"]], "perceptual_hash_text() (in module graphai.core.common.fingerprinting)": [[77, "graphai.core.common.fingerprinting.perceptual_hash_text"]], "add_token_status_to_results() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.add_token_status_to_results"]], "cache_lookup_generic() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.cache_lookup_generic"]], "database_callback_generic() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.database_callback_generic"]], "fingerprint_based_text_lookup() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.fingerprint_based_text_lookup"]], "fingerprint_cache_lookup() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.fingerprint_cache_lookup"]], "fingerprint_cache_lookup_with_most_similar() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.fingerprint_cache_lookup_with_most_similar"]], "fingerprint_lookup_callback() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.fingerprint_lookup_callback"]], "fingerprint_lookup_direct() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.fingerprint_lookup_direct"]], "fingerprint_lookup_parallel() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.fingerprint_lookup_parallel"]], "fingerprint_lookup_retrieve_from_db() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.fingerprint_lookup_retrieve_from_db"]], "graphai.core.common.lookup": [[78, "module-graphai.core.common.lookup"]], "ignore_fingerprint_results_callback() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.ignore_fingerprint_results_callback"]], "is_fingerprinted() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.is_fingerprinted"]], "lookup_latest_allowed_date() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.lookup_latest_allowed_date"]], "retrieve_fingerprint_callback() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.retrieve_fingerprint_callback"]], "token_based_text_lookup() (in module graphai.core.common.lookup)": [[78, "graphai.core.common.lookup.token_based_text_lookup"]], "detect_text_language() (in module graphai.core.common.multimedia_utils)": [[79, "graphai.core.common.multimedia_utils.detect_text_language"]], "get_audio_token_status() (in module graphai.core.common.multimedia_utils)": [[79, "graphai.core.common.multimedia_utils.get_audio_token_status"]], "get_available_streams() (in module graphai.core.common.multimedia_utils)": [[79, "graphai.core.common.multimedia_utils.get_available_streams"]], "get_image_token_status() (in module graphai.core.common.multimedia_utils)": [[79, "graphai.core.common.multimedia_utils.get_image_token_status"]], "get_video_token_status() (in module graphai.core.common.multimedia_utils)": [[79, "graphai.core.common.multimedia_utils.get_video_token_status"]], "graphai.core.common.multimedia_utils": [[79, "module-graphai.core.common.multimedia_utils"]], "perform_probe() (in module graphai.core.common.multimedia_utils)": [[79, "graphai.core.common.multimedia_utils.perform_probe"]], "perform_tesseract_ocr() (in module graphai.core.common.multimedia_utils)": [[79, "graphai.core.common.multimedia_utils.perform_tesseract_ocr"]], "graphai.core.embedding": [[80, "module-graphai.core.embedding"]], "embeddingmodels (class in graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.EmbeddingModels"]], "compute_embedding_text_fingerprint_callback() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.compute_embedding_text_fingerprint_callback"]], "copy_embedding_object() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.copy_embedding_object"]], "embed() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.embed"]], "embed_text() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embed_text"]], "embedding_from_json() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_from_json"]], "embedding_text_list_dummy_fingerprint_parallel() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_text_list_dummy_fingerprint_parallel"]], "embedding_text_list_embed_callback() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_text_list_embed_callback"]], "embedding_text_list_embed_jsonify_callback() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_text_list_embed_jsonify_callback"]], "embedding_text_list_embed_parallel() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_text_list_embed_parallel"]], "embedding_text_list_fingerprint_callback() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_text_list_fingerprint_callback"]], "embedding_text_list_fingerprint_parallel() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_text_list_fingerprint_parallel"]], "embedding_to_json() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.embedding_to_json"]], "fingerprint_based_embedding_lookup() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.fingerprint_based_embedding_lookup"]], "generate_embedding_text_token() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.generate_embedding_text_token"]], "get_device() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.get_device"]], "get_last_usage() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.get_last_usage"]], "get_max_tokens() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.get_max_tokens"]], "get_text_token_count_using_model() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.get_text_token_count_using_model"]], "get_token_count() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.get_token_count"]], "get_tokenizer() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.get_tokenizer"]], "graphai.core.embedding.embedding": [[81, "module-graphai.core.embedding.embedding"]], "insert_embedding_into_db() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.insert_embedding_into_db"]], "jsonify_embedding_results() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.jsonify_embedding_results"]], "load_model() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.load_model"]], "load_models() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.load_models"]], "model_loaded() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.model_loaded"]], "set_tokenizer() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.set_tokenizer"]], "token_based_embedding_lookup() (in module graphai.core.embedding.embedding)": [[81, "graphai.core.embedding.embedding.token_based_embedding_lookup"]], "unload_model() (graphai.core.embedding.embedding.embeddingmodels method)": [[81, "graphai.core.embedding.embedding.EmbeddingModels.unload_model"]], "graphai.core.image": [[82, "module-graphai.core.image"]], "break_pdf_into_images() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.break_pdf_into_images"]], "cache_lookup_extract_slide_text() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.cache_lookup_extract_slide_text"]], "cache_lookup_retrieve_image_from_url() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.cache_lookup_retrieve_image_from_url"]], "collect_multi_image_ocr() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.collect_multi_image_ocr"]], "create_image_filename_using_url_format() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.create_image_filename_using_url_format"]], "create_origin_token_using_info() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.create_origin_token_using_info"]], "extract_multi_image_text() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.extract_multi_image_text"]], "extract_slide_text() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.extract_slide_text"]], "extract_slide_text_callback() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.extract_slide_text_callback"]], "graphai.core.image.image": [[83, "module-graphai.core.image.image"]], "perform_ocr() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.perform_ocr"]], "retrieve_image_file_from_url() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.retrieve_image_file_from_url"]], "retrieve_image_file_from_url_callback() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.retrieve_image_file_from_url_callback"]], "upload_image_from_file() (in module graphai.core.image.image)": [[83, "graphai.core.image.image.upload_image_from_file"]], "abstractocrmodel (class in graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.AbstractOCRModel"]], "geminiocrmodel (class in graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.GeminiOCRModel"]], "googleocrmodel (class in graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.GoogleOCRModel"]], "imgtobase64converter (class in graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.ImgToBase64Converter"]], "openaiocrmodel (class in graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.OpenAIOCRModel"]], "cleanup_json() (in module graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.cleanup_json"]], "establish_connection() (graphai.core.image.ocr.abstractocrmodel method)": [[84, "graphai.core.image.ocr.AbstractOCRModel.establish_connection"]], "get_base64() (graphai.core.image.ocr.imgtobase64converter method)": [[84, "graphai.core.image.ocr.ImgToBase64Converter.get_base64"]], "get_ocr_colnames() (in module graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.get_ocr_colnames"]], "graphai.core.image.ocr": [[84, "module-graphai.core.image.ocr"]], "is_valid_latex() (in module graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.is_valid_latex"]], "perform_ocr() (graphai.core.image.ocr.abstractocrmodel method)": [[84, "graphai.core.image.ocr.AbstractOCRModel.perform_ocr"]], "perform_ocr() (graphai.core.image.ocr.geminiocrmodel method)": [[84, "graphai.core.image.ocr.GeminiOCRModel.perform_ocr"]], "perform_ocr() (graphai.core.image.ocr.googleocrmodel method)": [[84, "graphai.core.image.ocr.GoogleOCRModel.perform_ocr"]], "perform_ocr() (graphai.core.image.ocr.openaiocrmodel method)": [[84, "graphai.core.image.ocr.OpenAIOCRModel.perform_ocr"]], "perform_tesseract_ocr_on_pdf() (in module graphai.core.image.ocr)": [[84, "graphai.core.image.ocr.perform_tesseract_ocr_on_pdf"]], "wait_for_ocr_results() (graphai.core.image.ocr.googleocrmodel method)": [[84, "graphai.core.image.ocr.GoogleOCRModel.wait_for_ocr_results"]], "ontologydata (class in graphai.core.ontology)": [[85, "graphai.core.ontology.OntologyData"]], "break_up_cluster() (in module graphai.core.ontology)": [[85, "graphai.core.ontology.break_up_cluster"]], "compute_precalculated_similarity_matrices() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.compute_precalculated_similarity_matrices"]], "compute_symmetric_concept_concept_matrix() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.compute_symmetric_concept_concept_matrix"]], "generate_category_concept_dict() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.generate_category_concept_dict"]], "generate_tree_structure() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.generate_tree_structure"]], "get_category_anchor_pages() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_anchor_pages"]], "get_category_branch() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_branch"]], "get_category_category_similarity() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_category_similarity"]], "get_category_children() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_children"]], "get_category_closest_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_closest_category"]], "get_category_cluster_list() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_cluster_list"]], "get_category_cluster_table() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_cluster_table"]], "get_category_concept_list() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_concept_list"]], "get_category_concept_table() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_concept_table"]], "get_category_parent() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_parent"]], "get_category_to_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_category_to_category"]], "get_cluster_category_closest() (in module graphai.core.ontology)": [[85, "graphai.core.ontology.get_cluster_category_closest"]], "get_cluster_category_similarity() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_category_similarity"]], "get_cluster_children() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_children"]], "get_cluster_closest_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_closest_category"]], "get_cluster_closest_category_embedding() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_closest_category_embedding"]], "get_cluster_cluster_similarity() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_cluster_similarity"]], "get_cluster_concept_list() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_concept_list"]], "get_cluster_concepts() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_concepts"]], "get_cluster_parent() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_cluster_parent"]], "get_concept_category_closest() (in module graphai.core.ontology)": [[85, "graphai.core.ontology.get_concept_category_closest"]], "get_concept_category_closest_embedding() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_category_closest_embedding"]], "get_concept_category_similarity() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_category_similarity"]], "get_concept_closest_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_closest_category"]], "get_concept_closest_concept() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_closest_concept"]], "get_concept_closest_concept_embedding() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_closest_concept_embedding"]], "get_concept_cluster_similarity() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_cluster_similarity"]], "get_concept_concept_closest() (in module graphai.core.ontology)": [[85, "graphai.core.ontology.get_concept_concept_closest"]], "get_concept_concept_graphscore_table() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_concept_graphscore_table"]], "get_concept_concept_similarity() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_concept_similarity"]], "get_concept_name() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_name"]], "get_concept_names_list() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_names_list"]], "get_concept_parent_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_parent_category"]], "get_concept_parent_cluster() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_concept_parent_cluster"]], "get_custom_cluster_closest_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_custom_cluster_closest_category"]], "get_custom_cluster_closest_category_embedding() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_custom_cluster_closest_category_embedding"]], "get_non_ontology_concept_names() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_non_ontology_concept_names"]], "get_ontology_category_info() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_ontology_category_info"]], "get_ontology_category_names() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_ontology_category_names"]], "get_ontology_concept_names_table() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_ontology_concept_names_table"]], "get_openalex_nearest() (in module graphai.core.ontology)": [[85, "graphai.core.ontology.get_openalex_nearest"]], "get_root_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_root_category"]], "get_test_category_concept() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_test_category_concept"]], "get_test_cluster_concept() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_test_cluster_concept"]], "get_test_concept_names() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.get_test_concept_names"]], "graphai.core.ontology": [[85, "module-graphai.core.ontology"]], "load_anchor_page_dict() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_anchor_page_dict"]], "load_category_category() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_category_category"]], "load_category_concept() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_category_concept"]], "load_concept_concept_graphscore() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_concept_concept_graphscore"]], "load_data() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_data"]], "load_non_ontology_concept_names() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_non_ontology_concept_names"]], "load_ontology_categories() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_ontology_categories"]], "load_ontology_concept_names() (graphai.core.ontology.ontologydata method)": [[85, "graphai.core.ontology.OntologyData.load_ontology_concept_names"]], "recompute_clusters() (in module graphai.core.ontology)": [[85, "graphai.core.ontology.recompute_clusters"]], "arithmetic_mean_laplacians() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.arithmetic_mean_laplacians"]], "assign_to_categories_using_existing() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.assign_to_categories_using_existing"]], "cluster_and_reassign_outliers() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.cluster_and_reassign_outliers"]], "cluster_using_embedding() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.cluster_using_embedding"]], "combine_and_embed_laplacian() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.combine_and_embed_laplacian"]], "combine_laplacians() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.combine_laplacians"]], "compute_all_graphs_from_scratch() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.compute_all_graphs_from_scratch"]], "convert_cluster_labels_to_dict() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.convert_cluster_labels_to_dict"]], "davies_bouldin_eval() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.davies_bouldin_eval"]], "get_laplacian() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.get_laplacian"]], "graphai.core.ontology.clustering": [[86, "module-graphai.core.ontology.clustering"]], "group_clustered() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.group_clustered"]], "normalize_features() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.normalize_features"]], "perform_pca() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.perform_PCA"]], "perform_constrained_agglomerative() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.perform_constrained_agglomerative"]], "precompute_clustering_metric() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.precompute_clustering_metric"]], "reassign_outliers() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.reassign_outliers"]], "spec_embed_on_laplacian() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.spec_embed_on_laplacian"]], "sum_laplacians() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.sum_laplacians"]], "variance_ratio_eval() (in module graphai.core.ontology.clustering)": [[86, "graphai.core.ontology.clustering.variance_ratio_eval"]], "ontologydata (class in graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.OntologyData"]], "adjusted_exp() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.adjusted_exp"]], "adjusted_exp_slope_1_point() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.adjusted_exp_slope_1_point"]], "average_and_combine() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.average_and_combine"]], "combine_concept_and_anchor_scores() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.combine_concept_and_anchor_scores"]], "compute_average() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.compute_average"]], "compute_average_of_df() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.compute_average_of_df"]], "compute_precalculated_similarity_matrices() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.compute_precalculated_similarity_matrices"]], "compute_symmetric_concept_concept_matrix() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.compute_symmetric_concept_concept_matrix"]], "convert_to_csr_matrix() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.convert_to_csr_matrix"]], "create_graph_from_df() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.create_graph_from_df"]], "db_results_to_pandas_df() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.db_results_to_pandas_df"]], "derive_col_to_col_graph() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.derive_col_to_col_graph"]], "embeddings_table_exists() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.embeddings_table_exists"]], "ensure_nonzero_denominator() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.ensure_nonzero_denominator"]], "execute_multi_entity_concepts_and_anchors_query() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.execute_multi_entity_concepts_and_anchors_query"]], "execute_single_entity_concepts_and_anchors_query() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.execute_single_entity_concepts_and_anchors_query"]], "generate_category_concept_dict() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.generate_category_concept_dict"]], "generate_tree_structure() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.generate_tree_structure"]], "get_category_anchor_pages() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_anchor_pages"]], "get_category_branch() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_branch"]], "get_category_category_similarity() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_category_similarity"]], "get_category_children() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_children"]], "get_category_closest_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_closest_category"]], "get_category_cluster_list() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_cluster_list"]], "get_category_cluster_table() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_cluster_table"]], "get_category_concept_list() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_concept_list"]], "get_category_concept_table() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_concept_table"]], "get_category_parent() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_parent"]], "get_category_to_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_category_to_category"]], "get_cluster_category_similarity() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_category_similarity"]], "get_cluster_children() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_children"]], "get_cluster_closest_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_closest_category"]], "get_cluster_closest_category_embedding() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_closest_category_embedding"]], "get_cluster_cluster_similarity() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_cluster_similarity"]], "get_cluster_concept_list() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_concept_list"]], "get_cluster_concepts() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_concepts"]], "get_cluster_parent() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_cluster_parent"]], "get_col_to_col_dict() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.get_col_to_col_dict"]], "get_concept_category_closest_embedding() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_category_closest_embedding"]], "get_concept_category_similarity() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_category_similarity"]], "get_concept_closest_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_closest_category"]], "get_concept_closest_concept() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_closest_concept"]], "get_concept_closest_concept_embedding() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_closest_concept_embedding"]], "get_concept_cluster_similarity() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_cluster_similarity"]], "get_concept_concept_graphscore_table() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_concept_graphscore_table"]], "get_concept_concept_similarity() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_concept_similarity"]], "get_concept_name() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_name"]], "get_concept_names_list() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_names_list"]], "get_concept_parent_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_parent_category"]], "get_concept_parent_cluster() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_concept_parent_cluster"]], "get_custom_cluster_closest_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_custom_cluster_closest_category"]], "get_custom_cluster_closest_category_embedding() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_custom_cluster_closest_category_embedding"]], "get_id_dict() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.get_id_dict"]], "get_non_ontology_concept_names() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_non_ontology_concept_names"]], "get_ontology_category_info() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_ontology_category_info"]], "get_ontology_category_names() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_ontology_category_names"]], "get_ontology_concept_names_table() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_ontology_concept_names_table"]], "get_root_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_root_category"]], "get_test_category_concept() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_test_category_concept"]], "get_test_cluster_concept() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_test_cluster_concept"]], "get_test_concept_names() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.get_test_concept_names"]], "graphai.core.ontology.data": [[87, "module-graphai.core.ontology.data"]], "load_anchor_page_dict() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_anchor_page_dict"]], "load_category_category() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_category_category"]], "load_category_concept() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_category_concept"]], "load_concept_concept_graphscore() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_concept_concept_graphscore"]], "load_data() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_data"]], "load_non_ontology_concept_names() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_non_ontology_concept_names"]], "load_ontology_categories() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_ontology_categories"]], "load_ontology_concept_names() (graphai.core.ontology.data.ontologydata method)": [[87, "graphai.core.ontology.data.OntologyData.load_ontology_concept_names"]], "make_adj_undirected() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.make_adj_undirected"]], "remove_invalid_pairs() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.remove_invalid_pairs"]], "return_chosen_indices() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.return_chosen_indices"]], "to_ndarray_and_flatten() (in module graphai.core.ontology.data)": [[87, "graphai.core.ontology.data.to_ndarray_and_flatten"]], "break_up_cluster() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.break_up_cluster"]], "get_category_info() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.get_category_info"]], "get_cluster_category_closest() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.get_cluster_category_closest"]], "get_cluster_info() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.get_cluster_info"]], "get_concept_category_closest() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.get_concept_category_closest"]], "get_concept_concept_closest() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.get_concept_concept_closest"]], "get_concept_info() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.get_concept_info"]], "graphai.core.ontology.ontology": [[88, "module-graphai.core.ontology.ontology"]], "recompute_clusters() (in module graphai.core.ontology.ontology)": [[88, "graphai.core.ontology.ontology.recompute_clusters"]], "get_openalex_nearest() (in module graphai.core.ontology.openalex)": [[89, "graphai.core.ontology.openalex.get_openalex_nearest"]], "graphai.core.ontology.openalex": [[89, "module-graphai.core.ontology.openalex"]], "graphai.core.retrieval": [[90, "module-graphai.core.retrieval"]], "anonymizermodels (class in graphai.core.retrieval.anonymization)": [[91, "graphai.core.retrieval.anonymization.AnonymizerModels"]], "anonymize() (graphai.core.retrieval.anonymization.anonymizermodels method)": [[91, "graphai.core.retrieval.anonymization.AnonymizerModels.anonymize"]], "anonymize_text() (in module graphai.core.retrieval.anonymization)": [[91, "graphai.core.retrieval.anonymization.anonymize_text"]], "graphai.core.retrieval.anonymization": [[91, "module-graphai.core.retrieval.anonymization"]], "load_models() (graphai.core.retrieval.anonymization.anonymizermodels method)": [[91, "graphai.core.retrieval.anonymization.AnonymizerModels.load_models"]], "graphai.core.retrieval.retrieval_settings": [[92, "module-graphai.core.retrieval.retrieval_settings"]], "chunk_text() (in module graphai.core.retrieval.retrieval_utils)": [[93, "graphai.core.retrieval.retrieval_utils.chunk_text"]], "graphai.core.retrieval.retrieval_utils": [[93, "module-graphai.core.retrieval.retrieval_utils"]], "has_invalid_characters() (in module graphai.core.retrieval.retrieval_utils)": [[93, "graphai.core.retrieval.retrieval_utils.has_invalid_characters"]], "normalize_index_name() (in module graphai.core.retrieval.retrieval_utils)": [[93, "graphai.core.retrieval.retrieval_utils.normalize_index_name"]], "retrieve_from_es() (in module graphai.core.retrieval.retrieval_utils)": [[93, "graphai.core.retrieval.retrieval_utils.retrieve_from_es"]], "search_es_index() (in module graphai.core.retrieval.retrieval_utils)": [[93, "graphai.core.retrieval.retrieval_utils.search_es_index"]], "graphai.core.scraping": [[94, "module-graphai.core.scraping"]], "cache_lookup_get_sublinks() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.cache_lookup_get_sublinks"]], "cache_lookup_process_all_sublinks() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.cache_lookup_process_all_sublinks"]], "check_url() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.check_url"]], "compare_strings() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.compare_strings"]], "create_base_url_token() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.create_base_url_token"]], "extract_scraping_content_callback() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.extract_scraping_content_callback"]], "extract_text_from_url() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.extract_text_from_url"]], "find_consecutive_runs() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.find_consecutive_runs"]], "find_edge_patterns() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.find_edge_patterns"]], "find_repeated_patterns() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.find_repeated_patterns"]], "find_spaces() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.find_spaces"]], "generate_sublink_token() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.generate_sublink_token"]], "get_sublinks() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.get_sublinks"]], "graphai.core.scraping.scraping": [[95, "module-graphai.core.scraping.scraping"]], "initialize_data_dict() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.initialize_data_dict"]], "initialize_url() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.initialize_url"]], "initialize_url_and_get_sublinks() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.initialize_url_and_get_sublinks"]], "parse_page_type() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.parse_page_type"]], "process_all_scraping_sublinks_parallel() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.process_all_scraping_sublinks_parallel"]], "process_all_sublinks() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.process_all_sublinks"]], "reconstruct_data_dict() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.reconstruct_data_dict"]], "remove_headers() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.remove_headers"]], "remove_junk_scraping_parallel() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.remove_junk_scraping_parallel"]], "remove_long_patterns() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.remove_long_patterns"]], "scraping_sublinks_callback() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.scraping_sublinks_callback"]], "shift_to_max_correlation() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.shift_to_max_correlation"]], "string_circular_shift() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.string_circular_shift"]], "sublink_parallel_processing_merge_callback() (in module graphai.core.scraping.scraping)": [[95, "graphai.core.scraping.scraping.sublink_parallel_processing_merge_callback"]], "conceptsgraph (class in graphai.core.text)": [[96, "graphai.core.text.ConceptsGraph"]], "add_graph_score() (graphai.core.text.conceptsgraph method)": [[96, "graphai.core.text.ConceptsGraph.add_graph_score"]], "add_ontology_scores() (graphai.core.text.conceptsgraph method)": [[96, "graphai.core.text.ConceptsGraph.add_ontology_scores"]], "compute_scores() (in module graphai.core.text)": [[96, "graphai.core.text.compute_scores"]], "draw_graph() (in module graphai.core.text)": [[96, "graphai.core.text.draw_graph"]], "draw_ontology() (in module graphai.core.text)": [[96, "graphai.core.text.draw_ontology"]], "extract_keywords() (in module graphai.core.text)": [[96, "graphai.core.text.extract_keywords"]], "generate_exercise() (in module graphai.core.text)": [[96, "graphai.core.text.generate_exercise"]], "get_ontology_concepts() (graphai.core.text.conceptsgraph method)": [[96, "graphai.core.text.ConceptsGraph.get_ontology_concepts"]], "graphai.core.text": [[96, "module-graphai.core.text"]], "load_from_db() (graphai.core.text.conceptsgraph method)": [[96, "graphai.core.text.ConceptsGraph.load_from_db"]], "wikisearch() (in module graphai.core.text)": [[96, "graphai.core.text.wikisearch"]], "draw_graph() (in module graphai.core.text.draw)": [[97, "graphai.core.text.draw.draw_graph"]], "draw_ontology() (in module graphai.core.text.draw)": [[97, "graphai.core.text.draw.draw_ontology"]], "graphai.core.text.draw": [[97, "module-graphai.core.text.draw"]], "conceptembeddings (class in graphai.core.text.embeddings)": [[98, "graphai.core.text.embeddings.ConceptEmbeddings"]], "compute_embedding_scores() (in module graphai.core.text.embeddings)": [[98, "graphai.core.text.embeddings.compute_embedding_scores"]], "graphai.core.text.embeddings": [[98, "module-graphai.core.text.embeddings"]], "values() (graphai.core.text.embeddings.conceptembeddings method)": [[98, "graphai.core.text.embeddings.ConceptEmbeddings.values"]], "generate_exercise() (in module graphai.core.text.exercises)": [[99, "graphai.core.text.exercises.generate_exercise"]], "graphai.core.text.exercises": [[99, "module-graphai.core.text.exercises"]], "conceptsgraph (class in graphai.core.text.graph)": [[100, "graphai.core.text.graph.ConceptsGraph"]], "add_graph_score() (graphai.core.text.graph.conceptsgraph method)": [[100, "graphai.core.text.graph.ConceptsGraph.add_graph_score"]], "add_ontology_scores() (graphai.core.text.graph.conceptsgraph method)": [[100, "graphai.core.text.graph.ConceptsGraph.add_ontology_scores"]], "get_ontology_concepts() (graphai.core.text.graph.conceptsgraph method)": [[100, "graphai.core.text.graph.ConceptsGraph.get_ontology_concepts"]], "graphai.core.text.graph": [[100, "module-graphai.core.text.graph"]], "load_from_db() (graphai.core.text.graph.conceptsgraph method)": [[100, "graphai.core.text.graph.ConceptsGraph.load_from_db"]], "extract_keywords() (in module graphai.core.text.keywords)": [[101, "graphai.core.text.keywords.extract_keywords"]], "graphai.core.text.keywords": [[101, "module-graphai.core.text.keywords"]], "rake_extract() (in module graphai.core.text.keywords)": [[101, "graphai.core.text.keywords.rake_extract"]], "word_tokens() (in module graphai.core.text.keywords)": [[101, "graphai.core.text.keywords.word_tokens"]], "aggregate_results() (in module graphai.core.text.scores)": [[102, "graphai.core.text.scores.aggregate_results"]], "compute_keywords_scores() (in module graphai.core.text.scores)": [[102, "graphai.core.text.scores.compute_keywords_scores"]], "compute_levenshtein_score() (in module graphai.core.text.scores)": [[102, "graphai.core.text.scores.compute_levenshtein_score"]], "compute_mixed_score() (in module graphai.core.text.scores)": [[102, "graphai.core.text.scores.compute_mixed_score"]], "compute_scores() (in module graphai.core.text.scores)": [[102, "graphai.core.text.scores.compute_scores"]], "filter_results() (in module graphai.core.text.scores)": [[102, "graphai.core.text.scores.filter_results"]], "graphai.core.text.scores": [[102, "module-graphai.core.text.scores"]], "graphai.core.text.wikisearch": [[103, "module-graphai.core.text.wikisearch"]], "search_elasticsearch() (in module graphai.core.text.wikisearch)": [[103, "graphai.core.text.wikisearch.search_elasticsearch"]], "search_wikipedia_api() (in module graphai.core.text.wikisearch)": [[103, "graphai.core.text.wikisearch.search_wikipedia_api"]], "wikisearch() (in module graphai.core.text.wikisearch)": [[103, "graphai.core.text.wikisearch.wikisearch"]], "graphai.core.translation": [[104, "module-graphai.core.translation"]], "translationmodels (class in graphai.core.translation.text_utils)": [[105, "graphai.core.translation.text_utils.TranslationModels"]], "compute_slide_tfidf_scores() (in module graphai.core.translation.text_utils)": [[105, "graphai.core.translation.text_utils.compute_slide_tfidf_scores"]], "find_best_slide_subset() (in module graphai.core.translation.text_utils)": [[105, "graphai.core.translation.text_utils.find_best_slide_subset"]], "find_set_cover() (in module graphai.core.translation.text_utils)": [[105, "graphai.core.translation.text_utils.find_set_cover"]], "generate_src_tgt_dict() (in module graphai.core.translation.text_utils)": [[105, "graphai.core.translation.text_utils.generate_src_tgt_dict"]], "generate_translation_text_token() (in module graphai.core.translation.text_utils)": [[105, "graphai.core.translation.text_utils.generate_translation_text_token"]], "get_device() (graphai.core.translation.text_utils.translationmodels method)": [[105, "graphai.core.translation.text_utils.TranslationModels.get_device"]], "get_last_usage() (graphai.core.translation.text_utils.translationmodels method)": [[105, "graphai.core.translation.text_utils.TranslationModels.get_last_usage"]], "graphai.core.translation.text_utils": [[105, "module-graphai.core.translation.text_utils"]], "load_models() (graphai.core.translation.text_utils.translationmodels method)": [[105, "graphai.core.translation.text_utils.TranslationModels.load_models"]], "translate() (graphai.core.translation.text_utils.translationmodels method)": [[105, "graphai.core.translation.text_utils.TranslationModels.translate"]], "unload_model() (graphai.core.translation.text_utils.translationmodels method)": [[105, "graphai.core.translation.text_utils.TranslationModels.unload_model"]], "cache_lookup_translate_text() (in module graphai.core.translation.translation)": [[106, "graphai.core.translation.translation.cache_lookup_translate_text"]], "cache_lookup_translation_text_using_fingerprint() (in module graphai.core.translation.translation)": [[106, "graphai.core.translation.translation.cache_lookup_translation_text_using_fingerprint"]], "compute_translation_text_fingerprint_callback() (in module graphai.core.translation.translation)": [[106, "graphai.core.translation.translation.compute_translation_text_fingerprint_callback"]], "detect_language_translation() (in module graphai.core.translation.translation)": [[106, "graphai.core.translation.translation.detect_language_translation"]], "graphai.core.translation.translation": [[106, "module-graphai.core.translation.translation"]], "translate_text() (in module graphai.core.translation.translation)": [[106, "graphai.core.translation.translation.translate_text"]], "translate_text_callback() (in module graphai.core.translation.translation)": [[106, "graphai.core.translation.translation.translate_text_callback"]], "translate_text_return_list_callback() (in module graphai.core.translation.translation)": [[106, "graphai.core.translation.translation.translate_text_return_list_callback"]], "graphai.core.utils": [[107, "module-graphai.core.utils"]], "breadcrumb (class in graphai.core.utils.breadcrumb)": [[108, "graphai.core.utils.breadcrumb.Breadcrumb"]], "graphai.core.utils.breadcrumb": [[108, "module-graphai.core.utils.breadcrumb"]], "indent() (graphai.core.utils.breadcrumb.breadcrumb method)": [[108, "graphai.core.utils.breadcrumb.Breadcrumb.indent"]], "log() (graphai.core.utils.breadcrumb.breadcrumb method)": [[108, "graphai.core.utils.breadcrumb.Breadcrumb.log"]], "outdent() (graphai.core.utils.breadcrumb.breadcrumb method)": [[108, "graphai.core.utils.breadcrumb.Breadcrumb.outdent"]], "report() (graphai.core.utils.breadcrumb.breadcrumb method)": [[108, "graphai.core.utils.breadcrumb.Breadcrumb.report"]], "progressbar (class in graphai.core.utils.progress_bar)": [[109, "graphai.core.utils.progress_bar.ProgressBar"]], "graphai.core.utils.progress_bar": [[109, "module-graphai.core.utils.progress_bar"]], "reset() (graphai.core.utils.progress_bar.progressbar method)": [[109, "graphai.core.utils.progress_bar.ProgressBar.reset"]], "update() (graphai.core.utils.progress_bar.progressbar method)": [[109, "graphai.core.utils.progress_bar.ProgressBar.update"]], "graphai.core.utils.text": [[110, "module-graphai.core.utils.text"]], "htmlcleaner (class in graphai.core.utils.text.clean)": [[111, "graphai.core.utils.text.clean.HTMLCleaner"]], "get_data() (graphai.core.utils.text.clean.htmlcleaner method)": [[111, "graphai.core.utils.text.clean.HTMLCleaner.get_data"]], "graphai.core.utils.text.clean": [[111, "module-graphai.core.utils.text.clean"]], "handle_data() (graphai.core.utils.text.clean.htmlcleaner method)": [[111, "graphai.core.utils.text.clean.HTMLCleaner.handle_data"]], "handle_endtag() (graphai.core.utils.text.clean.htmlcleaner method)": [[111, "graphai.core.utils.text.clean.HTMLCleaner.handle_endtag"]], "handle_starttag() (graphai.core.utils.text.clean.htmlcleaner method)": [[111, "graphai.core.utils.text.clean.HTMLCleaner.handle_starttag"]], "normalize() (in module graphai.core.utils.text.clean)": [[111, "graphai.core.utils.text.clean.normalize"]], "colors (class in graphai.core.utils.text.io)": [[112, "graphai.core.utils.text.io.Colors"]], "codes (graphai.core.utils.text.io.colors attribute)": [[112, "graphai.core.utils.text.io.Colors.codes"]], "cprint() (in module graphai.core.utils.text.io)": [[112, "graphai.core.utils.text.io.cprint"]], "graphai.core.utils.text.io": [[112, "module-graphai.core.utils.text.io"]], "log() (in module graphai.core.utils.text.io)": [[112, "graphai.core.utils.text.io.log"]], "mkdir() (in module graphai.core.utils.text.io)": [[112, "graphai.core.utils.text.io.mkdir"]], "pprint() (in module graphai.core.utils.text.io)": [[112, "graphai.core.utils.text.io.pprint"]], "pref (graphai.core.utils.text.io.colors attribute)": [[112, "graphai.core.utils.text.io.Colors.pref"]], "read_json() (in module graphai.core.utils.text.io)": [[112, "graphai.core.utils.text.io.read_json"]], "reset (graphai.core.utils.text.io.colors attribute)": [[112, "graphai.core.utils.text.io.Colors.reset"]], "save_json() (in module graphai.core.utils.text.io)": [[112, "graphai.core.utils.text.io.save_json"]], "graphai.core.utils.time": [[113, "module-graphai.core.utils.time"]], "add_years() (in module graphai.core.utils.time.date)": [[114, "graphai.core.utils.time.date.add_years"]], "graphai.core.utils.time.date": [[114, "module-graphai.core.utils.time.date"]], "now() (in module graphai.core.utils.time.date)": [[114, "graphai.core.utils.time.date.now"]], "rescale() (in module graphai.core.utils.time.date)": [[114, "graphai.core.utils.time.date.rescale"]], "stopwatch (class in graphai.core.utils.time.stopwatch)": [[115, "graphai.core.utils.time.stopwatch.Stopwatch"]], "delta() (graphai.core.utils.time.stopwatch.stopwatch method)": [[115, "graphai.core.utils.time.stopwatch.Stopwatch.delta"]], "graphai.core.utils.time.stopwatch": [[115, "module-graphai.core.utils.time.stopwatch"]], "report() (graphai.core.utils.time.stopwatch.stopwatch method)": [[115, "graphai.core.utils.time.stopwatch.Stopwatch.report"]], "reset() (graphai.core.utils.time.stopwatch.stopwatch method)": [[115, "graphai.core.utils.time.stopwatch.Stopwatch.reset"]], "tick() (graphai.core.utils.time.stopwatch.stopwatch method)": [[115, "graphai.core.utils.time.stopwatch.Stopwatch.tick"]], "total() (graphai.core.utils.time.stopwatch.stopwatch method)": [[115, "graphai.core.utils.time.stopwatch.Stopwatch.total"]], "graphai.core.video": [[116, "module-graphai.core.video"]], "add_token_status_to_single_image() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.add_token_status_to_single_image"]], "add_token_status_to_slide_list() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.add_token_status_to_slide_list"]], "cache_lookup_detect_slides() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.cache_lookup_detect_slides"]], "cache_lookup_extract_audio() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.cache_lookup_extract_audio"]], "cache_lookup_retrieve_file_from_url() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.cache_lookup_retrieve_file_from_url"]], "compute_audio_fingerprint() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_audio_fingerprint"]], "compute_audio_fingerprint_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_audio_fingerprint_callback"]], "compute_noise_level_parallel() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_noise_level_parallel"]], "compute_noise_threshold_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_noise_threshold_callback"]], "compute_single_image_fingerprint() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_single_image_fingerprint"]], "compute_slide_fingerprint_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_slide_fingerprint_callback"]], "compute_slide_set_fingerprint() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_slide_set_fingerprint"]], "compute_slide_transitions_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_slide_transitions_callback"]], "compute_slide_transitions_parallel() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_slide_transitions_parallel"]], "compute_video_fingerprint() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_video_fingerprint"]], "compute_video_fingerprint_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.compute_video_fingerprint_callback"]], "detect_slides_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.detect_slides_callback"]], "extract_and_sample_frames() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.extract_and_sample_frames"]], "extract_audio() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.extract_audio"]], "extract_audio_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.extract_audio_callback"]], "graphai.core.video.video": [[117, "module-graphai.core.video.video"]], "ignore_audio_fingerprint_results_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.ignore_audio_fingerprint_results_callback"]], "ignore_single_image_fingerprint_results_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.ignore_single_image_fingerprint_results_callback"]], "ignore_slide_fingerprint_results_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.ignore_slide_fingerprint_results_callback"]], "ignore_video_fingerprint_results_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.ignore_video_fingerprint_results_callback"]], "reextract_cached_audio() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.reextract_cached_audio"]], "reextract_cached_slides() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.reextract_cached_slides"]], "retrieve_audio_fingerprint_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.retrieve_audio_fingerprint_callback"]], "retrieve_file_from_url() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.retrieve_file_from_url"]], "retrieve_file_from_url_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.retrieve_file_from_url_callback"]], "retrieve_slide_fingerprint_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.retrieve_slide_fingerprint_callback"]], "retrieve_video_fingerprint_callback() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.retrieve_video_fingerprint_callback"]], "video_id_and_duration_fp_lookup() (in module graphai.core.video.video)": [[117, "graphai.core.video.video.video_id_and_duration_fp_lookup"]], "nlpmodels (class in graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.NLPModels"]], "check_ocr_and_hash_thresholds() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.check_ocr_and_hash_thresholds"]], "compute_ocr_noise_level() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.compute_ocr_noise_level"]], "compute_ocr_threshold() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.compute_ocr_threshold"]], "compute_video_ocr_transitions() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.compute_video_ocr_transitions"]], "create_video_filename_using_url_format() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.create_video_filename_using_url_format"]], "detect_audio_duration() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.detect_audio_duration"]], "extract_audio_from_video() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.extract_audio_from_video"]], "extract_frames() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.extract_frames"]], "frame_hash_similarity() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.frame_hash_similarity"]], "frame_ocr_distance() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.frame_ocr_distance"]], "frame_ocr_transition() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.frame_ocr_transition"]], "generate_audio_token() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.generate_audio_token"]], "generate_frame_sample_indices() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.generate_frame_sample_indices"]], "generate_img_and_ocr_paths_and_perform_tesseract_ocr() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.generate_img_and_ocr_paths_and_perform_tesseract_ocr"]], "generate_symbolic_token() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.generate_symbolic_token"]], "get_cosine_sim() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.get_cosine_sim"]], "get_text_word_vector() (graphai.core.video.video_utils.nlpmodels method)": [[118, "graphai.core.video.video_utils.NLPModels.get_text_word_vector"]], "get_text_word_vector_using_words() (graphai.core.video.video_utils.nlpmodels method)": [[118, "graphai.core.video.video_utils.NLPModels.get_text_word_vector_using_words"]], "get_words() (graphai.core.video.video_utils.nlpmodels method)": [[118, "graphai.core.video.video_utils.NLPModels.get_words"]], "graphai.core.video.video_utils": [[118, "module-graphai.core.video.video_utils"]], "load_nlp_models() (graphai.core.video.video_utils.nlpmodels method)": [[118, "graphai.core.video.video_utils.NLPModels.load_nlp_models"]], "perform_slow_audio_probe() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.perform_slow_audio_probe"]], "read_json_gz_file() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.read_json_gz_file"]], "read_txt_gz_file() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.read_txt_gz_file"]], "retrieve_file_from_any_source() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.retrieve_file_from_any_source"]], "retrieve_file_from_kaltura() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.retrieve_file_from_kaltura"]], "retrieve_file_from_youtube() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.retrieve_file_from_youtube"]], "retrieve_video_file_from_generic_url() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.retrieve_video_file_from_generic_url"]], "tesseract_ocr_or_get_cached() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.tesseract_ocr_or_get_cached"]], "write_txt_gz_file() (in module graphai.core.video.video_utils)": [[118, "graphai.core.video.video_utils.write_txt_gz_file"]], "graphai.core.voice": [[119, "module-graphai.core.voice"]], "whispertranscriptionmodel (class in graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.WhisperTranscriptionModel"]], "cache_lookup_audio_fingerprint() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.cache_lookup_audio_fingerprint"]], "cache_lookup_audio_language() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.cache_lookup_audio_language"]], "cache_lookup_audio_transcript() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.cache_lookup_audio_transcript"]], "detect_audio_segment_lang_whisper() (graphai.core.voice.transcribe.whispertranscriptionmodel method)": [[120, "graphai.core.voice.transcribe.WhisperTranscriptionModel.detect_audio_segment_lang_whisper"]], "detect_language_callback() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.detect_language_callback"]], "detect_language_parallel() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.detect_language_parallel"]], "detect_language_retrieve_from_db_and_split() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.detect_language_retrieve_from_db_and_split"]], "extract_media_segment() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.extract_media_segment"]], "get_last_usage() (graphai.core.voice.transcribe.whispertranscriptionmodel method)": [[120, "graphai.core.voice.transcribe.WhisperTranscriptionModel.get_last_usage"]], "get_silence_thresholds() (graphai.core.voice.transcribe.whispertranscriptionmodel method)": [[120, "graphai.core.voice.transcribe.WhisperTranscriptionModel.get_silence_thresholds"]], "graphai.core.voice.transcribe": [[120, "module-graphai.core.voice.transcribe"]], "load_model_whisper() (graphai.core.voice.transcribe.whispertranscriptionmodel method)": [[120, "graphai.core.voice.transcribe.WhisperTranscriptionModel.load_model_whisper"]], "transcribe_audio_to_text() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.transcribe_audio_to_text"]], "transcribe_audio_whisper() (graphai.core.voice.transcribe.whispertranscriptionmodel method)": [[120, "graphai.core.voice.transcribe.WhisperTranscriptionModel.transcribe_audio_whisper"]], "transcribe_callback() (in module graphai.core.voice.transcribe)": [[120, "graphai.core.voice.transcribe.transcribe_callback"]], "unload_model() (graphai.core.voice.transcribe.whispertranscriptionmodel method)": [[120, "graphai.core.voice.transcribe.WhisperTranscriptionModel.unload_model"]], "graphai.definitions": [[121, "module-graphai.definitions"]], "graphai.pipelines": [[122, "module-graphai.pipelines"]], "graphai.pipelines.investment": [[123, "module-graphai.pipelines.investment"]], "aggregate_recent_past() (in module graphai.pipelines.investment.aggregate_recent_past)": [[124, "graphai.pipelines.investment.aggregate_recent_past.aggregate_recent_past"]], "aggregate_years() (in module graphai.pipelines.investment.aggregate_recent_past)": [[124, "graphai.pipelines.investment.aggregate_recent_past.aggregate_years"]], "compute_year_coefficients() (in module graphai.pipelines.investment.aggregate_recent_past)": [[124, "graphai.pipelines.investment.aggregate_recent_past.compute_year_coefficients"]], "graphai.pipelines.investment.aggregate_recent_past": [[124, "module-graphai.pipelines.investment.aggregate_recent_past"]], "normalize_scores() (in module graphai.pipelines.investment.aggregate_recent_past)": [[124, "graphai.pipelines.investment.aggregate_recent_past.normalize_scores"]], "rescale_scores() (in module graphai.pipelines.investment.aggregate_recent_past)": [[124, "graphai.pipelines.investment.aggregate_recent_past.rescale_scores"]], "graphai.pipelines.investment.check_unit": [[125, "module-graphai.pipelines.investment.check_unit"]], "main() (in module graphai.pipelines.investment.check_unit)": [[125, "graphai.pipelines.investment.check_unit.main"]], "show_matchmaking_chart_view() (in module graphai.pipelines.investment.check_unit)": [[125, "graphai.pipelines.investment.check_unit.show_matchmaking_chart_view"]], "show_matchmaking_list_view() (in module graphai.pipelines.investment.check_unit)": [[125, "graphai.pipelines.investment.check_unit.show_matchmaking_list_view"]], "show_trends() (in module graphai.pipelines.investment.check_unit)": [[125, "graphai.pipelines.investment.check_unit.show_trends"]], "compute_fundraisers_units() (in module graphai.pipelines.investment.compute_fundraisers_units)": [[126, "graphai.pipelines.investment.compute_fundraisers_units.compute_fundraisers_units"]], "graphai.pipelines.investment.compute_fundraisers_units": [[126, "module-graphai.pipelines.investment.compute_fundraisers_units"]], "compute_investors_units() (in module graphai.pipelines.investment.compute_investors_units)": [[127, "graphai.pipelines.investment.compute_investors_units.compute_investors_units"]], "graphai.pipelines.investment.compute_investors_units": [[127, "module-graphai.pipelines.investment.compute_investors_units"]], "compute_investors_units_2() (in module graphai.pipelines.investment.compute_investors_units_2)": [[128, "graphai.pipelines.investment.compute_investors_units_2.compute_investors_units_2"]], "graphai.pipelines.investment.compute_investors_units_2": [[128, "module-graphai.pipelines.investment.compute_investors_units_2"]], "compute_jaccard_index() (in module graphai.pipelines.investment.compute_jaccard_index)": [[129, "graphai.pipelines.investment.compute_jaccard_index.compute_jaccard_index"]], "graphai.pipelines.investment.compute_jaccard_index": [[129, "module-graphai.pipelines.investment.compute_jaccard_index"]], "combine() (in module graphai.pipelines.investment.concept_configuration)": [[130, "graphai.pipelines.investment.concept_configuration.combine"]], "compute_affinities() (in module graphai.pipelines.investment.concept_configuration)": [[130, "graphai.pipelines.investment.concept_configuration.compute_affinities"]], "graphai.pipelines.investment.concept_configuration": [[130, "module-graphai.pipelines.investment.concept_configuration"]], "mix() (in module graphai.pipelines.investment.concept_configuration)": [[130, "graphai.pipelines.investment.concept_configuration.mix"]], "norm() (in module graphai.pipelines.investment.concept_configuration)": [[130, "graphai.pipelines.investment.concept_configuration.norm"]], "normalise() (in module graphai.pipelines.investment.concept_configuration)": [[130, "graphai.pipelines.investment.concept_configuration.normalise"]], "normalise_graph() (in module graphai.pipelines.investment.concept_configuration)": [[130, "graphai.pipelines.investment.concept_configuration.normalise_graph"]], "create_investments_graph() (in module graphai.pipelines.investment.create_investments_graph)": [[131, "graphai.pipelines.investment.create_investments_graph.create_investments_graph"]], "derive_yearly_data() (in module graphai.pipelines.investment.create_investments_graph)": [[131, "graphai.pipelines.investment.create_investments_graph.derive_yearly_data"]], "get_frs() (in module graphai.pipelines.investment.create_investments_graph)": [[131, "graphai.pipelines.investment.create_investments_graph.get_frs"]], "get_frs_fundraisers() (in module graphai.pipelines.investment.create_investments_graph)": [[131, "graphai.pipelines.investment.create_investments_graph.get_frs_fundraisers"]], "get_fundraisers_concepts() (in module graphai.pipelines.investment.create_investments_graph)": [[131, "graphai.pipelines.investment.create_investments_graph.get_fundraisers_concepts"]], "get_investors_frs() (in module graphai.pipelines.investment.create_investments_graph)": [[131, "graphai.pipelines.investment.create_investments_graph.get_investors_frs"]], "graphai.pipelines.investment.create_investments_graph": [[131, "module-graphai.pipelines.investment.create_investments_graph"]], "detect_fundraisers_concepts() (in module graphai.pipelines.investment.detect_fundraisers_concepts)": [[132, "graphai.pipelines.investment.detect_fundraisers_concepts.detect_fundraisers_concepts"]], "graphai.pipelines.investment.detect_fundraisers_concepts": [[132, "module-graphai.pipelines.investment.detect_fundraisers_concepts"]], "graphai.pipelines.investment.main": [[133, "module-graphai.pipelines.investment.main"]], "main() (in module graphai.pipelines.investment.main)": [[133, "graphai.pipelines.investment.main.main"]], "build_prefix() (in module graphai.pipelines.investment.parameters)": [[134, "graphai.pipelines.investment.parameters.build_prefix"]], "graphai.pipelines.investment.parameters": [[134, "module-graphai.pipelines.investment.parameters"]], "base() (in module graphai.pipelines.investment.toy_example)": [[135, "graphai.pipelines.investment.toy_example.base"]], "complete() (in module graphai.pipelines.investment.toy_example)": [[135, "graphai.pipelines.investment.toy_example.complete"]], "graphai.pipelines.investment.toy_example": [[135, "module-graphai.pipelines.investment.toy_example"]], "path() (in module graphai.pipelines.investment.toy_example)": [[135, "graphai.pipelines.investment.toy_example.path"]], "random() (in module graphai.pipelines.investment.toy_example)": [[135, "graphai.pipelines.investment.toy_example.random"]], "graphai.pipelines.validation": [[136, "module-graphai.pipelines.validation"]], "graphai.pipelines.visualisation": [[140, "module-graphai.pipelines.visualisation"]]}})